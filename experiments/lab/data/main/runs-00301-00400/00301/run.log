INFO     planner time limit: 1800s
INFO     planner memory limit: 2048 MB

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: 1799s
INFO     translator memory limit: 2048 MB
INFO     translator command line string: /home/henry/Documents/UFRGS/TCC/downward/.venv/bin/python /home/henry/Documents/UFRGS/TCC/downward/experiments/lab/data/main/code-5bb2ccb6957559b6969ffd7e29254c73f84d5e49_e5e41175/builds/release/bin/translate/translate.py domain.pddl problem.pddl --sas-file output.sas
Parsing...
Parsing: [0.010s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.002s wall-clock]
Preparing model... [0.000s CPU, 0.001s wall-clock]
Generated 51 rules.
Computing model... [0.130s CPU, 0.131s wall-clock]
18873 relevant atoms
6856 auxiliary atoms
25729 final queue length
64385 total queue pushes
Completing instantiation... [0.470s CPU, 0.469s wall-clock]
Instantiating: [0.600s CPU, 0.605s wall-clock]
Computing fact groups...
Finding invariants...
5 initial candidates
Finding invariants: [0.010s CPU, 0.012s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
16 uncovered facts
Choosing groups: [0.000s CPU, 0.001s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.014s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.030s CPU, 0.022s wall-clock]
Translating task: [0.450s CPU, 0.448s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
16 propositions removed
Detecting unreachable propositions: [0.240s CPU, 0.235s wall-clock]
Reordering and filtering variables...
32 of 32 variables necessary.
16 of 32 mutex groups necessary.
17280 of 17280 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.050s CPU, 0.048s wall-clock]
Translator variables: 32
Translator derived variables: 0
Translator facts: 288
Translator goal facts: 32
Translator mutex groups: 16
Translator total mutex groups size: 256
Translator operators: 17280
Translator axioms: 0
Translator task size: 88928
Translator peak memory: 97328 KB
Writing output... [0.060s CPU, 0.065s wall-clock]
Done! [1.450s CPU, 1.443s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: 1798s
INFO     search memory limit: 2048 MB
INFO     search command line string: /home/henry/Documents/UFRGS/TCC/downward/experiments/lab/data/main/code-5bb2ccb6957559b6969ffd7e29254c73f84d5e49_e5e41175/builds/release/bin/downward --search 'eager_greedy([lsh(patterns=systematic(2), transform=adapt_costs(cost_type=ONE))])' --internal-plan-file sas_plan < output.sas
[t=0s, 10544 KB] reading input...
[t=0.0519517s, 15600 KB] done reading input!
[t=0.0519517s, 15996 KB] Generating patterns using: systematic pattern collection generator
[t=0.0519517s, 15996 KB] building causal graph...done! [t=0.00400723s]
[t=0.055959s, 15996 KB] Found 408 SGA patterns.
[t=0.055959s, 15996 KB] Found 408 interesting patterns.
[t=0.055959s, 15996 KB] systematic pattern collection generator number of patterns: 408
[t=0.055959s, 15996 KB] systematic pattern collection generator total PDB size: 39200
[t=0.055959s, 15996 KB] systematic pattern collection generator computation time: 0.00400723s
[t=0.055959s, 15996 KB] Computing PDBs for pattern collection...
[t=1.04704s, 16852 KB] Done computing PDBs for pattern collection: 0.991081s
[t=1.17094s, 30656 KB] Building successor generator...done!
[t=1.17493s, 32276 KB] peak memory difference for successor generator creation: 1620 KB
[t=1.17493s, 32276 KB] time for successor generation creation: 0.0039868s
[t=1.17493s, 32276 KB] Variables: 32
[t=1.17493s, 32276 KB] FactPairs: 288
[t=1.17493s, 32276 KB] Bytes per state: 12
[t=1.17493s, 32276 KB] Conducting best first search without reopening closed nodes, (real) bound = 2147483647
[t=1.17493s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 43
[t=1.17493s, 32276 KB] g=0, 1 evaluated, 0 expanded
[t=1.17493s, 32276 KB] Initial heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 43
[t=1.17493s, 32276 KB] pruning method: none
[t=1.17493s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 42
[t=1.17493s, 32276 KB] g=1, 4 evaluated, 1 expanded
[t=1.17493s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 41
[t=1.17493s, 32276 KB] g=3, 29 evaluated, 1 expanded
[t=1.17493s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 40
[t=1.17493s, 32276 KB] g=6, 101 evaluated, 2 expanded
[t=1.17493s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 39
[t=1.17493s, 32276 KB] g=6, 109 evaluated, 2 expanded
[t=1.17893s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 38
[t=1.17893s, 32276 KB] g=7, 148 evaluated, 3 expanded
[t=1.17893s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 37
[t=1.17893s, 32276 KB] g=8, 226 evaluated, 4 expanded
[t=1.17893s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 36
[t=1.17893s, 32276 KB] g=11, 342 evaluated, 5 expanded
[t=1.17893s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 35
[t=1.17893s, 32276 KB] g=14, 384 evaluated, 6 expanded
[t=1.17893s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 34
[t=1.17893s, 32276 KB] g=14, 418 evaluated, 6 expanded
[t=1.17893s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 33
[t=1.17893s, 32276 KB] g=17, 454 evaluated, 7 expanded
[t=1.18294s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 32
[t=1.18294s, 32276 KB] g=20, 523 evaluated, 8 expanded
[t=1.18294s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 31
[t=1.18294s, 32276 KB] g=23, 591 evaluated, 9 expanded
[t=1.18294s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 30
[t=1.18294s, 32276 KB] g=24, 658 evaluated, 10 expanded
[t=1.18294s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 29
[t=1.18294s, 32276 KB] g=27, 724 evaluated, 11 expanded
[t=1.18294s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 28
[t=1.18294s, 32276 KB] g=28, 791 evaluated, 12 expanded
[t=1.18692s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 27
[t=1.18692s, 32276 KB] g=31, 855 evaluated, 13 expanded
[t=1.18692s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 26
[t=1.18692s, 32276 KB] g=32, 922 evaluated, 14 expanded
[t=1.18692s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 25
[t=1.18692s, 32276 KB] g=31, 984 evaluated, 15 expanded
[t=1.18692s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 24
[t=1.18692s, 32276 KB] g=32, 1052 evaluated, 16 expanded
[t=1.19093s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 23
[t=1.19093s, 32276 KB] g=37, 1198 evaluated, 18 expanded
[t=1.19093s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 22
[t=1.19093s, 32276 KB] g=36, 1246 evaluated, 19 expanded
[t=1.19093s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 21
[t=1.19093s, 32276 KB] g=37, 1335 evaluated, 20 expanded
[t=1.19093s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 20
[t=1.19093s, 32276 KB] g=38, 1396 evaluated, 21 expanded
[t=1.19492s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 19
[t=1.19492s, 32276 KB] g=40, 1908 evaluated, 30 expanded
[t=1.19492s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 18
[t=1.19492s, 32276 KB] g=40, 1920 evaluated, 30 expanded
[t=1.20691s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 17
[t=1.20691s, 32276 KB] g=46, 2949 evaluated, 46 expanded
[t=1.20691s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 16
[t=1.20691s, 32276 KB] g=46, 2974 evaluated, 46 expanded
[t=1.20691s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 15
[t=1.20691s, 32276 KB] g=45, 3039 evaluated, 47 expanded
[t=1.20691s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 14
[t=1.20691s, 32276 KB] g=48, 3103 evaluated, 48 expanded
[t=1.21091s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 13
[t=1.21091s, 32276 KB] g=51, 3170 evaluated, 49 expanded
[t=1.21091s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 12
[t=1.21091s, 32276 KB] g=50, 3235 evaluated, 50 expanded
[t=1.21091s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 11
[t=1.21091s, 32276 KB] g=52, 3498 evaluated, 55 expanded
[t=1.21492s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 10
[t=1.21492s, 32276 KB] g=53, 3635 evaluated, 57 expanded
[t=1.21492s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 9
[t=1.21492s, 32276 KB] g=56, 3752 evaluated, 58 expanded
[t=1.21492s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 8
[t=1.21492s, 32276 KB] g=59, 3823 evaluated, 59 expanded
[t=1.21492s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 7
[t=1.21492s, 32276 KB] g=58, 3840 evaluated, 60 expanded
[t=1.2189s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 6
[t=1.2189s, 32276 KB] g=62, 4013 evaluated, 62 expanded
[t=1.2189s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 5
[t=1.2189s, 32276 KB] g=65, 4035 evaluated, 63 expanded
[t=1.2189s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 4
[t=1.2189s, 32276 KB] g=66, 4094 evaluated, 64 expanded
[t=1.2189s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 3
[t=1.2189s, 32276 KB] g=72, 4218 evaluated, 66 expanded
[t=1.2189s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 2
[t=1.2189s, 32276 KB] g=72, 4225 evaluated, 66 expanded
[t=1.2189s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 0
[t=1.2189s, 32276 KB] g=76, 4367 evaluated, 68 expanded
[t=1.22291s, 32276 KB] Solution found!
[t=1.22291s, 32276 KB] Actual search time: 0.0479778s
analyze-2 seg-in-4 seg-out-1 car-in-4 car-out-1 (3)
analyze-2 seg-in-4 seg-out-1 car-out-1 car-in-4 (3)
rotate-2 seg-in-1 seg-out-2 car-in-1 car-out-2 (1)
rotate-2 seg-in-2 seg-out-3 car-in-2 car-out-3 (1)
analyze-2 seg-in-1 seg-out-1 car-out-2 car-out-1 (3)
analyze-2 seg-in-2 seg-out-1 car-out-3 car-out-2 (3)
analyze-2 seg-in-5 seg-out-1 car-in-5 car-out-3 (3)
analyze-2 seg-in-6 seg-out-1 car-in-6 car-in-5 (3)
rotate-2 seg-in-6 seg-out-1 car-in-5 car-in-6 (1)
analyze-2 seg-in-7 seg-out-1 car-in-7 car-in-5 (3)
rotate-2 seg-in-7 seg-out-1 car-in-5 car-in-7 (1)
analyze-2 seg-in-8 seg-out-1 car-in-8 car-in-5 (3)
rotate-2 seg-in-8 seg-out-1 car-in-5 car-in-8 (1)
rotate-2 seg-in-1 seg-out-1 car-out-1 car-in-5 (1)
rotate-2 seg-in-1 seg-out-4 car-in-5 car-out-4 (1)
analyze-2 seg-in-1 seg-out-1 car-out-4 car-out-1 (3)
rotate-2 seg-in-1 seg-out-1 car-out-1 car-out-4 (1)
rotate-2 seg-in-5 seg-out-4 car-out-3 car-in-5 (1)
rotate-2 seg-in-1 seg-out-4 car-out-4 car-out-3 (1)
rotate-2 seg-in-2 seg-out-5 car-out-2 car-out-5 (1)
rotate-2 seg-in-1 seg-out-3 car-out-3 car-in-2 (1)
rotate-2 seg-in-1 seg-out-6 car-in-2 car-out-6 (1)
analyze-2 seg-in-2 seg-out-1 car-out-5 car-out-1 (3)
rotate-2 seg-in-2 seg-out-1 car-out-1 car-out-5 (1)
rotate-2 seg-in-2 seg-out-5 car-out-5 car-out-2 (1)
analyze-2 seg-in-1 seg-out-1 car-out-6 car-out-1 (3)
rotate-2 seg-in-1 seg-out-1 car-out-1 car-out-6 (1)
rotate-2 seg-in-2 seg-out-7 car-out-2 car-out-7 (1)
rotate-2 seg-in-1 seg-out-6 car-out-6 car-in-2 (1)
rotate-2 seg-in-1 seg-out-7 car-in-2 car-out-2 (1)
rotate-2 seg-in-1 seg-out-2 car-out-2 car-in-1 (1)
analyze-2 seg-in-2 seg-out-1 car-out-7 car-out-1 (3)
rotate-2 seg-in-2 seg-out-1 car-out-1 car-out-7 (1)
rotate-2 seg-in-2 seg-out-7 car-out-7 car-in-2 (1)
rotate-2 seg-in-1 seg-out-8 car-in-1 car-out-8 (1)
analyze-2 seg-in-1 seg-out-1 car-out-8 car-out-1 (3)
analyze-2 seg-in-2 seg-out-1 car-in-2 car-out-8 (3)
rotate-2 seg-in-2 seg-out-8 car-out-8 car-in-1 (1)
analyze-2 seg-in-2 seg-out-1 car-in-1 car-in-2 (3)
rotate-2 seg-in-1 seg-out-1 car-out-1 car-in-1 (1)
analyze-2 seg-in-3 seg-out-1 car-in-3 car-out-1 (3)
rotate-2 seg-in-3 seg-out-1 car-out-1 car-in-3 (1)
[t=1.22291s, 32276 KB] Plan length: 42 step(s).
[t=1.22291s, 32276 KB] Plan cost: 74
[t=1.22291s, 32276 KB] Expanded 69 state(s).
[t=1.22291s, 32276 KB] Reopened 0 state(s).
[t=1.22291s, 32276 KB] Evaluated 4409 state(s).
[t=1.22291s, 32276 KB] Evaluations: 4409
[t=1.22291s, 32276 KB] Generated 4896 state(s).
[t=1.22291s, 32276 KB] Dead ends: 0 state(s).
[t=1.22291s, 32276 KB] Number of registered states: 4409
[t=1.22291s, 32276 KB] Int hash set load factor: 4409/8192 = 0.538208
[t=1.22291s, 32276 KB] Int hash set resizes: 13
[t=1.22291s, 32276 KB] Search time: 0.0479778s
[t=1.22291s, 32276 KB] Total time: 1.22291s
Solution found.
Peak memory: 32276 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Running validate.
INFO     validate stdin: None
INFO     validate time limit: None
INFO     validate memory limit: None
INFO     validate command line string: /home/henry/bin/validate domain.pddl problem.pddl sas_plan
Checking plan: sas_plan
Plan executed successfully - checking goal
Plan valid
Final value: 74 

Successful plans:
Value: 74
 sas_plan 74 

validate exit code: 0

INFO     Planner time: 2.74s
