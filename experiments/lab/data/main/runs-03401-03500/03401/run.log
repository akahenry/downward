INFO     planner time limit: 1800s
INFO     planner memory limit: 2048 MB

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: 1799s
INFO     translator memory limit: 2048 MB
INFO     translator command line string: /home/henry/Documents/UFRGS/TCC/downward/.venv/bin/python /home/henry/Documents/UFRGS/TCC/downward/experiments/lab/data/main/code-5bb2ccb6957559b6969ffd7e29254c73f84d5e49_e5e41175/builds/release/bin/translate/translate.py domain.pddl problem.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.004s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.001s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.010s CPU, 0.008s wall-clock]
Preparing model... [0.000s CPU, 0.004s wall-clock]
Generated 284 rules.
Computing model... [0.220s CPU, 0.214s wall-clock]
12075 relevant atoms
20466 auxiliary atoms
32541 final queue length
79327 total queue pushes
Completing instantiation... [0.580s CPU, 0.578s wall-clock]
Instantiating: [0.820s CPU, 0.814s wall-clock]
Computing fact groups...
Finding invariants...
22 initial candidates
Finding invariants: [0.040s CPU, 0.046s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.010s CPU, 0.006s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
330 uncovered facts
Choosing groups: [0.000s CPU, 0.001s wall-clock]
Building translation key... [0.000s CPU, 0.001s wall-clock]
Computing fact groups: [0.050s CPU, 0.058s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.001s wall-clock]
Building mutex information...
Building mutex information: [0.010s CPU, 0.001s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.020s CPU, 0.021s wall-clock]
Translating task: [0.580s CPU, 0.590s wall-clock]
8142 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
1 propositions removed
Detecting unreachable propositions: [0.320s CPU, 0.323s wall-clock]
Reordering and filtering variables...
342 of 356 variables necessary.
68 of 94 mutex groups necessary.
10887 of 10895 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.110s CPU, 0.113s wall-clock]
Translator variables: 342
Translator derived variables: 0
Translator facts: 1012
Translator goal facts: 4
Translator mutex groups: 68
Translator total mutex groups size: 873
Translator operators: 10887
Translator axioms: 0
Translator task size: 116538
Translator peak memory: 104768 KB
Writing output... [0.070s CPU, 0.080s wall-clock]
Done! [2.000s CPU, 2.012s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: 1797s
INFO     search memory limit: 2048 MB
INFO     search command line string: /home/henry/Documents/UFRGS/TCC/downward/experiments/lab/data/main/code-5bb2ccb6957559b6969ffd7e29254c73f84d5e49_e5e41175/builds/release/bin/downward --search 'eager_greedy([ff(transform=adapt_costs(cost_type=ONE))])' --internal-plan-file sas_plan < output.sas
[t=0s, 10544 KB] reading input...
[t=0.0504686s, 15132 KB] done reading input!
[t=0.0584654s, 19552 KB] Simplifying 61654 unary operators... done! [60554 unary operators]
[t=0.130417s, 24812 KB] time to simplify: 0.0719514s
[t=0.130417s, 24812 KB] Initializing additive heuristic...
[t=0.130417s, 24812 KB] Initializing FF heuristic...
[t=0.130417s, 24812 KB] Building successor generator...done!
[t=0.13443s, 24812 KB] peak memory difference for successor generator creation: 0 KB
[t=0.13443s, 24812 KB] time for successor generation creation: 0.00401273s
[t=0.13443s, 24812 KB] Variables: 342
[t=0.13443s, 24812 KB] FactPairs: 1012
[t=0.13443s, 24812 KB] Bytes per state: 56
[t=0.13443s, 24812 KB] Conducting best first search without reopening closed nodes, (real) bound = 2147483647
[t=0.13443s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 97
[t=0.13443s, 24812 KB] g=0, 1 evaluated, 0 expanded
[t=0.13443s, 24812 KB] Initial heuristic value for ff(transform=adapt_costs(cost_type=one)): 97
[t=0.13443s, 24812 KB] pruning method: none
[t=0.138412s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 96
[t=0.138412s, 24812 KB] g=1, 2 evaluated, 1 expanded
[t=0.138412s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 95
[t=0.138412s, 24812 KB] g=1, 4 evaluated, 1 expanded
[t=0.138412s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 94
[t=0.138412s, 24812 KB] g=2, 6 evaluated, 2 expanded
[t=0.146416s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 93
[t=0.146416s, 24812 KB] g=5, 17 evaluated, 6 expanded
[t=0.154386s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 92
[t=0.154386s, 24812 KB] g=7, 24 evaluated, 8 expanded
[t=0.162371s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 91
[t=0.162371s, 24812 KB] g=9, 34 evaluated, 11 expanded
[t=0.16637s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 89
[t=0.16637s, 24812 KB] g=11, 38 evaluated, 13 expanded
[t=0.170378s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 88
[t=0.170378s, 24812 KB] g=12, 43 evaluated, 14 expanded
[t=0.174361s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 87
[t=0.174361s, 24812 KB] g=13, 47 evaluated, 15 expanded
[t=0.178361s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 86
[t=0.178361s, 24812 KB] g=14, 52 evaluated, 16 expanded
[t=0.182366s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 85
[t=0.182366s, 24812 KB] g=15, 56 evaluated, 17 expanded
[t=0.182366s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 84
[t=0.182366s, 24812 KB] g=16, 59 evaluated, 18 expanded
[t=0.186351s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 83
[t=0.190359s, 24812 KB] g=17, 64 evaluated, 19 expanded
[t=0.194339s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 82
[t=0.194339s, 24812 KB] g=18, 73 evaluated, 20 expanded
[t=0.198337s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 81
[t=0.198337s, 24812 KB] g=19, 77 evaluated, 21 expanded
[t=0.206328s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 80
[t=0.206328s, 24812 KB] g=20, 86 evaluated, 22 expanded
[t=0.210334s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 79
[t=0.210334s, 24812 KB] g=22, 95 evaluated, 24 expanded
[t=0.230304s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 78
[t=0.230304s, 24812 KB] g=25, 120 evaluated, 31 expanded
[t=0.23431s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 77
[t=0.23431s, 24812 KB] g=26, 126 evaluated, 32 expanded
[t=0.246294s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 74
[t=0.246294s, 24812 KB] g=28, 139 evaluated, 35 expanded
[t=0.250269s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 73
[t=0.250269s, 24812 KB] g=29, 145 evaluated, 36 expanded
[t=0.298233s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 72
[t=0.298233s, 24812 KB] g=36, 209 evaluated, 65 expanded
[t=0.306227s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 71
[t=0.306227s, 24812 KB] g=38, 220 evaluated, 68 expanded
[t=0.334201s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 70
[t=0.334201s, 24812 KB] g=43, 266 evaluated, 80 expanded
[t=0.338187s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 69
[t=0.338187s, 24812 KB] g=44, 272 evaluated, 81 expanded
[t=0.79375s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 68
[t=0.79375s, 24812 KB] g=53, 1029 evaluated, 355 expanded
[t=0.79375s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 67
[t=0.79375s, 24812 KB] g=54, 1032 evaluated, 356 expanded
[t=0.797751s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 66
[t=0.797751s, 24812 KB] g=55, 1040 evaluated, 357 expanded
[t=0.841721s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 65
[t=0.841721s, 24812 KB] g=59, 1125 evaluated, 383 expanded
[t=0.845708s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 64
[t=0.845708s, 24812 KB] g=60, 1132 evaluated, 384 expanded
[t=0.849709s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 63
[t=0.849709s, 24812 KB] g=61, 1139 evaluated, 385 expanded
[t=0.849709s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 61
[t=0.849709s, 24812 KB] g=61, 1141 evaluated, 385 expanded
[t=0.857702s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 59
[t=0.857702s, 24812 KB] g=62, 1154 evaluated, 386 expanded
[t=0.861708s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 56
[t=0.861708s, 24812 KB] g=63, 1163 evaluated, 387 expanded
[t=0.865694s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 55
[t=0.865694s, 24812 KB] g=64, 1173 evaluated, 388 expanded
[t=0.885683s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 54
[t=0.885683s, 24812 KB] g=66, 1218 evaluated, 395 expanded
[t=0.889693s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 53
[t=0.889693s, 24812 KB] g=67, 1225 evaluated, 396 expanded
[t=0.901671s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 52
[t=0.901671s, 24812 KB] g=68, 1237 evaluated, 397 expanded
[t=0.905655s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 51
[t=0.905655s, 24812 KB] g=69, 1245 evaluated, 398 expanded
[t=0.965605s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 50
[t=0.965605s, 24812 KB] g=72, 1366 evaluated, 414 expanded
[t=0.973597s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 47
[t=0.973597s, 24812 KB] g=74, 1380 evaluated, 416 expanded
[t=0.977599s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 45
[t=0.977599s, 24812 KB] g=75, 1393 evaluated, 417 expanded
[t=0.977599s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 43
[t=0.977599s, 24812 KB] g=76, 1395 evaluated, 418 expanded
[t=0.981583s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 42
[t=0.981583s, 24812 KB] g=76, 1403 evaluated, 418 expanded
[t=0.985583s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 39
[t=0.985583s, 24812 KB] g=77, 1405 evaluated, 419 expanded
[t=0.98959s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 37
[t=0.98959s, 24812 KB] g=78, 1421 evaluated, 420 expanded
[t=0.993601s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 36
[t=0.993601s, 24812 KB] g=80, 1429 evaluated, 422 expanded
[t=0.997574s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 35
[t=0.997574s, 24812 KB] g=80, 1431 evaluated, 422 expanded
[t=0.997574s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 33
[t=0.997574s, 24812 KB] g=80, 1435 evaluated, 422 expanded
[t=1.00156s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 32
[t=1.00156s, 24812 KB] g=81, 1439 evaluated, 423 expanded
[t=1.00553s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 30
[t=1.00553s, 24812 KB] g=82, 1453 evaluated, 424 expanded
[t=1.00954s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 28
[t=1.00954s, 24812 KB] g=82, 1455 evaluated, 424 expanded
[t=1.01352s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 26
[t=1.01352s, 24812 KB] g=84, 1470 evaluated, 426 expanded
[t=1.01753s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 24
[t=1.01753s, 24812 KB] g=85, 1485 evaluated, 427 expanded
[t=1.02151s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 23
[t=1.02151s, 24812 KB] g=86, 1497 evaluated, 428 expanded
[t=1.02552s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 22
[t=1.02552s, 24812 KB] g=87, 1504 evaluated, 429 expanded
[t=1.0335s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 20
[t=1.0335s, 24812 KB] g=89, 1534 evaluated, 433 expanded
[t=1.0335s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 19
[t=1.0335s, 24812 KB] g=90, 1545 evaluated, 434 expanded
[t=1.03751s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 18
[t=1.03751s, 24812 KB] g=91, 1555 evaluated, 435 expanded
[t=1.0535s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 16
[t=1.0535s, 24812 KB] g=93, 1606 evaluated, 441 expanded
[t=1.0535s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 15
[t=1.0535s, 24812 KB] g=94, 1612 evaluated, 442 expanded
[t=1.05747s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 14
[t=1.05747s, 24812 KB] g=95, 1624 evaluated, 443 expanded
[t=1.06548s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 13
[t=1.06548s, 24812 KB] g=96, 1650 evaluated, 446 expanded
[t=1.06548s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 12
[t=1.06548s, 24812 KB] g=97, 1654 evaluated, 447 expanded
[t=1.06946s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 11
[t=1.06946s, 24812 KB] g=98, 1664 evaluated, 448 expanded
[t=1.06946s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 10
[t=1.06946s, 24812 KB] g=99, 1680 evaluated, 449 expanded
[t=1.07346s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 9
[t=1.07346s, 24812 KB] g=100, 1687 evaluated, 450 expanded
[t=1.07346s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 8
[t=1.07346s, 24812 KB] g=101, 1691 evaluated, 451 expanded
[t=1.07346s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 7
[t=1.07346s, 24812 KB] g=102, 1699 evaluated, 452 expanded
[t=1.07746s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 6
[t=1.07746s, 24812 KB] g=103, 1712 evaluated, 453 expanded
[t=1.07746s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 5
[t=1.07746s, 24812 KB] g=104, 1720 evaluated, 454 expanded
[t=1.08145s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 4
[t=1.08145s, 24812 KB] g=105, 1728 evaluated, 455 expanded
[t=1.08145s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 3
[t=1.08145s, 24812 KB] g=106, 1735 evaluated, 456 expanded
[t=1.08145s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 2
[t=1.08145s, 24812 KB] g=107, 1739 evaluated, 457 expanded
[t=1.08145s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 1
[t=1.08145s, 24812 KB] g=108, 1742 evaluated, 458 expanded
[t=1.08145s, 24812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 0
[t=1.08145s, 24812 KB] g=109, 1746 evaluated, 459 expanded
[t=1.08145s, 24812 KB] Solution found!
[t=1.08145s, 24812 KB] Actual search time: 0.947021s
move-col-to-col h3 c8 c4 (1)
move-col-to-col d4 h6 s5 (1)
move-col-to-col h7 ca c8 (1)
col-to-home ca c3 c n1 c0 n0 (1)
move-col-to-col c3 d2 d4 (1)
move-col-to-col s5 c7 h6 (1)
move-col-to-col-b d2 c3 coln0 coln1 (1)
turn-deck sk ck (1)
turn-deck ck sq (1)
turn-deck sq c2 (1)
tal-to-home c2 s8 sq ca c n2 n1 (1)
turn-deck sq s8 (1)
turn-deck s8 dk (1)
turn-deck dk da (1)
tal-to-home da h2 dk d0 d n1 n0 (1)
col-to-home d2 c3 d n2 da n1 (1)
col-to-home d3 s3 d n3 d2 n2 (1)
col-to-home c3 d4 c n3 c2 n2 (1)
move-col-to-col s3 d8 d4 (1)
tal-to-col-e dk s8 h2 coln1 coln0 (1)
turn-deck s8 h2 (1)
tal-to-col h2 s8 s3 h4 (1)
move-col-to-col d8 ha s9 (1)
col-to-home ha hj h n1 h0 n0 (1)
col-to-home h2 s3 h n2 ha n1 (1)
turn-deck s8 h4 (1)
col-to-home h3 c4 h n3 h2 n2 (1)
col-to-home-b c4 c3 c n4 n3 coln0 coln1 (1)
tal-to-home h4 d5 s8 h3 h n4 n3 (1)
move-col-to-col c7 dt d8 (1)
turn-deck s8 d5 (1)
turn-deck d5 dj (1)
turn-deck dj cj (1)
turn-deck cj sa (1)
tal-to-home sa cq cj s0 s n1 n0 (1)
turn-deck cj cq (1)
tal-to-col cq cj dk hk (1)
turn-deck cj hk (1)
move-col-to-col s9 ht dt (1)
tal-to-col-e hk cj st coln1 coln0 (1)
turn-deck cj st (1)
turn-deck st c5 (1)
tal-to-home c5 d7 st c4 c n5 n4 (1)
tal-to-col st cj hj d7 (1)
move-col-to-col hj hq cq (1)
tal-to-col cj dj hq d7 (1)
turn-deck dj d7 (1)
turn-deck d7 ct (1)
turn-deck ct h9 (1)
move-col-to-col dt s6 cj (1)
move-col-to-col s6 c9 h7 (1)
move-col-to-col-b c9 ht coln0 coln1 (1)
turn-deck h9 c6 (1)
tal-to-home c6 s4 h9 c5 c n6 n5 (1)
tal-to-col h9 ct st s4 (1)
turn-deck ct s4 (1)
move-col-to-col c8 h8 h9 (1)
move-col-to-col h8 s2 c9 (1)
col-to-home s2 sj s n2 sa n1 (1)
col-to-home s3 d4 s n3 s2 n2 (1)
col-to-home d4 s5 d n4 d3 n3 (1)
tal-to-home-c s4 ct s3 s n4 n3 (1)
col-to-home s5 h6 s n5 s4 n4 (1)
col-to-home s6 h7 s n6 s5 n5 (1)
turn-deck-a ct s7 (1)
tal-to-home-b s7 dq s6 s n7 n6 (1)
col-to-home c7 d8 c n7 c6 n6 (1)
turn-deck dq sk (1)
tal-to-col-e sk dq ck coln1 coln0 (1)
move-col-to-col-b ht sj coln0 coln1 (1)
turn-deck dq ck (1)
tal-to-col-e ck dq sq coln1 coln0 (1)
move-col-to-col hq h5 sk (1)
col-to-home-b h5 h4 h n5 n4 coln0 coln1 (1)
tal-to-col-b dq ck sq (1)
tal-to-col-b sq hk s8 (1)
move-col-to-col sj d6 dq (1)
tal-to-home-b s8 d5 s7 s n8 n7 (1)
col-to-home h6 d9 h n6 h5 n5 (1)
tal-to-home-b d5 dj d4 d n5 n4 (1)
col-to-home h7 c8 h n7 h6 n6 (1)
tal-to-col-b dj sq d7 (1)
col-to-home-b d6 d5 d n6 n5 coln1 coln2 (1)
col-to-home h8 c9 h n8 h7 n7 (1)
tal-to-home-b d7 ct d6 d n7 n6 (1)
tal-to-col-d ct dj (1)
move-col-to-col-b d9 ct coln2 coln3 (1)
col-to-home c8 h9 c n8 c7 n7 (1)
col-to-home d8 s9 d n8 d7 n7 (1)
col-to-home c9 ht c n9 c8 n8 (1)
col-to-home s9 dt s n9 s8 n8 (1)
col-to-home h9 st h n9 h8 n8 (1)
col-to-home d9 ct d n9 d8 n8 (1)
col-to-home dt cj d n10 d9 n9 (1)
col-to-home st hj s n10 s9 n9 (1)
col-to-home ct dj c n10 c9 n9 (1)
col-to-home ht sj h n10 h9 n9 (1)
col-to-home sj dq s n11 st n10 (1)
col-to-home cj hq c n11 ct n10 (1)
col-to-home dj sq d n11 dt n10 (1)
col-to-home hj cq h n11 ht n10 (1)
col-to-home hq sk h n12 hj n11 (1)
col-to-home dq ck d n12 dj n11 (1)
col-to-home sq hk s n12 sj n11 (1)
col-to-home-b hk hq h n13 n12 coln3 coln4 (1)
col-to-home-b sk sq s n13 n12 coln4 coln5 (1)
col-to-home cq dk c n12 cj n11 (1)
col-to-home-b dk dq d n13 n12 coln5 coln6 (1)
col-to-home-b ck cq c n13 n12 coln6 coln7 (1)
[t=1.08145s, 24812 KB] Plan length: 109 step(s).
[t=1.08145s, 24812 KB] Plan cost: 109
[t=1.08145s, 24812 KB] Expanded 460 state(s).
[t=1.08145s, 24812 KB] Reopened 0 state(s).
[t=1.08145s, 24812 KB] Evaluated 1748 state(s).
[t=1.08145s, 24812 KB] Evaluations: 1748
[t=1.08145s, 24812 KB] Generated 2643 state(s).
[t=1.08145s, 24812 KB] Dead ends: 10 state(s).
[t=1.08145s, 24812 KB] Number of registered states: 1748
[t=1.08145s, 24812 KB] Int hash set load factor: 1748/2048 = 0.853516
[t=1.08145s, 24812 KB] Int hash set resizes: 11
[t=1.08145s, 24812 KB] Search time: 0.947021s
[t=1.08145s, 24812 KB] Total time: 1.08145s
Solution found.
Peak memory: 24812 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Running validate.
INFO     validate stdin: None
INFO     validate time limit: None
INFO     validate memory limit: None
INFO     validate command line string: /home/henry/bin/validate domain.pddl problem.pddl sas_plan
Checking plan: sas_plan
Plan executed successfully - checking goal
Plan valid
Final value: 109 

Successful plans:
Value: 109
 sas_plan 109 

validate exit code: 0

INFO     Planner time: 3.17s
