INFO     planner time limit: 1800s
INFO     planner memory limit: 2048 MB

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: 1799s
INFO     translator memory limit: 2048 MB
INFO     translator command line string: /home/henry/Documents/UFRGS/TCC/downward/.venv/bin/python /home/henry/Documents/UFRGS/TCC/downward/experiments/lab/data/main/code-5bb2ccb6957559b6969ffd7e29254c73f84d5e49_e5e41175/builds/release/bin/translate/translate.py domain.pddl problem.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.002s wall-clock]
Preparing model... [0.000s CPU, 0.001s wall-clock]
Generated 51 rules.
Computing model... [0.130s CPU, 0.128s wall-clock]
18873 relevant atoms
6856 auxiliary atoms
25729 final queue length
64385 total queue pushes
Completing instantiation... [0.480s CPU, 0.480s wall-clock]
Instantiating: [0.620s CPU, 0.614s wall-clock]
Computing fact groups...
Finding invariants...
5 initial candidates
Finding invariants: [0.010s CPU, 0.013s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
16 uncovered facts
Choosing groups: [0.000s CPU, 0.001s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.015s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.020s CPU, 0.020s wall-clock]
Translating task: [0.460s CPU, 0.449s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
16 propositions removed
Detecting unreachable propositions: [0.240s CPU, 0.245s wall-clock]
Reordering and filtering variables...
32 of 32 variables necessary.
16 of 32 mutex groups necessary.
17280 of 17280 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.050s CPU, 0.045s wall-clock]
Translator variables: 32
Translator derived variables: 0
Translator facts: 288
Translator goal facts: 32
Translator mutex groups: 16
Translator total mutex groups size: 256
Translator operators: 17280
Translator axioms: 0
Translator task size: 88928
Translator peak memory: 97328 KB
Writing output... [0.060s CPU, 0.064s wall-clock]
Done! [1.460s CPU, 1.461s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: 1798s
INFO     search memory limit: 2048 MB
INFO     search command line string: /home/henry/Documents/UFRGS/TCC/downward/experiments/lab/data/main/code-5bb2ccb6957559b6969ffd7e29254c73f84d5e49_e5e41175/builds/release/bin/downward --search 'eager_greedy([lsh(patterns=systematic(2), transform=adapt_costs(cost_type=NORMAL))])' --internal-plan-file sas_plan < output.sas
[t=0s, 10544 KB] reading input...
[t=0.050896s, 15600 KB] done reading input!
[t=0.050896s, 15996 KB] Generating patterns using: systematic pattern collection generator
[t=0.050896s, 15996 KB] building causal graph...done! [t=0.00400537s]
[t=0.0549014s, 15996 KB] Found 408 SGA patterns.
[t=0.0549014s, 15996 KB] Found 408 interesting patterns.
[t=0.0549014s, 15996 KB] systematic pattern collection generator number of patterns: 408
[t=0.0549014s, 15996 KB] systematic pattern collection generator total PDB size: 39200
[t=0.0549014s, 15996 KB] systematic pattern collection generator computation time: 0.00400537s
[t=0.0549014s, 15996 KB] Computing PDBs for pattern collection...
[t=0.966228s, 16792 KB] Done computing PDBs for pattern collection: 0.911327s
[t=1.08612s, 30568 KB] Building successor generator...done!
[t=1.09012s, 32276 KB] peak memory difference for successor generator creation: 1708 KB
[t=1.09012s, 32276 KB] time for successor generation creation: 0.00400526s
[t=1.09012s, 32276 KB] Variables: 32
[t=1.09012s, 32276 KB] FactPairs: 288
[t=1.09012s, 32276 KB] Bytes per state: 12
[t=1.09012s, 32276 KB] Conducting best first search without reopening closed nodes, (real) bound = 2147483647
[t=1.09012s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=normal)): 90
[t=1.09012s, 32276 KB] g=0, 1 evaluated, 0 expanded
[t=1.09012s, 32276 KB] Initial heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=normal)): 90
[t=1.09012s, 32276 KB] pruning method: none
[t=1.09012s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=normal)): 87
[t=1.09012s, 32276 KB] g=3, 11 evaluated, 1 expanded
[t=1.09012s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=normal)): 84
[t=1.09012s, 32276 KB] g=6, 83 evaluated, 2 expanded
[t=1.09012s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=normal)): 81
[t=1.09012s, 32276 KB] g=6, 95 evaluated, 2 expanded
[t=1.0941s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=normal)): 78
[t=1.0941s, 32276 KB] g=9, 163 evaluated, 3 expanded
[t=1.0941s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=normal)): 75
[t=1.0941s, 32276 KB] g=12, 234 evaluated, 4 expanded
[t=1.0941s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=normal)): 72
[t=1.0941s, 32276 KB] g=15, 304 evaluated, 5 expanded
[t=1.0981s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=normal)): 69
[t=1.0981s, 32276 KB] g=16, 373 evaluated, 6 expanded
[t=1.0981s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=normal)): 66
[t=1.0981s, 32276 KB] g=19, 441 evaluated, 7 expanded
[t=1.10211s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=normal)): 63
[t=1.10211s, 32276 KB] g=20, 510 evaluated, 8 expanded
[t=1.10211s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=normal)): 60
[t=1.10211s, 32276 KB] g=23, 576 evaluated, 9 expanded
[t=1.10211s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=normal)): 57
[t=1.10211s, 32276 KB] g=24, 645 evaluated, 10 expanded
[t=1.10211s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=normal)): 54
[t=1.10211s, 32276 KB] g=27, 709 evaluated, 11 expanded
[t=1.1061s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=normal)): 51
[t=1.1061s, 32276 KB] g=28, 778 evaluated, 12 expanded
[t=1.1061s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=normal)): 48
[t=1.1061s, 32276 KB] g=31, 840 evaluated, 13 expanded
[t=1.1061s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=normal)): 45
[t=1.1061s, 32276 KB] g=32, 909 evaluated, 14 expanded
[t=1.14208s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=normal)): 42
[t=1.14208s, 32276 KB] g=35, 3879 evaluated, 79 expanded
[t=1.14608s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=normal)): 39
[t=1.14608s, 32276 KB] g=36, 3994 evaluated, 81 expanded
[t=1.17804s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=normal)): 36
[t=1.17804s, 32276 KB] g=41, 6737 evaluated, 137 expanded
[t=1.17804s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=normal)): 33
[t=1.17804s, 32276 KB] g=42, 6853 evaluated, 139 expanded
[t=1.20603s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=normal)): 30
[t=1.20603s, 32276 KB] g=47, 9300 evaluated, 186 expanded
[t=1.20603s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=normal)): 27
[t=1.20603s, 32276 KB] g=48, 9417 evaluated, 188 expanded
[t=1.23001s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=normal)): 24
[t=1.23001s, 32276 KB] g=53, 11512 evaluated, 226 expanded
[t=1.23001s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=normal)): 21
[t=1.23001s, 32276 KB] g=54, 11630 evaluated, 228 expanded
[t=1.24601s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=normal)): 18
[t=1.24601s, 32276 KB] g=59, 13317 evaluated, 257 expanded
[t=1.24601s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=normal)): 15
[t=1.24601s, 32276 KB] g=60, 13436 evaluated, 259 expanded
[t=1.26199s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=normal)): 12
[t=1.26199s, 32276 KB] g=65, 14659 evaluated, 279 expanded
[t=1.26599s, 32276 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=normal)): 9
[t=1.26599s, 32276 KB] g=66, 14779 evaluated, 281 expanded
[t=1.26998s, 32524 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=normal)): 6
[t=1.26998s, 32524 KB] g=71, 15482 evaluated, 292 expanded
[t=1.27397s, 32524 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=normal)): 0
[t=1.27397s, 32524 KB] g=78, 15857 evaluated, 298 expanded
[t=1.27797s, 32524 KB] Solution found!
[t=1.27797s, 32524 KB] Actual search time: 0.18785s
analyze-2 seg-in-2 seg-out-1 car-in-2 car-out-1 (3)
analyze-2 seg-in-2 seg-out-1 car-out-1 car-in-2 (3)
analyze-2 seg-in-3 seg-out-1 car-in-3 car-out-1 (3)
analyze-2 seg-in-4 seg-out-1 car-in-4 car-in-3 (3)
rotate-2 seg-in-4 seg-out-1 car-in-3 car-in-4 (1)
analyze-2 seg-in-5 seg-out-1 car-in-5 car-in-3 (3)
rotate-2 seg-in-5 seg-out-1 car-in-3 car-in-5 (1)
analyze-2 seg-in-6 seg-out-1 car-in-6 car-in-3 (3)
rotate-2 seg-in-6 seg-out-1 car-in-3 car-in-6 (1)
analyze-2 seg-in-7 seg-out-1 car-in-7 car-in-3 (3)
rotate-2 seg-in-7 seg-out-1 car-in-3 car-in-7 (1)
analyze-2 seg-in-8 seg-out-1 car-in-8 car-in-3 (3)
rotate-2 seg-in-8 seg-out-1 car-in-3 car-in-8 (1)
rotate-2 seg-in-3 seg-out-1 car-out-1 car-in-3 (1)
rotate-2 seg-in-1 seg-out-2 car-in-1 car-out-2 (1)
analyze-2 seg-in-1 seg-out-1 car-out-2 car-out-1 (3)
rotate-2 seg-in-1 seg-out-1 car-out-1 car-out-2 (1)
rotate-2 seg-in-1 seg-out-2 car-out-2 car-in-1 (1)
rotate-2 seg-in-1 seg-out-3 car-in-1 car-out-3 (1)
analyze-2 seg-in-1 seg-out-1 car-out-3 car-out-1 (3)
rotate-2 seg-in-1 seg-out-1 car-out-1 car-out-3 (1)
rotate-2 seg-in-1 seg-out-3 car-out-3 car-in-1 (1)
rotate-2 seg-in-1 seg-out-4 car-in-1 car-out-4 (1)
analyze-2 seg-in-1 seg-out-1 car-out-4 car-out-1 (3)
rotate-2 seg-in-1 seg-out-1 car-out-1 car-out-4 (1)
rotate-2 seg-in-1 seg-out-4 car-out-4 car-in-1 (1)
rotate-2 seg-in-1 seg-out-5 car-in-1 car-out-5 (1)
analyze-2 seg-in-1 seg-out-1 car-out-5 car-out-1 (3)
rotate-2 seg-in-1 seg-out-1 car-out-1 car-out-5 (1)
rotate-2 seg-in-1 seg-out-5 car-out-5 car-in-1 (1)
rotate-2 seg-in-1 seg-out-6 car-in-1 car-out-6 (1)
analyze-2 seg-in-1 seg-out-1 car-out-6 car-out-1 (3)
rotate-2 seg-in-1 seg-out-1 car-out-1 car-out-6 (1)
rotate-2 seg-in-1 seg-out-6 car-out-6 car-in-1 (1)
rotate-2 seg-in-1 seg-out-7 car-in-1 car-out-7 (1)
analyze-2 seg-in-1 seg-out-1 car-out-7 car-out-1 (3)
rotate-2 seg-in-1 seg-out-1 car-out-1 car-out-7 (1)
rotate-2 seg-in-1 seg-out-7 car-out-7 car-in-1 (1)
rotate-2 seg-in-1 seg-out-8 car-in-1 car-out-8 (1)
analyze-2 seg-in-1 seg-out-1 car-out-8 car-out-1 (3)
rotate-2 seg-in-1 seg-out-1 car-out-1 car-out-8 (1)
rotate-2 seg-in-1 seg-out-8 car-out-8 car-in-1 (1)
analyze-2 seg-in-1 seg-out-1 car-in-1 car-out-1 (3)
rotate-2 seg-in-1 seg-out-1 car-out-1 car-in-1 (1)
[t=1.27797s, 32524 KB] Plan length: 44 step(s).
[t=1.27797s, 32524 KB] Plan cost: 76
[t=1.27797s, 32524 KB] Expanded 299 state(s).
[t=1.27797s, 32524 KB] Reopened 0 state(s).
[t=1.27797s, 32524 KB] Evaluated 15912 state(s).
[t=1.27797s, 32524 KB] Evaluations: 15912
[t=1.27797s, 32524 KB] Generated 21456 state(s).
[t=1.27797s, 32524 KB] Dead ends: 0 state(s).
[t=1.27797s, 32524 KB] Number of registered states: 15912
[t=1.27797s, 32524 KB] Int hash set load factor: 15912/32768 = 0.485596
[t=1.27797s, 32524 KB] Int hash set resizes: 15
[t=1.27797s, 32524 KB] Search time: 0.18785s
[t=1.27797s, 32524 KB] Total time: 1.27797s
Solution found.
Peak memory: 32524 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Running validate.
INFO     validate stdin: None
INFO     validate time limit: None
INFO     validate memory limit: None
INFO     validate command line string: /home/henry/bin/validate domain.pddl problem.pddl sas_plan
Checking plan: sas_plan
Plan executed successfully - checking goal
Plan valid
Final value: 76 

Successful plans:
Value: 76
 sas_plan 76 

validate exit code: 0

INFO     Planner time: 2.80s
