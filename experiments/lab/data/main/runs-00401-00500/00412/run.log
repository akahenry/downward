INFO     planner time limit: 1800s
INFO     planner memory limit: 2048 MB

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: 1799s
INFO     translator memory limit: 2048 MB
INFO     translator command line string: /home/henry/Documents/UFRGS/TCC/downward/.venv/bin/python /home/henry/Documents/UFRGS/TCC/downward/experiments/lab/data/main/code-5bb2ccb6957559b6969ffd7e29254c73f84d5e49_e5e41175/builds/release/bin/translate/translate.py domain.pddl problem.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.002s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.001s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.003s wall-clock]
Preparing model... [0.010s CPU, 0.002s wall-clock]
Generated 115 rules.
Computing model... [0.020s CPU, 0.023s wall-clock]
2300 relevant atoms
2393 auxiliary atoms
4693 final queue length
8087 total queue pushes
Completing instantiation... [0.050s CPU, 0.049s wall-clock]
Instantiating: [0.080s CPU, 0.078s wall-clock]
Computing fact groups...
Finding invariants...
24 initial candidates
Finding invariants: [0.010s CPU, 0.007s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
238 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.001s wall-clock]
Computing fact groups: [0.010s CPU, 0.009s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.010s CPU, 0.002s wall-clock]
Translating task: [0.060s CPU, 0.054s wall-clock]
2672 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
3 propositions removed
Detecting unreachable propositions: [0.020s CPU, 0.024s wall-clock]
Reordering and filtering variables...
241 of 241 variables necessary.
12 of 15 mutex groups necessary.
1596 of 1596 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.020s CPU, 0.015s wall-clock]
Translator variables: 241
Translator derived variables: 0
Translator facts: 505
Translator goal facts: 10
Translator mutex groups: 12
Translator total mutex groups size: 36
Translator operators: 1596
Translator axioms: 0
Translator task size: 15302
Translator peak memory: 41584 KB
Writing output... [0.010s CPU, 0.012s wall-clock]
Done! [0.200s CPU, 0.198s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: 1799s
INFO     search memory limit: 2048 MB
INFO     search command line string: /home/henry/Documents/UFRGS/TCC/downward/experiments/lab/data/main/code-5bb2ccb6957559b6969ffd7e29254c73f84d5e49_e5e41175/builds/release/bin/downward --search 'eager_greedy([lsh(patterns=systematic(4), transform=adapt_costs(cost_type=NORMAL))])' --internal-plan-file sas_plan < output.sas
[t=0s, 10544 KB] reading input...
[t=0.00800436s, 11224 KB] done reading input!
[t=0.00800436s, 11488 KB] Generating patterns using: systematic pattern collection generator
[t=0.00800436s, 11488 KB] building causal graph...done! [t=0.00398955s]
[t=0.051979s, 26872 KB] Found 61222 SGA patterns.
[t=0.523833s, 30476 KB] Found 67642 interesting patterns.
[t=0.551811s, 30476 KB] systematic pattern collection generator number of patterns: 67642
[t=0.551811s, 30476 KB] systematic pattern collection generator total PDB size: 2366940
[t=0.555799s, 30476 KB] systematic pattern collection generator computation time: 0.543807s
[t=0.555799s, 30476 KB] Computing PDBs for pattern collection...
[t=27.6199s, 45608 KB] Done computing PDBs for pattern collection: 27.0641s
[t=30.5703s, 513424 KB] Building successor generator...done!
[t=30.5703s, 513424 KB] peak memory difference for successor generator creation: 0 KB
[t=30.5703s, 513424 KB] time for successor generation creation: 0s
[t=30.5703s, 513424 KB] Variables: 241
[t=30.5703s, 513424 KB] FactPairs: 505
[t=30.5703s, 513424 KB] Bytes per state: 32
[t=30.5703s, 513424 KB] Conducting best first search without reopening closed nodes, (real) bound = 2147483647
[t=30.5743s, 513424 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 41
[t=30.5743s, 513424 KB] g=0, 1 evaluated, 0 expanded
[t=30.5743s, 513424 KB] Initial heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 41
[t=30.5743s, 513424 KB] pruning method: none
[t=30.5823s, 513424 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 40
[t=30.5823s, 513424 KB] g=1, 2 evaluated, 1 expanded
[t=30.5902s, 513424 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 39
[t=30.5902s, 513424 KB] g=1, 4 evaluated, 1 expanded
[t=31.8051s, 513424 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 38
[t=31.8051s, 513424 KB] g=12, 246 evaluated, 25 expanded
[t=31.897s, 513424 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 32
[t=31.897s, 513424 KB] g=14, 264 evaluated, 27 expanded
[t=35.9406s, 513424 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 26
[t=35.9406s, 513424 KB] g=40, 1092 evaluated, 114 expanded
[t=154.769s, 513424 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 24
[t=154.769s, 513424 KB] g=71, 26119 evaluated, 2487 expanded
[t=245.118s, 513424 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 21
[t=245.118s, 513424 KB] g=102, 45776 evaluated, 4365 expanded
[t=335.911s, 513424 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 19
[t=335.911s, 513424 KB] g=133, 66308 evaluated, 6461 expanded
[t=392.967s, 513424 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 18
[t=392.967s, 513424 KB] g=153, 79305 evaluated, 7791 expanded
[t=402.992s, 513424 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 16
[t=402.992s, 513424 KB] g=164, 81765 evaluated, 8042 expanded
[t=451.057s, 513424 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 15
[t=451.057s, 513424 KB] g=182, 93132 evaluated, 9446 expanded
[t=451.46s, 513424 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 14
[t=451.46s, 513424 KB] g=184, 93229 evaluated, 9454 expanded
[t=461.895s, 513424 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 11
[t=461.895s, 513424 KB] g=195, 95712 evaluated, 9720 expanded
[t=554.687s, 513932 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 10
[t=554.687s, 513932 KB] g=226, 117126 evaluated, 12575 expanded
[t=554.947s, 513932 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 9
[t=554.947s, 513932 KB] g=229, 117188 evaluated, 12579 expanded
[t=554.963s, 513932 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 8
[t=554.963s, 513932 KB] g=230, 117191 evaluated, 12580 expanded
[t=590.738s, 513932 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 7
[t=590.738s, 513932 KB] g=245, 125579 evaluated, 14465 expanded
[t=599.962s, 513932 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 5
[t=599.962s, 513932 KB] g=259, 127674 evaluated, 14706 expanded
[t=600.026s, 513932 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 4
[t=600.026s, 513932 KB] g=260, 127689 evaluated, 14707 expanded
[t=729.432s, 514204 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 3
[t=729.432s, 514204 KB] g=278, 157885 evaluated, 23847 expanded
[t=737.26s, 514340 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 2
[t=737.26s, 514340 KB] g=290, 159776 evaluated, 24136 expanded
[t=737.296s, 514340 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 1
[t=737.296s, 514340 KB] g=291, 159785 evaluated, 24137 expanded
[t=737.356s, 514340 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 0
[t=737.36s, 514340 KB] g=292, 159800 evaluated, 24138 expanded
[t=737.372s, 514340 KB] Solution found!
[t=737.372s, 514340 KB] Actual search time: 706.798s
grasp left shot11 (1)
fill-shot shot11 ingredient1 left right dispenser1 (10)
pour-shot-to-clean-shaker shot11 ingredient1 shaker1 left l0 l1 (1)
leave left shot11 (1)
grasp left shot10 (1)
fill-shot shot10 ingredient1 left right dispenser1 (10)
leave left shot10 (1)
grasp left shot11 (1)
clean-shot shot11 ingredient1 left right (1)
fill-shot shot11 ingredient2 left right dispenser2 (10)
pour-shot-to-used-shaker shot11 ingredient2 shaker1 left l1 l2 (1)
leave left shot11 (1)
grasp left shaker1 (1)
shake cocktail3 ingredient2 ingredient1 shaker1 left right (1)
pour-shaker-to-shot cocktail3 shot8 left shaker1 l2 l1 (1)
empty-shaker left shaker1 cocktail3 l1 l0 (1)
clean-shaker left right shaker1 (1)
grasp right shot11 (1)
leave left shaker1 (1)
refill-shot shot11 ingredient2 right left dispenser2 (10)
pour-shot-to-clean-shaker shot11 ingredient2 shaker1 right l0 l1 (1)
clean-shot shot11 ingredient2 right left (1)
fill-shot shot11 ingredient1 right left dispenser1 (10)
pour-shot-to-used-shaker shot11 ingredient1 shaker1 right l1 l2 (1)
grasp left shaker1 (1)
leave right shot11 (1)
shake cocktail7 ingredient2 ingredient1 shaker1 left right (1)
pour-shaker-to-shot cocktail7 shot4 left shaker1 l2 l1 (1)
empty-shaker left shaker1 cocktail7 l1 l0 (1)
clean-shaker left right shaker1 (1)
grasp right shot11 (1)
leave left shaker1 (1)
refill-shot shot11 ingredient1 right left dispenser1 (10)
pour-shot-to-clean-shaker shot11 ingredient1 shaker1 right l0 l1 (1)
clean-shot shot11 ingredient1 right left (1)
fill-shot shot11 ingredient3 right left dispenser3 (10)
pour-shot-to-used-shaker shot11 ingredient3 shaker1 right l1 l2 (1)
grasp left shaker1 (1)
leave right shot11 (1)
shake cocktail2 ingredient1 ingredient3 shaker1 left right (1)
pour-shaker-to-shot cocktail2 shot6 left shaker1 l2 l1 (1)
empty-shaker left shaker1 cocktail2 l1 l0 (1)
clean-shaker left right shaker1 (1)
grasp right shot11 (1)
leave left shaker1 (1)
refill-shot shot11 ingredient3 right left dispenser3 (10)
pour-shot-to-clean-shaker shot11 ingredient3 shaker1 right l0 l1 (1)
clean-shot shot11 ingredient3 right left (1)
fill-shot shot11 ingredient1 right left dispenser1 (10)
pour-shot-to-used-shaker shot11 ingredient1 shaker1 right l1 l2 (1)
grasp left shaker1 (1)
leave right shot11 (1)
shake cocktail5 ingredient3 ingredient1 shaker1 left right (1)
pour-shaker-to-shot cocktail5 shot2 left shaker1 l2 l1 (1)
empty-shaker left shaker1 cocktail5 l1 l0 (1)
clean-shaker left right shaker1 (1)
grasp right shot11 (1)
leave left shaker1 (1)
refill-shot shot11 ingredient1 right left dispenser1 (10)
pour-shot-to-clean-shaker shot11 ingredient1 shaker1 right l0 l1 (1)
clean-shot shot11 ingredient1 right left (1)
fill-shot shot11 ingredient4 right left dispenser4 (10)
pour-shot-to-used-shaker shot11 ingredient4 shaker1 right l1 l2 (1)
grasp left shaker1 (1)
leave right shot11 (1)
shake cocktail9 ingredient4 ingredient1 shaker1 left right (1)
pour-shaker-to-shot cocktail9 shot7 left shaker1 l2 l1 (1)
empty-shaker left shaker1 cocktail9 l1 l0 (1)
clean-shaker left right shaker1 (1)
grasp right shot11 (1)
leave left shaker1 (1)
refill-shot shot11 ingredient4 right left dispenser4 (10)
pour-shot-to-clean-shaker shot11 ingredient4 shaker1 right l0 l1 (1)
clean-shot shot11 ingredient4 right left (1)
fill-shot shot11 ingredient2 right left dispenser2 (10)
pour-shot-to-used-shaker shot11 ingredient2 shaker1 right l1 l2 (1)
grasp left shaker1 (1)
leave right shot11 (1)
shake cocktail4 ingredient4 ingredient2 shaker1 left right (1)
pour-shaker-to-shot cocktail4 shot3 left shaker1 l2 l1 (1)
empty-shaker left shaker1 cocktail4 l1 l0 (1)
clean-shaker left right shaker1 (1)
grasp right shot11 (1)
leave left shaker1 (1)
refill-shot shot11 ingredient2 right left dispenser2 (10)
pour-shot-to-clean-shaker shot11 ingredient2 shaker1 right l0 l1 (1)
clean-shot shot11 ingredient2 right left (1)
fill-shot shot11 ingredient3 right left dispenser3 (10)
pour-shot-to-used-shaker shot11 ingredient3 shaker1 right l1 l2 (1)
leave right shot11 (1)
grasp left shaker1 (1)
shake cocktail8 ingredient2 ingredient3 shaker1 left right (1)
pour-shaker-to-shot cocktail8 shot1 left shaker1 l2 l1 (1)
empty-shaker left shaker1 cocktail8 l1 l0 (1)
clean-shaker left right shaker1 (1)
grasp right shot11 (1)
leave left shaker1 (1)
clean-shot shot11 ingredient3 right left (1)
fill-shot shot11 ingredient2 right left dispenser2 (10)
pour-shot-to-clean-shaker shot11 ingredient2 shaker1 right l0 l1 (1)
clean-shot shot11 ingredient2 right left (1)
fill-shot shot11 ingredient4 right left dispenser4 (10)
pour-shot-to-used-shaker shot11 ingredient4 shaker1 right l1 l2 (1)
grasp left shaker1 (1)
leave right shot11 (1)
shake cocktail6 ingredient4 ingredient2 shaker1 left right (1)
pour-shaker-to-shot cocktail6 shot9 left shaker1 l2 l1 (1)
empty-shaker left shaker1 cocktail6 l1 l0 (1)
clean-shaker left right shaker1 (1)
grasp right shot11 (1)
leave left shaker1 (1)
clean-shot shot11 ingredient4 right left (1)
fill-shot shot11 ingredient1 right left dispenser1 (10)
pour-shot-to-clean-shaker shot11 ingredient1 shaker1 right l0 l1 (1)
clean-shot shot11 ingredient1 right left (1)
fill-shot shot11 ingredient3 right left dispenser3 (10)
grasp left shaker1 (1)
pour-shot-to-used-shaker shot11 ingredient3 shaker1 right l1 l2 (1)
leave right shot11 (1)
shake cocktail1 ingredient1 ingredient3 shaker1 left right (1)
pour-shaker-to-shot cocktail1 shot5 left shaker1 l2 l1 (1)
[t=737.372s, 514340 KB] Plan length: 121 step(s).
[t=737.372s, 514340 KB] Plan cost: 292
[t=737.372s, 514340 KB] Expanded 24139 state(s).
[t=737.372s, 514340 KB] Reopened 0 state(s).
[t=737.372s, 514340 KB] Evaluated 159803 state(s).
[t=737.372s, 514340 KB] Evaluations: 159803
[t=737.372s, 514340 KB] Generated 232850 state(s).
[t=737.372s, 514340 KB] Dead ends: 0 state(s).
[t=737.372s, 514340 KB] Number of registered states: 159803
[t=737.372s, 514340 KB] Int hash set load factor: 159803/262144 = 0.6096
[t=737.372s, 514340 KB] Int hash set resizes: 18
[t=737.372s, 514340 KB] Search time: 706.802s
[t=737.372s, 514340 KB] Total time: 737.372s
Solution found.
Peak memory: 514340 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Running validate.
INFO     validate stdin: None
INFO     validate time limit: None
INFO     validate memory limit: None
INFO     validate command line string: /home/henry/bin/validate domain.pddl problem.pddl sas_plan
Checking plan: sas_plan
Plan executed successfully - checking goal
Plan valid
Final value: 292 

Successful plans:
Value: 292
 sas_plan 292 

validate exit code: 0

INFO     Planner time: 737.68s
