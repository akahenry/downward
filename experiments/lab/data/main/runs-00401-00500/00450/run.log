INFO     planner time limit: 1800s
INFO     planner memory limit: 2048 MB

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: 1799s
INFO     translator memory limit: 2048 MB
INFO     translator command line string: /home/henry/Documents/UFRGS/TCC/downward/.venv/bin/python /home/henry/Documents/UFRGS/TCC/downward/experiments/lab/data/main/code-5bb2ccb6957559b6969ffd7e29254c73f84d5e49_e5e41175/builds/release/bin/translate/translate.py domain.pddl problem.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.002s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.001s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.003s wall-clock]
Preparing model... [0.000s CPU, 0.002s wall-clock]
Generated 115 rules.
Computing model... [0.030s CPU, 0.024s wall-clock]
2300 relevant atoms
2393 auxiliary atoms
4693 final queue length
8087 total queue pushes
Completing instantiation... [0.050s CPU, 0.049s wall-clock]
Instantiating: [0.080s CPU, 0.078s wall-clock]
Computing fact groups...
Finding invariants...
24 initial candidates
Finding invariants: [0.010s CPU, 0.012s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
238 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.014s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.002s wall-clock]
Translating task: [0.060s CPU, 0.054s wall-clock]
2672 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
3 propositions removed
Detecting unreachable propositions: [0.030s CPU, 0.029s wall-clock]
Reordering and filtering variables...
241 of 241 variables necessary.
12 of 15 mutex groups necessary.
1596 of 1596 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.010s CPU, 0.015s wall-clock]
Translator variables: 241
Translator derived variables: 0
Translator facts: 505
Translator goal facts: 10
Translator mutex groups: 12
Translator total mutex groups size: 36
Translator operators: 1596
Translator axioms: 0
Translator task size: 15302
Translator peak memory: 41328 KB
Writing output... [0.010s CPU, 0.010s wall-clock]
Done! [0.200s CPU, 0.206s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: 1799s
INFO     search memory limit: 2048 MB
INFO     search command line string: /home/henry/Documents/UFRGS/TCC/downward/experiments/lab/data/main/code-5bb2ccb6957559b6969ffd7e29254c73f84d5e49_e5e41175/builds/release/bin/downward --search 'eager_greedy([lsh(patterns=systematic(4), transform=adapt_costs(cost_type=NORMAL))])' --internal-plan-file sas_plan < output.sas
[t=0s, 10544 KB] reading input...
[t=0.00610177s, 11224 KB] done reading input!
[t=0.0101057s, 11488 KB] Generating patterns using: systematic pattern collection generator
[t=0.0101057s, 11488 KB] building causal graph...done! [t=0s]
[t=0.0420876s, 25612 KB] Found 56101 SGA patterns.
[t=0.489904s, 26540 KB] Found 63243 interesting patterns.
[t=0.50588s, 26540 KB] systematic pattern collection generator number of patterns: 63243
[t=0.50588s, 26540 KB] systematic pattern collection generator total PDB size: 2259344
[t=0.50988s, 26540 KB] systematic pattern collection generator computation time: 0.495774s
[t=0.50988s, 26540 KB] Computing PDBs for pattern collection...
[t=25.8569s, 41152 KB] Done computing PDBs for pattern collection: 25.347s
[t=28.5233s, 503848 KB] Building successor generator...done!
[t=28.5233s, 503848 KB] peak memory difference for successor generator creation: 0 KB
[t=28.5233s, 503848 KB] time for successor generation creation: 0s
[t=28.5233s, 503848 KB] Variables: 241
[t=28.5233s, 503848 KB] FactPairs: 505
[t=28.5233s, 503848 KB] Bytes per state: 32
[t=28.5233s, 503848 KB] Conducting best first search without reopening closed nodes, (real) bound = 2147483647
[t=28.5273s, 503848 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 39
[t=28.5273s, 503848 KB] g=0, 1 evaluated, 0 expanded
[t=28.5273s, 503848 KB] Initial heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 39
[t=28.5273s, 503848 KB] pruning method: none
[t=28.5313s, 503848 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 38
[t=28.5313s, 503848 KB] g=1, 2 evaluated, 1 expanded
[t=30.9923s, 503848 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 36
[t=30.9923s, 503848 KB] g=14, 573 evaluated, 82 expanded
[t=31.3479s, 503848 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 34
[t=31.3479s, 503848 KB] g=14, 654 evaluated, 90 expanded
[t=31.7075s, 503848 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 33
[t=31.7075s, 503848 KB] g=14, 735 evaluated, 98 expanded
[t=41.4083s, 503848 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 32
[t=41.4083s, 503848 KB] g=26, 2965 evaluated, 514 expanded
[t=62.0414s, 503848 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 31
[t=62.0414s, 503848 KB] g=45, 7764 evaluated, 994 expanded
[t=62.8045s, 503848 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 29
[t=62.8045s, 503848 KB] g=46, 7941 evaluated, 1020 expanded
[t=72.0753s, 503848 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 24
[t=72.0753s, 503848 KB] g=57, 9996 evaluated, 1364 expanded
[t=94.5048s, 503848 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 21
[t=94.5048s, 503848 KB] g=89, 14923 evaluated, 1876 expanded
[t=129.339s, 503848 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 20
[t=129.339s, 503848 KB] g=109, 22805 evaluated, 2778 expanded
[t=135.332s, 503848 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 19
[t=135.332s, 503848 KB] g=120, 24105 evaluated, 2907 expanded
[t=353.186s, 503848 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 17
[t=353.186s, 503848 KB] g=139, 76771 evaluated, 9040 expanded
[t=359.149s, 503848 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 16
[t=359.149s, 503848 KB] g=151, 78193 evaluated, 9177 expanded
[t=380.382s, 503848 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 14
[t=380.382s, 503848 KB] g=171, 83301 evaluated, 9852 expanded
[t=388.044s, 503848 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 12
[t=388.044s, 503848 KB] g=183, 85151 evaluated, 10036 expanded
[t=512.165s, 505896 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 11
[t=512.165s, 505896 KB] g=183, 115809 evaluated, 14753 expanded
[t=563.517s, 505896 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 10
[t=563.517s, 505896 KB] g=213, 127622 evaluated, 16438 expanded
[t=563.521s, 505896 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 9
[t=563.521s, 505896 KB] g=214, 127623 evaluated, 16439 expanded
[t=563.785s, 505896 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 8
[t=563.785s, 505896 KB] g=216, 127684 evaluated, 16442 expanded
[t=576.19s, 505896 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 7
[t=576.19s, 505896 KB] g=233, 130552 evaluated, 16909 expanded
[t=583.958s, 505896 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 6
[t=583.958s, 505896 KB] g=245, 132425 evaluated, 17200 expanded
[t=584.202s, 505896 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 4
[t=584.202s, 505896 KB] g=247, 132484 evaluated, 17203 expanded
[t=651.62s, 505896 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 3
[t=651.62s, 505896 KB] g=277, 148983 evaluated, 21750 expanded
[t=651.664s, 505896 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 1
[t=651.664s, 505896 KB] g=278, 148994 evaluated, 21751 expanded
[t=651.716s, 505896 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 0
[t=651.716s, 505896 KB] g=279, 149007 evaluated, 21752 expanded
[t=651.728s, 505896 KB] Solution found!
[t=651.728s, 505896 KB] Actual search time: 623.201s
grasp left shot11 (1)
fill-shot shot11 ingredient1 left right dispenser1 (10)
pour-shot-to-clean-shaker shot11 ingredient1 shaker1 left l0 l1 (1)
clean-shot shot11 ingredient1 left right (1)
fill-shot shot11 ingredient2 left right dispenser2 (10)
grasp right shaker1 (1)
pour-shot-to-used-shaker shot11 ingredient2 shaker1 left l1 l2 (1)
leave left shot11 (1)
shake cocktail4 ingredient1 ingredient2 shaker1 right left (1)
pour-shaker-to-shot cocktail4 shot5 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail4 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot11 (1)
leave right shaker1 (1)
refill-shot shot11 ingredient2 left right dispenser2 (10)
pour-shot-to-clean-shaker shot11 ingredient2 shaker1 left l0 l1 (1)
clean-shot shot11 ingredient2 left right (1)
fill-shot shot11 ingredient3 left right dispenser3 (10)
grasp right shaker1 (1)
pour-shot-to-used-shaker shot11 ingredient3 shaker1 left l1 l2 (1)
leave left shot11 (1)
shake cocktail5 ingredient2 ingredient3 shaker1 right left (1)
pour-shaker-to-shot cocktail5 shot10 right shaker1 l2 l1 (1)
pour-shaker-to-shot cocktail5 shot6 right shaker1 l1 l0 (1)
empty-shaker right shaker1 cocktail5 l0 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot11 (1)
leave right shaker1 (1)
refill-shot shot11 ingredient3 left right dispenser3 (10)
pour-shot-to-clean-shaker shot11 ingredient3 shaker1 left l0 l1 (1)
clean-shot shot11 ingredient3 left right (1)
fill-shot shot11 ingredient2 left right dispenser2 (10)
pour-shot-to-used-shaker shot11 ingredient2 shaker1 left l1 l2 (1)
leave left shot11 (1)
grasp left shaker1 (1)
shake cocktail7 ingredient2 ingredient3 shaker1 left right (1)
pour-shaker-to-shot cocktail7 shot2 left shaker1 l2 l1 (1)
empty-shaker left shaker1 cocktail7 l1 l0 (1)
clean-shaker left right shaker1 (1)
grasp right shot11 (1)
leave left shaker1 (1)
refill-shot shot11 ingredient2 right left dispenser2 (10)
pour-shot-to-clean-shaker shot11 ingredient2 shaker1 right l0 l1 (1)
clean-shot shot11 ingredient2 right left (1)
fill-shot shot11 ingredient4 right left dispenser4 (10)
pour-shot-to-used-shaker shot11 ingredient4 shaker1 right l1 l2 (1)
leave right shot11 (1)
grasp left shaker1 (1)
shake cocktail6 ingredient4 ingredient2 shaker1 left right (1)
pour-shaker-to-shot cocktail6 shot4 left shaker1 l2 l1 (1)
empty-shaker left shaker1 cocktail6 l1 l0 (1)
clean-shaker left right shaker1 (1)
grasp right shot11 (1)
leave left shaker1 (1)
refill-shot shot11 ingredient4 right left dispenser4 (10)
pour-shot-to-clean-shaker shot11 ingredient4 shaker1 right l0 l1 (1)
clean-shot shot11 ingredient4 right left (1)
fill-shot shot11 ingredient1 right left dispenser1 (10)
pour-shot-to-used-shaker shot11 ingredient1 shaker1 right l1 l2 (1)
leave right shot11 (1)
grasp left shaker1 (1)
shake cocktail3 ingredient1 ingredient4 shaker1 left right (1)
pour-shaker-to-shot cocktail3 shot8 left shaker1 l2 l1 (1)
empty-shaker left shaker1 cocktail3 l1 l0 (1)
clean-shaker left right shaker1 (1)
grasp right shot11 (1)
leave left shaker1 (1)
clean-shot shot11 ingredient1 right left (1)
fill-shot shot11 ingredient3 right left dispenser3 (10)
pour-shot-to-clean-shaker shot11 ingredient3 shaker1 right l0 l1 (1)
clean-shot shot11 ingredient3 right left (1)
fill-shot shot11 ingredient4 right left dispenser4 (10)
pour-shot-to-used-shaker shot11 ingredient4 shaker1 right l1 l2 (1)
leave right shot11 (1)
grasp left shaker1 (1)
shake cocktail2 ingredient3 ingredient4 shaker1 left right (1)
pour-shaker-to-shot cocktail2 shot3 left shaker1 l2 l1 (1)
empty-shaker left shaker1 cocktail2 l1 l0 (1)
clean-shaker left right shaker1 (1)
grasp right shot11 (1)
leave left shaker1 (1)
refill-shot shot11 ingredient4 right left dispenser4 (10)
pour-shot-to-clean-shaker shot11 ingredient4 shaker1 right l0 l1 (1)
clean-shot shot11 ingredient4 right left (1)
fill-shot shot11 ingredient3 right left dispenser3 (10)
pour-shot-to-used-shaker shot11 ingredient3 shaker1 right l1 l2 (1)
leave right shot11 (1)
grasp left shaker1 (1)
shake cocktail8 ingredient4 ingredient3 shaker1 left right (1)
pour-shaker-to-shot cocktail8 shot9 left shaker1 l2 l1 (1)
empty-shaker left shaker1 cocktail8 l1 l0 (1)
clean-shaker left right shaker1 (1)
grasp right shot11 (1)
leave left shaker1 (1)
refill-shot shot11 ingredient3 right left dispenser3 (10)
pour-shot-to-clean-shaker shot11 ingredient3 shaker1 right l0 l1 (1)
clean-shot shot11 ingredient3 right left (1)
fill-shot shot11 ingredient2 right left dispenser2 (10)
pour-shot-to-used-shaker shot11 ingredient2 shaker1 right l1 l2 (1)
leave right shot11 (1)
grasp left shaker1 (1)
shake cocktail1 ingredient3 ingredient2 shaker1 left right (1)
pour-shaker-to-shot cocktail1 shot1 left shaker1 l2 l1 (1)
empty-shaker left shaker1 cocktail1 l1 l0 (1)
clean-shaker left right shaker1 (1)
grasp right shot11 (1)
leave left shaker1 (1)
clean-shot shot11 ingredient2 right left (1)
fill-shot shot11 ingredient3 right left dispenser3 (10)
pour-shot-to-clean-shaker shot11 ingredient3 shaker1 right l0 l1 (1)
clean-shot shot11 ingredient3 right left (1)
fill-shot shot11 ingredient4 right left dispenser4 (10)
grasp left shaker1 (1)
pour-shot-to-used-shaker shot11 ingredient4 shaker1 right l1 l2 (1)
leave right shot11 (1)
shake cocktail9 ingredient4 ingredient3 shaker1 left right (1)
pour-shaker-to-shot cocktail9 shot7 left shaker1 l2 l1 (1)
[t=651.728s, 505896 KB] Plan length: 117 step(s).
[t=651.728s, 505896 KB] Plan cost: 279
[t=651.728s, 505896 KB] Expanded 21753 state(s).
[t=651.728s, 505896 KB] Reopened 0 state(s).
[t=651.728s, 505896 KB] Evaluated 149010 state(s).
[t=651.728s, 505896 KB] Evaluations: 149010
[t=651.728s, 505896 KB] Generated 246864 state(s).
[t=651.728s, 505896 KB] Dead ends: 0 state(s).
[t=651.728s, 505896 KB] Number of registered states: 149010
[t=651.728s, 505896 KB] Int hash set load factor: 149010/262144 = 0.568428
[t=651.728s, 505896 KB] Int hash set resizes: 18
[t=651.728s, 505896 KB] Search time: 623.205s
[t=651.728s, 505896 KB] Total time: 651.728s
Solution found.
Peak memory: 505896 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Running validate.
INFO     validate stdin: None
INFO     validate time limit: None
INFO     validate memory limit: None
INFO     validate command line string: /home/henry/bin/validate domain.pddl problem.pddl sas_plan
Checking plan: sas_plan
Plan executed successfully - checking goal
Plan valid
Final value: 279 

Successful plans:
Value: 279
 sas_plan 279 

validate exit code: 0

INFO     Planner time: 652.04s
