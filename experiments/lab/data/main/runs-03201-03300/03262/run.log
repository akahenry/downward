INFO     planner time limit: 1800s
INFO     planner memory limit: 2048 MB

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: 1799s
INFO     translator memory limit: 2048 MB
INFO     translator command line string: /home/henry/Documents/UFRGS/TCC/downward/.venv/bin/python /home/henry/Documents/UFRGS/TCC/downward/experiments/lab/data/main/code-5bb2ccb6957559b6969ffd7e29254c73f84d5e49_e5e41175/builds/release/bin/translate/translate.py domain.pddl problem.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.002s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.002s wall-clock]
Preparing model... [0.000s CPU, 0.001s wall-clock]
Generated 51 rules.
Computing model... [0.180s CPU, 0.186s wall-clock]
29701 relevant atoms
8838 auxiliary atoms
38539 final queue length
99451 total queue pushes
Completing instantiation... [0.910s CPU, 0.912s wall-clock]
Instantiating: [1.100s CPU, 1.107s wall-clock]
Computing fact groups...
Finding invariants...
5 initial candidates
Finding invariants: [0.020s CPU, 0.016s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
18 uncovered facts
Choosing groups: [0.000s CPU, 0.001s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.020s CPU, 0.019s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.040s CPU, 0.031s wall-clock]
Translating task: [0.650s CPU, 0.641s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
18 propositions removed
Detecting unreachable propositions: [0.410s CPU, 0.411s wall-clock]
Reordering and filtering variables...
36 of 36 variables necessary.
18 of 36 mutex groups necessary.
27540 of 27540 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.070s CPU, 0.071s wall-clock]
Translator variables: 36
Translator derived variables: 0
Translator facts: 360
Translator goal facts: 36
Translator mutex groups: 18
Translator total mutex groups size: 324
Translator operators: 27540
Translator axioms: 0
Translator task size: 141210
Translator peak memory: 135664 KB
Writing output... [0.100s CPU, 0.102s wall-clock]
Done! [2.390s CPU, 2.395s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: 1797s
INFO     search memory limit: 2048 MB
INFO     search command line string: /home/henry/Documents/UFRGS/TCC/downward/experiments/lab/data/main/code-5bb2ccb6957559b6969ffd7e29254c73f84d5e49_e5e41175/builds/release/bin/downward --search 'eager_greedy([ff(transform=adapt_costs(cost_type=NORMAL))])' --internal-plan-file sas_plan < output.sas
[t=0s, 10544 KB] reading input...
[t=0.0759608s, 18672 KB] done reading input!
[t=0.0799624s, 21372 KB] Simplifying 57834 unary operators... done! [52326 unary operators]
[t=0.0999251s, 26220 KB] time to simplify: 0.0199627s
[t=0.103925s, 26220 KB] Initializing additive heuristic...
[t=0.103925s, 26220 KB] Initializing FF heuristic...
[t=0.103925s, 26220 KB] Building successor generator...done!
[t=0.107932s, 26220 KB] peak memory difference for successor generator creation: 0 KB
[t=0.107932s, 26220 KB] time for successor generation creation: 0.00400684s
[t=0.107932s, 26220 KB] Variables: 36
[t=0.107932s, 26220 KB] FactPairs: 360
[t=0.107932s, 26220 KB] Bytes per state: 16
[t=0.107932s, 26220 KB] Conducting best first search without reopening closed nodes, (real) bound = 2147483647
[t=0.107932s, 26220 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 63
[t=0.107932s, 26220 KB] g=0, 1 evaluated, 0 expanded
[t=0.107932s, 26220 KB] Initial heuristic value for ff(transform=adapt_costs(cost_type=normal)): 63
[t=0.107932s, 26220 KB] pruning method: none
[t=0.107932s, 26220 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 60
[t=0.107932s, 26220 KB] g=3, 2 evaluated, 1 expanded
[t=0.1359s, 26220 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 59
[t=0.1359s, 26220 KB] g=6, 92 evaluated, 2 expanded
[t=0.143903s, 26220 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 56
[t=0.143903s, 26220 KB] g=6, 108 evaluated, 2 expanded
[t=0.171881s, 26220 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 54
[t=0.171881s, 26220 KB] g=9, 191 evaluated, 3 expanded
[t=0.203856s, 26220 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 53
[t=0.203856s, 26220 KB] g=12, 294 evaluated, 4 expanded
[t=0.235829s, 26220 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 51
[t=0.235829s, 26220 KB] g=13, 376 evaluated, 5 expanded
[t=0.267809s, 26220 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 50
[t=0.267809s, 26220 KB] g=16, 476 evaluated, 6 expanded
[t=0.295804s, 26220 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 48
[t=0.295804s, 26220 KB] g=17, 559 evaluated, 7 expanded
[t=0.323767s, 26220 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 47
[t=0.323767s, 26220 KB] g=20, 656 evaluated, 8 expanded
[t=0.351748s, 26220 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 45
[t=0.351748s, 26220 KB] g=21, 740 evaluated, 9 expanded
[t=0.383731s, 26220 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 44
[t=0.383731s, 26220 KB] g=24, 834 evaluated, 10 expanded
[t=0.411716s, 26220 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 42
[t=0.411716s, 26220 KB] g=25, 919 evaluated, 11 expanded
[t=0.443696s, 26220 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 41
[t=0.443696s, 26220 KB] g=28, 1010 evaluated, 12 expanded
[t=0.471682s, 26220 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 39
[t=0.471682s, 26220 KB] g=29, 1096 evaluated, 13 expanded
[t=0.499671s, 26220 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 38
[t=0.499671s, 26220 KB] g=32, 1184 evaluated, 14 expanded
[t=0.527663s, 26220 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 36
[t=0.527663s, 26220 KB] g=33, 1271 evaluated, 15 expanded
[t=0.555648s, 26220 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 35
[t=0.555648s, 26220 KB] g=36, 1356 evaluated, 16 expanded
[t=0.579639s, 26220 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 33
[t=0.579639s, 26220 KB] g=37, 1444 evaluated, 17 expanded
[t=0.607625s, 26220 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 32
[t=0.607625s, 26220 KB] g=40, 1526 evaluated, 18 expanded
[t=3.17458s, 26220 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 29
[t=3.17458s, 26220 KB] g=45, 8744 evaluated, 148 expanded
[t=3.17857s, 26220 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 28
[t=3.17857s, 26220 KB] g=44, 8760 evaluated, 149 expanded
[t=5.47364s, 26220 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 25
[t=5.47364s, 26220 KB] g=51, 15521 evaluated, 262 expanded
[t=5.47763s, 26220 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 24
[t=5.47763s, 26220 KB] g=50, 15536 evaluated, 263 expanded
[t=7.54482s, 26220 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 21
[t=7.54482s, 26220 KB] g=57, 21649 evaluated, 359 expanded
[t=7.54881s, 26220 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 20
[t=7.54881s, 26220 KB] g=56, 21663 evaluated, 360 expanded
[t=9.40797s, 26220 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 17
[t=9.40797s, 26220 KB] g=63, 27000 evaluated, 439 expanded
[t=9.41197s, 26220 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 16
[t=9.41197s, 26220 KB] g=62, 27013 evaluated, 440 expanded
[t=11.0113s, 26220 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 13
[t=11.0113s, 26220 KB] g=69, 31446 evaluated, 502 expanded
[t=11.0153s, 26220 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 12
[t=11.0153s, 26220 KB] g=68, 31458 evaluated, 503 expanded
[t=12.1789s, 26220 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 9
[t=12.1789s, 26220 KB] g=75, 34859 evaluated, 548 expanded
[t=12.1829s, 26220 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 8
[t=12.1829s, 26220 KB] g=74, 34870 evaluated, 549 expanded
[t=12.9665s, 26220 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 5
[t=12.9665s, 26220 KB] g=81, 37111 evaluated, 577 expanded
[t=12.9705s, 26220 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 4
[t=12.9705s, 26220 KB] g=80, 37121 evaluated, 578 expanded
[t=13.2784s, 26220 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 1
[t=13.2784s, 26220 KB] g=87, 38074 evaluated, 589 expanded
[t=13.2784s, 26220 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 0
[t=13.2784s, 26220 KB] g=86, 38083 evaluated, 590 expanded
[t=13.2904s, 26220 KB] Solution found!
[t=13.2904s, 26220 KB] Actual search time: 13.1824s
analyze-2 seg-in-1 seg-out-1 car-in-1 car-out-1 (3)
analyze-2 seg-in-1 seg-out-1 car-out-1 car-in-1 (3)
analyze-2 seg-in-2 seg-out-1 car-in-2 car-out-1 (3)
rotate-2 seg-in-2 seg-out-1 car-out-1 car-in-2 (1)
analyze-2 seg-in-3 seg-out-1 car-in-3 car-out-1 (3)
rotate-2 seg-in-3 seg-out-1 car-out-1 car-in-3 (1)
analyze-2 seg-in-4 seg-out-1 car-in-4 car-out-1 (3)
rotate-2 seg-in-4 seg-out-1 car-out-1 car-in-4 (1)
analyze-2 seg-in-5 seg-out-1 car-in-5 car-out-1 (3)
rotate-2 seg-in-5 seg-out-1 car-out-1 car-in-5 (1)
analyze-2 seg-in-6 seg-out-1 car-in-6 car-out-1 (3)
rotate-2 seg-in-6 seg-out-1 car-out-1 car-in-6 (1)
analyze-2 seg-in-7 seg-out-1 car-in-7 car-out-1 (3)
rotate-2 seg-in-7 seg-out-1 car-out-1 car-in-7 (1)
analyze-2 seg-in-8 seg-out-1 car-in-8 car-out-1 (3)
rotate-2 seg-in-8 seg-out-1 car-out-1 car-in-8 (1)
analyze-2 seg-in-9 seg-out-1 car-in-9 car-out-1 (3)
rotate-2 seg-in-9 seg-out-1 car-out-1 car-in-9 (1)
rotate-2 seg-in-1 seg-out-2 car-in-1 car-out-2 (1)
analyze-2 seg-in-1 seg-out-1 car-out-2 car-out-1 (3)
rotate-2 seg-in-1 seg-out-1 car-out-1 car-out-2 (1)
rotate-2 seg-in-1 seg-out-2 car-out-2 car-in-1 (1)
rotate-2 seg-in-1 seg-out-3 car-in-1 car-out-3 (1)
analyze-2 seg-in-1 seg-out-1 car-out-3 car-out-1 (3)
rotate-2 seg-in-1 seg-out-1 car-out-1 car-out-3 (1)
rotate-2 seg-in-1 seg-out-3 car-out-3 car-in-1 (1)
rotate-2 seg-in-1 seg-out-4 car-in-1 car-out-4 (1)
analyze-2 seg-in-1 seg-out-1 car-out-4 car-out-1 (3)
rotate-2 seg-in-1 seg-out-1 car-out-1 car-out-4 (1)
rotate-2 seg-in-1 seg-out-4 car-out-4 car-in-1 (1)
rotate-2 seg-in-1 seg-out-5 car-in-1 car-out-5 (1)
analyze-2 seg-in-1 seg-out-1 car-out-5 car-out-1 (3)
rotate-2 seg-in-1 seg-out-1 car-out-1 car-out-5 (1)
rotate-2 seg-in-1 seg-out-5 car-out-5 car-in-1 (1)
rotate-2 seg-in-1 seg-out-6 car-in-1 car-out-6 (1)
analyze-2 seg-in-1 seg-out-1 car-out-6 car-out-1 (3)
rotate-2 seg-in-1 seg-out-1 car-out-1 car-out-6 (1)
rotate-2 seg-in-1 seg-out-6 car-out-6 car-in-1 (1)
rotate-2 seg-in-1 seg-out-7 car-in-1 car-out-7 (1)
analyze-2 seg-in-1 seg-out-1 car-out-7 car-out-1 (3)
rotate-2 seg-in-1 seg-out-1 car-out-1 car-out-7 (1)
rotate-2 seg-in-1 seg-out-7 car-out-7 car-in-1 (1)
rotate-2 seg-in-1 seg-out-8 car-in-1 car-out-8 (1)
analyze-2 seg-in-1 seg-out-1 car-out-8 car-out-1 (3)
rotate-2 seg-in-1 seg-out-1 car-out-1 car-out-8 (1)
rotate-2 seg-in-1 seg-out-8 car-out-8 car-in-1 (1)
rotate-2 seg-in-1 seg-out-9 car-in-1 car-out-9 (1)
analyze-2 seg-in-1 seg-out-1 car-out-9 car-out-1 (3)
rotate-2 seg-in-1 seg-out-1 car-out-1 car-out-9 (1)
rotate-2 seg-in-1 seg-out-9 car-out-9 car-in-1 (1)
[t=13.2904s, 26220 KB] Plan length: 50 step(s).
[t=13.2904s, 26220 KB] Plan cost: 86
[t=13.2904s, 26220 KB] Expanded 591 state(s).
[t=13.2904s, 26220 KB] Reopened 0 state(s).
[t=13.2904s, 26220 KB] Evaluated 38154 state(s).
[t=13.2904s, 26220 KB] Evaluations: 38154
[t=13.2904s, 26220 KB] Generated 53100 state(s).
[t=13.2904s, 26220 KB] Dead ends: 0 state(s).
[t=13.2904s, 26220 KB] Number of registered states: 38154
[t=13.2904s, 26220 KB] Int hash set load factor: 38154/65536 = 0.582184
[t=13.2904s, 26220 KB] Int hash set resizes: 16
[t=13.2904s, 26220 KB] Search time: 13.1824s
[t=13.2904s, 26220 KB] Total time: 13.2904s
Solution found.
Peak memory: 26220 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Running validate.
INFO     validate stdin: None
INFO     validate time limit: None
INFO     validate memory limit: None
INFO     validate command line string: /home/henry/bin/validate domain.pddl problem.pddl sas_plan
Checking plan: sas_plan
Plan executed successfully - checking goal
Plan valid
Final value: 86 

Successful plans:
Value: 86
 sas_plan 86 

validate exit code: 0

INFO     Planner time: 15.77s
