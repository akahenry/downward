INFO     planner time limit: 1800s
INFO     planner memory limit: 2048 MB

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: 1799s
INFO     translator memory limit: 2048 MB
INFO     translator command line string: /home/henry/Documents/UFRGS/TCC/downward/.venv/bin/python /home/henry/Documents/UFRGS/TCC/downward/experiments/lab/data/main/code-5bb2ccb6957559b6969ffd7e29254c73f84d5e49_e5e41175/builds/release/bin/translate/translate.py domain.pddl problem.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.002s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.001s wall-clock]
Generated 50 rules.
Computing model... [0.010s CPU, 0.010s wall-clock]
761 relevant atoms
912 auxiliary atoms
1673 final queue length
2151 total queue pushes
Completing instantiation... [0.010s CPU, 0.008s wall-clock]
Instantiating: [0.020s CPU, 0.021s wall-clock]
Computing fact groups...
Finding invariants...
11 initial candidates
Finding invariants: [0.000s CPU, 0.003s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.002s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
0 uncovered facts
Choosing groups: [0.010s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.007s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.000s wall-clock]
Translating task: [0.010s CPU, 0.012s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
4 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.005s wall-clock]
Reordering and filtering variables...
34 of 34 variables necessary.
60 of 64 mutex groups necessary.
400 of 400 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.002s wall-clock]
Translator variables: 34
Translator derived variables: 0
Translator facts: 184
Translator goal facts: 25
Translator mutex groups: 60
Translator total mutex groups size: 240
Translator operators: 400
Translator axioms: 0
Translator task size: 2671
Translator peak memory: 33732 KB
Writing output... [0.000s CPU, 0.002s wall-clock]
Done! [0.050s CPU, 0.052s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: 1799s
INFO     search memory limit: 2048 MB
INFO     search command line string: /home/henry/Documents/UFRGS/TCC/downward/experiments/lab/data/main/code-5bb2ccb6957559b6969ffd7e29254c73f84d5e49_e5e41175/builds/release/bin/downward --search 'eager_greedy([ff(transform=adapt_costs(cost_type=NORMAL))])' --internal-plan-file sas_plan < output.sas
[t=0s, 10544 KB] reading input...
[t=0s, 10676 KB] done reading input!
[t=0s, 10940 KB] Simplifying 792 unary operators... done! [792 unary operators]
[t=0s, 10940 KB] time to simplify: 0s
[t=0s, 10940 KB] Initializing additive heuristic...
[t=0s, 10940 KB] Initializing FF heuristic...
[t=0s, 10940 KB] Building successor generator...done!
[t=0s, 11072 KB] peak memory difference for successor generator creation: 132 KB
[t=0s, 11072 KB] time for successor generation creation: 0s
[t=0s, 11072 KB] Variables: 34
[t=0s, 11072 KB] FactPairs: 184
[t=0s, 11072 KB] Bytes per state: 12
[t=0s, 11072 KB] Conducting best first search without reopening closed nodes, (real) bound = 2147483647
[t=0s, 11072 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 77
[t=0s, 11072 KB] g=0, 1 evaluated, 0 expanded
[t=0s, 11072 KB] Initial heuristic value for ff(transform=adapt_costs(cost_type=normal)): 77
[t=0s, 11072 KB] pruning method: none
[t=0s, 11072 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 74
[t=0s, 11072 KB] g=1, 9 evaluated, 1 expanded
[t=0s, 11072 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 72
[t=0s, 11072 KB] g=3, 18 evaluated, 2 expanded
[t=0.00398627s, 11072 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 70
[t=0.00398627s, 11072 KB] g=6, 36 evaluated, 3 expanded
[t=0.00398627s, 11072 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 68
[t=0.00398627s, 11072 KB] g=8, 40 evaluated, 4 expanded
[t=0.00398627s, 11072 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 67
[t=0.00398627s, 11072 KB] g=9, 55 evaluated, 5 expanded
[t=0.00398627s, 11072 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 65
[t=0.00398627s, 11072 KB] g=13, 78 evaluated, 8 expanded
[t=0.00398627s, 11072 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 62
[t=0.00398627s, 11072 KB] g=17, 116 evaluated, 12 expanded
[t=0.00398627s, 11072 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 61
[t=0.00398627s, 11072 KB] g=22, 144 evaluated, 15 expanded
[t=0.00398627s, 11072 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 59
[t=0.00398627s, 11072 KB] g=26, 165 evaluated, 18 expanded
[t=0.00398627s, 11072 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 57
[t=0.00398627s, 11072 KB] g=27, 175 evaluated, 19 expanded
[t=0.00398627s, 11072 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 56
[t=0.00398627s, 11072 KB] g=28, 187 evaluated, 20 expanded
[t=0.00398627s, 11072 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 55
[t=0.00398627s, 11072 KB] g=31, 217 evaluated, 24 expanded
[t=0.00398627s, 11072 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 52
[t=0.00398627s, 11072 KB] g=32, 238 evaluated, 25 expanded
[t=0.00398627s, 11072 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 51
[t=0.00398627s, 11072 KB] g=35, 250 evaluated, 27 expanded
[t=0.00398627s, 11072 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 50
[t=0.00398627s, 11072 KB] g=36, 268 evaluated, 28 expanded
[t=0.00398627s, 11072 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 49
[t=0.00398627s, 11072 KB] g=36, 270 evaluated, 28 expanded
[t=0.00398627s, 11072 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 48
[t=0.00398627s, 11072 KB] g=40, 345 evaluated, 36 expanded
[t=0.00398627s, 11072 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 47
[t=0.00398627s, 11072 KB] g=40, 347 evaluated, 36 expanded
[t=0.00798657s, 11072 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 45
[t=0.00798657s, 11072 KB] g=45, 451 evaluated, 51 expanded
[t=0.00798657s, 11072 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 44
[t=0.00798657s, 11072 KB] g=46, 463 evaluated, 52 expanded
[t=0.00798657s, 11072 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 42
[t=0.00798657s, 11072 KB] g=48, 473 evaluated, 54 expanded
[t=0.00798657s, 11072 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 40
[t=0.00798657s, 11072 KB] g=53, 530 evaluated, 62 expanded
[t=0.00798657s, 11072 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 38
[t=0.00798657s, 11072 KB] g=57, 619 evaluated, 74 expanded
[t=0.00798657s, 11072 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 36
[t=0.00798657s, 11072 KB] g=66, 715 evaluated, 87 expanded
[t=0.015977s, 11072 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 35
[t=0.015977s, 11072 KB] g=73, 1663 evaluated, 236 expanded
[t=0.0239824s, 11072 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 34
[t=0.0239824s, 11072 KB] g=104, 2654 evaluated, 434 expanded
[t=0.0279703s, 11196 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 32
[t=0.0279703s, 11196 KB] g=121, 3087 evaluated, 548 expanded
[t=0.0279703s, 11196 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 30
[t=0.0279703s, 11196 KB] g=128, 3100 evaluated, 550 expanded
[t=0.0279703s, 11196 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 25
[t=0.0279703s, 11196 KB] g=133, 3107 evaluated, 551 expanded
[t=0.0279703s, 11196 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 24
[t=0.0279703s, 11196 KB] g=134, 3116 evaluated, 552 expanded
[t=0.0279703s, 11196 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 22
[t=0.0279703s, 11196 KB] g=136, 3120 evaluated, 553 expanded
[t=0.131895s, 11856 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 20
[t=0.131895s, 11856 KB] g=128, 19931 evaluated, 6276 expanded
[t=0.135884s, 11992 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 19
[t=0.135884s, 11992 KB] g=138, 20629 evaluated, 6447 expanded
[t=2.37437s, 26756 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 18
[t=2.37437s, 26756 KB] g=136, 366840 evaluated, 126365 expanded
[t=2.37437s, 26756 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 13
[t=2.37437s, 26756 KB] g=141, 366846 evaluated, 126366 expanded
[t=2.37437s, 26756 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 12
[t=2.37437s, 26756 KB] g=142, 366855 evaluated, 126367 expanded
[t=2.37437s, 26756 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 10
[t=2.37437s, 26756 KB] g=144, 366857 evaluated, 126368 expanded
[t=140.967s, 966952 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 8
[t=140.967s, 966952 KB] g=135, 21873175 evaluated, 7933829 expanded
[t=140.967s, 966952 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 7
[t=140.967s, 966952 KB] g=136, 21873184 evaluated, 7933830 expanded
[t=140.967s, 966952 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 6
[t=140.967s, 966952 KB] g=136, 21873185 evaluated, 7933830 expanded
[t=140.967s, 966952 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 3
[t=140.967s, 966952 KB] g=139, 21873193 evaluated, 7933832 expanded
[t=140.967s, 966952 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 2
[t=140.967s, 966952 KB] g=140, 21873202 evaluated, 7933833 expanded
[t=140.967s, 966952 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=normal)): 0
[t=140.967s, 966952 KB] g=142, 21873207 evaluated, 7933834 expanded
[t=140.967s, 966952 KB] Solution found!
[t=140.967s, 966952 KB] Actual search time: 140.967s
down robot1 tile_5-3 tile_4-3 (1)
paint-up robot1 tile_5-3 tile_4-3 white (2)
up robot2 tile_3-4 tile_4-4 (3)
paint-up robot2 tile_5-4 tile_4-4 black (2)
down robot2 tile_4-4 tile_3-4 (1)
right robot1 tile_4-3 tile_4-4 (1)
right robot1 tile_4-4 tile_4-5 (1)
paint-up robot1 tile_5-5 tile_4-5 white (2)
left robot1 tile_4-5 tile_4-4 (1)
right robot2 tile_3-4 tile_3-5 (1)
paint-up robot2 tile_4-5 tile_3-5 black (2)
left robot2 tile_3-5 tile_3-4 (1)
left robot1 tile_4-4 tile_4-3 (1)
up robot2 tile_3-4 tile_4-4 (3)
left robot1 tile_4-3 tile_4-2 (1)
left robot1 tile_4-2 tile_4-1 (1)
paint-up robot1 tile_5-1 tile_4-1 white (2)
down robot1 tile_4-1 tile_3-1 (1)
left robot2 tile_4-4 tile_4-3 (1)
left robot2 tile_4-3 tile_4-2 (1)
paint-up robot2 tile_5-2 tile_4-2 black (2)
down robot2 tile_4-2 tile_3-2 (1)
right robot2 tile_3-2 tile_3-3 (1)
paint-up robot2 tile_4-3 tile_3-3 black (2)
right robot1 tile_3-1 tile_3-2 (1)
paint-up robot1 tile_4-2 tile_3-2 white (2)
right robot2 tile_3-3 tile_3-4 (1)
right robot1 tile_3-2 tile_3-3 (1)
right robot2 tile_3-4 tile_3-5 (1)
right robot1 tile_3-3 tile_3-4 (1)
paint-up robot1 tile_4-4 tile_3-4 white (2)
down robot1 tile_3-4 tile_2-4 (1)
left robot2 tile_3-5 tile_3-4 (1)
right robot1 tile_2-4 tile_2-5 (1)
paint-up robot1 tile_3-5 tile_2-5 white (2)
left robot1 tile_2-5 tile_2-4 (1)
left robot1 tile_2-4 tile_2-3 (1)
left robot2 tile_3-4 tile_3-3 (1)
left robot2 tile_3-3 tile_3-2 (1)
paint-up robot1 tile_3-3 tile_2-3 white (2)
right robot1 tile_2-3 tile_2-4 (1)
left robot2 tile_3-2 tile_3-1 (1)
paint-up robot2 tile_4-1 tile_3-1 black (2)
down robot2 tile_3-1 tile_2-1 (1)
left robot1 tile_2-4 tile_2-3 (1)
left robot1 tile_2-3 tile_2-2 (1)
up robot1 tile_2-2 tile_3-2 (3)
change-color robot2 black white (5)
paint-up robot2 tile_3-1 tile_2-1 white (2)
change-color robot1 white black (5)
down robot1 tile_3-2 tile_2-2 (1)
paint-up robot1 tile_3-2 tile_2-2 black (2)
right robot1 tile_2-2 tile_2-3 (1)
down robot2 tile_2-1 tile_1-1 (1)
right robot1 tile_2-3 tile_2-4 (1)
paint-up robot1 tile_3-4 tile_2-4 black (2)
down robot1 tile_2-4 tile_1-4 (1)
up robot2 tile_1-1 tile_2-1 (3)
right robot2 tile_2-1 tile_2-2 (1)
right robot1 tile_1-4 tile_1-5 (1)
paint-up robot1 tile_2-5 tile_1-5 black (2)
change-color robot1 black white (5)
change-color robot2 white black (5)
left robot2 tile_2-2 tile_2-1 (1)
left robot1 tile_1-5 tile_1-4 (1)
paint-up robot1 tile_2-4 tile_1-4 white (2)
down robot2 tile_2-1 tile_1-1 (1)
paint-up robot2 tile_2-1 tile_1-1 black (2)
right robot2 tile_1-1 tile_1-2 (1)
right robot2 tile_1-2 tile_1-3 (1)
paint-up robot2 tile_2-3 tile_1-3 black (2)
down robot2 tile_1-3 tile_0-3 (1)
right robot2 tile_0-3 tile_0-4 (1)
right robot1 tile_1-4 tile_1-5 (1)
paint-up robot2 tile_1-4 tile_0-4 black (2)
down robot1 tile_1-5 tile_0-5 (1)
paint-up robot1 tile_1-5 tile_0-5 white (2)
left robot2 tile_0-4 tile_0-3 (1)
left robot1 tile_0-5 tile_0-4 (1)
left robot2 tile_0-3 tile_0-2 (1)
left robot2 tile_0-2 tile_0-1 (1)
left robot1 tile_0-4 tile_0-3 (1)
paint-up robot1 tile_1-3 tile_0-3 white (2)
left robot1 tile_0-3 tile_0-2 (1)
up robot1 tile_0-2 tile_1-2 (3)
paint-up robot1 tile_2-2 tile_1-2 white (2)
right robot2 tile_0-1 tile_0-2 (1)
left robot1 tile_1-2 tile_1-1 (1)
paint-up robot2 tile_1-2 tile_0-2 black (2)
down robot1 tile_1-1 tile_0-1 (1)
paint-up robot1 tile_1-1 tile_0-1 white (2)
[t=140.967s, 966952 KB] Plan length: 91 step(s).
[t=140.967s, 966952 KB] Plan cost: 142
[t=140.967s, 966952 KB] Expanded 7933835 state(s).
[t=140.967s, 966952 KB] Reopened 0 state(s).
[t=140.967s, 966952 KB] Evaluated 21873208 state(s).
[t=140.967s, 966952 KB] Evaluations: 21873208
[t=140.967s, 966952 KB] Generated 61271403 state(s).
[t=140.967s, 966952 KB] Dead ends: 11956201 state(s).
[t=140.967s, 966952 KB] Number of registered states: 21873208
[t=140.967s, 966952 KB] Int hash set load factor: 21873208/33554432 = 0.651872
[t=140.967s, 966952 KB] Int hash set resizes: 25
[t=140.967s, 966952 KB] Search time: 140.967s
[t=140.967s, 966952 KB] Total time: 140.967s
Solution found.
Peak memory: 966952 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Running validate.
INFO     validate stdin: None
INFO     validate time limit: None
INFO     validate memory limit: None
INFO     validate command line string: /home/henry/bin/validate domain.pddl problem.pddl sas_plan
Checking plan: sas_plan
Plan executed successfully - checking goal
Plan valid
Final value: 142 

Successful plans:
Value: 142
 sas_plan 142 

validate exit code: 0

INFO     Planner time: 141.13s
