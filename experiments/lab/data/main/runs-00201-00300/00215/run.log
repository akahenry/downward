INFO     planner time limit: 1800s
INFO     planner memory limit: 2048 MB

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: 1799s
INFO     translator memory limit: 2048 MB
INFO     translator command line string: /home/henry/Documents/UFRGS/TCC/downward/.venv/bin/python /home/henry/Documents/UFRGS/TCC/downward/experiments/lab/data/main/code-5bb2ccb6957559b6969ffd7e29254c73f84d5e49_e5e41175/builds/release/bin/translate/translate.py domain.pddl problem.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.002s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.001s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.003s wall-clock]
Preparing model... [0.000s CPU, 0.002s wall-clock]
Generated 115 rules.
Computing model... [0.030s CPU, 0.023s wall-clock]
2300 relevant atoms
2393 auxiliary atoms
4693 final queue length
8087 total queue pushes
Completing instantiation... [0.040s CPU, 0.048s wall-clock]
Instantiating: [0.070s CPU, 0.077s wall-clock]
Computing fact groups...
Finding invariants...
24 initial candidates
Finding invariants: [0.010s CPU, 0.008s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
238 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.001s wall-clock]
Computing fact groups: [0.010s CPU, 0.010s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.010s CPU, 0.002s wall-clock]
Translating task: [0.060s CPU, 0.054s wall-clock]
2672 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
3 propositions removed
Detecting unreachable propositions: [0.020s CPU, 0.024s wall-clock]
Reordering and filtering variables...
241 of 241 variables necessary.
12 of 15 mutex groups necessary.
1596 of 1596 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.020s CPU, 0.015s wall-clock]
Translator variables: 241
Translator derived variables: 0
Translator facts: 505
Translator goal facts: 10
Translator mutex groups: 12
Translator total mutex groups size: 36
Translator operators: 1596
Translator axioms: 0
Translator task size: 15302
Translator peak memory: 41584 KB
Writing output... [0.010s CPU, 0.011s wall-clock]
Done! [0.190s CPU, 0.196s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: 1799s
INFO     search memory limit: 2048 MB
INFO     search command line string: /home/henry/Documents/UFRGS/TCC/downward/experiments/lab/data/main/code-5bb2ccb6957559b6969ffd7e29254c73f84d5e49_e5e41175/builds/release/bin/downward --search 'eager_greedy([lsh(patterns=systematic(2), transform=adapt_costs(cost_type=ONE))])' --internal-plan-file sas_plan < output.sas
[t=0s, 10544 KB] reading input...
[t=0.00618686s, 11224 KB] done reading input!
[t=0.0101872s, 11488 KB] Generating patterns using: systematic pattern collection generator
[t=0.0101872s, 11488 KB] building causal graph...done! [t=0s]
[t=0.0101872s, 12016 KB] Found 84 SGA patterns.
[t=0.0101872s, 12016 KB] Found 84 interesting patterns.
[t=0.0101872s, 12016 KB] systematic pattern collection generator number of patterns: 84
[t=0.0101872s, 12016 KB] systematic pattern collection generator total PDB size: 776
[t=0.0101872s, 12016 KB] systematic pattern collection generator computation time: 0s
[t=0.0101872s, 12016 KB] Computing PDBs for pattern collection...
[t=0.0301771s, 12016 KB] Done computing PDBs for pattern collection: 0.0199899s
[t=0.0341773s, 12016 KB] Building successor generator...done!
[t=0.0341773s, 12016 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0341773s, 12016 KB] time for successor generation creation: 0s
[t=0.0341773s, 12016 KB] Variables: 241
[t=0.0341773s, 12016 KB] FactPairs: 505
[t=0.0341773s, 12016 KB] Bytes per state: 32
[t=0.0341773s, 12016 KB] Conducting best first search without reopening closed nodes, (real) bound = 2147483647
[t=0.0341773s, 12016 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 20
[t=0.0341773s, 12016 KB] g=0, 1 evaluated, 0 expanded
[t=0.0341773s, 12016 KB] Initial heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 20
[t=0.0341773s, 12016 KB] pruning method: none
[t=0.0341773s, 12016 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 19
[t=0.0341773s, 12016 KB] g=11, 82 evaluated, 6 expanded
[t=0.0341773s, 12016 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 18
[t=0.0341773s, 12016 KB] g=22, 144 evaluated, 17 expanded
[t=0.0421718s, 12148 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 17
[t=0.0421718s, 12148 KB] g=38, 2492 evaluated, 771 expanded
[t=0.0421718s, 12148 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 16
[t=0.0421718s, 12148 KB] g=39, 2513 evaluated, 772 expanded
[t=0.106142s, 13628 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 15
[t=0.106142s, 13628 KB] g=73, 26773 evaluated, 7783 expanded
[t=0.106142s, 13628 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 14
[t=0.106142s, 13628 KB] g=74, 26789 evaluated, 7784 expanded
[t=0.142132s, 14552 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 13
[t=0.142132s, 14552 KB] g=108, 40781 evaluated, 12148 expanded
[t=0.142132s, 14552 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 12
[t=0.142132s, 14552 KB] g=109, 40799 evaluated, 12149 expanded
[t=0.2621s, 16960 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 11
[t=0.2621s, 16960 KB] g=143, 74037 evaluated, 22535 expanded
[t=0.2621s, 16960 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 10
[t=0.2621s, 16960 KB] g=144, 74055 evaluated, 22536 expanded
[t=0.330052s, 18180 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 9
[t=0.330052s, 18180 KB] g=178, 97296 evaluated, 30275 expanded
[t=0.330052s, 18180 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 8
[t=0.330052s, 18180 KB] g=179, 97313 evaluated, 30276 expanded
[t=0.413982s, 21168 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 7
[t=0.413982s, 21168 KB] g=213, 128780 evaluated, 41114 expanded
[t=0.413982s, 21168 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 6
[t=0.413982s, 21168 KB] g=214, 128795 evaluated, 41115 expanded
[t=0.477933s, 22160 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 5
[t=0.477933s, 22160 KB] g=248, 152198 evaluated, 48320 expanded
[t=0.477933s, 22160 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 4
[t=0.477933s, 22160 KB] g=249, 152211 evaluated, 48321 expanded
[t=0.505903s, 22704 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 3
[t=0.505903s, 22704 KB] g=283, 163924 evaluated, 52075 expanded
[t=0.505903s, 22704 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 2
[t=0.505903s, 22704 KB] g=284, 163939 evaluated, 52076 expanded
[t=0.989497s, 34292 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 1
[t=0.989497s, 34292 KB] g=319, 340110 evaluated, 119106 expanded
[t=0.989497s, 34292 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 0
[t=0.989497s, 34292 KB] g=320, 340123 evaluated, 119107 expanded
[t=0.989497s, 34292 KB] Solution found!
[t=0.989497s, 34292 KB] Actual search time: 0.95532s
grasp left shot10 (1)
fill-shot shot10 ingredient1 left right dispenser1 (10)
pour-shot-to-clean-shaker shot10 ingredient1 shaker1 left l0 l1 (1)
refill-shot shot10 ingredient1 left right dispenser1 (10)
grasp right shot11 (1)
leave left shot10 (1)
fill-shot shot11 ingredient2 right left dispenser2 (10)
grasp left shaker1 (1)
pour-shot-to-used-shaker shot11 ingredient2 shaker1 right l1 l2 (1)
leave right shot11 (1)
shake cocktail3 ingredient2 ingredient1 shaker1 left right (1)
pour-shaker-to-shot cocktail3 shot8 left shaker1 l2 l1 (1)
grasp right shot11 (1)
leave left shaker1 (1)
refill-shot shot11 ingredient2 right left dispenser2 (10)
grasp left shaker1 (1)
leave right shot11 (1)
empty-shaker left shaker1 cocktail3 l1 l0 (1)
clean-shaker left right shaker1 (1)
grasp right shot11 (1)
pour-shot-to-clean-shaker shot11 ingredient2 shaker1 right l0 l1 (1)
leave left shaker1 (1)
clean-shot shot11 ingredient2 right left (1)
fill-shot shot11 ingredient1 right left dispenser1 (10)
grasp left shaker1 (1)
pour-shot-to-used-shaker shot11 ingredient1 shaker1 right l1 l2 (1)
leave right shot11 (1)
shake cocktail7 ingredient2 ingredient1 shaker1 left right (1)
pour-shaker-to-shot cocktail7 shot4 left shaker1 l2 l1 (1)
grasp right shot11 (1)
leave left shaker1 (1)
refill-shot shot11 ingredient1 right left dispenser1 (10)
grasp left shaker1 (1)
leave right shot11 (1)
empty-shaker left shaker1 cocktail7 l1 l0 (1)
clean-shaker left right shaker1 (1)
grasp right shot11 (1)
pour-shot-to-clean-shaker shot11 ingredient1 shaker1 right l0 l1 (1)
leave left shaker1 (1)
clean-shot shot11 ingredient1 right left (1)
fill-shot shot11 ingredient3 right left dispenser3 (10)
grasp left shaker1 (1)
pour-shot-to-used-shaker shot11 ingredient3 shaker1 right l1 l2 (1)
leave right shot11 (1)
shake cocktail2 ingredient1 ingredient3 shaker1 left right (1)
pour-shaker-to-shot cocktail2 shot6 left shaker1 l2 l1 (1)
grasp right shot11 (1)
leave left shaker1 (1)
refill-shot shot11 ingredient3 right left dispenser3 (10)
grasp left shaker1 (1)
leave right shot11 (1)
empty-shaker left shaker1 cocktail2 l1 l0 (1)
clean-shaker left right shaker1 (1)
grasp right shot11 (1)
pour-shot-to-clean-shaker shot11 ingredient3 shaker1 right l0 l1 (1)
leave left shaker1 (1)
clean-shot shot11 ingredient3 right left (1)
fill-shot shot11 ingredient1 right left dispenser1 (10)
grasp left shaker1 (1)
pour-shot-to-used-shaker shot11 ingredient1 shaker1 right l1 l2 (1)
leave right shot11 (1)
shake cocktail5 ingredient3 ingredient1 shaker1 left right (1)
pour-shaker-to-shot cocktail5 shot2 left shaker1 l2 l1 (1)
grasp right shot11 (1)
leave left shaker1 (1)
refill-shot shot11 ingredient1 right left dispenser1 (10)
grasp left shaker1 (1)
leave right shot11 (1)
empty-shaker left shaker1 cocktail5 l1 l0 (1)
clean-shaker left right shaker1 (1)
grasp right shot11 (1)
pour-shot-to-clean-shaker shot11 ingredient1 shaker1 right l0 l1 (1)
leave left shaker1 (1)
clean-shot shot11 ingredient1 right left (1)
fill-shot shot11 ingredient4 right left dispenser4 (10)
grasp left shaker1 (1)
pour-shot-to-used-shaker shot11 ingredient4 shaker1 right l1 l2 (1)
leave right shot11 (1)
shake cocktail9 ingredient4 ingredient1 shaker1 left right (1)
pour-shaker-to-shot cocktail9 shot7 left shaker1 l2 l1 (1)
grasp right shot11 (1)
leave left shaker1 (1)
refill-shot shot11 ingredient4 right left dispenser4 (10)
grasp left shaker1 (1)
leave right shot11 (1)
empty-shaker left shaker1 cocktail9 l1 l0 (1)
clean-shaker left right shaker1 (1)
grasp right shot11 (1)
pour-shot-to-clean-shaker shot11 ingredient4 shaker1 right l0 l1 (1)
leave left shaker1 (1)
clean-shot shot11 ingredient4 right left (1)
fill-shot shot11 ingredient2 right left dispenser2 (10)
grasp left shaker1 (1)
pour-shot-to-used-shaker shot11 ingredient2 shaker1 right l1 l2 (1)
leave right shot11 (1)
shake cocktail4 ingredient4 ingredient2 shaker1 left right (1)
pour-shaker-to-shot cocktail4 shot3 left shaker1 l2 l1 (1)
grasp right shot11 (1)
leave left shaker1 (1)
refill-shot shot11 ingredient2 right left dispenser2 (10)
grasp left shaker1 (1)
leave right shot11 (1)
empty-shaker left shaker1 cocktail4 l1 l0 (1)
clean-shaker left right shaker1 (1)
grasp right shot11 (1)
pour-shot-to-clean-shaker shot11 ingredient2 shaker1 right l0 l1 (1)
leave left shaker1 (1)
clean-shot shot11 ingredient2 right left (1)
fill-shot shot11 ingredient3 right left dispenser3 (10)
grasp left shaker1 (1)
pour-shot-to-used-shaker shot11 ingredient3 shaker1 right l1 l2 (1)
leave right shot11 (1)
shake cocktail8 ingredient2 ingredient3 shaker1 left right (1)
pour-shaker-to-shot cocktail8 shot1 left shaker1 l2 l1 (1)
grasp right shot11 (1)
leave left shaker1 (1)
refill-shot shot11 ingredient3 right left dispenser3 (10)
grasp left shaker1 (1)
leave right shot11 (1)
empty-shaker left shaker1 cocktail8 l1 l0 (1)
clean-shaker left right shaker1 (1)
grasp right shot11 (1)
pour-shot-to-clean-shaker shot11 ingredient3 shaker1 right l0 l1 (1)
leave left shaker1 (1)
clean-shot shot11 ingredient3 right left (1)
fill-shot shot11 ingredient1 right left dispenser1 (10)
grasp left shaker1 (1)
pour-shot-to-used-shaker shot11 ingredient1 shaker1 right l1 l2 (1)
leave right shot11 (1)
shake cocktail1 ingredient1 ingredient3 shaker1 left right (1)
pour-shaker-to-shot cocktail1 shot5 left shaker1 l2 l1 (1)
grasp right shot11 (1)
leave left shaker1 (1)
clean-shot shot11 ingredient1 right left (1)
fill-shot shot11 ingredient2 right left dispenser2 (10)
grasp left shaker1 (1)
leave right shot11 (1)
empty-shaker left shaker1 cocktail1 l1 l0 (1)
clean-shaker left right shaker1 (1)
grasp right shot11 (1)
pour-shot-to-clean-shaker shot11 ingredient2 shaker1 right l0 l1 (1)
leave left shaker1 (1)
clean-shot shot11 ingredient2 right left (1)
fill-shot shot11 ingredient4 right left dispenser4 (10)
grasp left shaker1 (1)
pour-shot-to-used-shaker shot11 ingredient4 shaker1 right l1 l2 (1)
leave right shot11 (1)
shake cocktail6 ingredient4 ingredient2 shaker1 left right (1)
pour-shaker-to-shot cocktail6 shot9 left shaker1 l2 l1 (1)
[t=0.989497s, 34292 KB] Plan length: 149 step(s).
[t=0.989497s, 34292 KB] Plan cost: 320
[t=0.989497s, 34292 KB] Expanded 119108 state(s).
[t=0.989497s, 34292 KB] Reopened 0 state(s).
[t=0.989497s, 34292 KB] Evaluated 340126 state(s).
[t=0.989497s, 34292 KB] Evaluations: 340126
[t=0.989497s, 34292 KB] Generated 710760 state(s).
[t=0.989497s, 34292 KB] Dead ends: 0 state(s).
[t=0.989497s, 34292 KB] Number of registered states: 340126
[t=0.989497s, 34292 KB] Int hash set load factor: 340126/524288 = 0.648739
[t=0.989497s, 34292 KB] Int hash set resizes: 19
[t=0.989497s, 34292 KB] Search time: 0.95532s
[t=0.989497s, 34292 KB] Total time: 0.989497s
Solution found.
Peak memory: 34292 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Running validate.
INFO     validate stdin: None
INFO     validate time limit: None
INFO     validate memory limit: None
INFO     validate command line string: /home/henry/bin/validate domain.pddl problem.pddl sas_plan
Checking plan: sas_plan
Plan executed successfully - checking goal
Plan valid
Final value: 320 

Successful plans:
Value: 320
 sas_plan 320 

validate exit code: 0

INFO     Planner time: 1.24s
