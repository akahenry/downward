INFO     planner time limit: 1800s
INFO     planner memory limit: 2048 MB

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: 1799s
INFO     translator memory limit: 2048 MB
INFO     translator command line string: /home/henry/Documents/UFRGS/TCC/downward/.venv/bin/python /home/henry/Documents/UFRGS/TCC/downward/experiments/lab/data/main/code-5bb2ccb6957559b6969ffd7e29254c73f84d5e49_e5e41175/builds/release/bin/translate/translate.py domain.pddl problem.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.002s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.003s wall-clock]
Preparing model... [0.010s CPU, 0.001s wall-clock]
Generated 115 rules.
Computing model... [0.020s CPU, 0.020s wall-clock]
2025 relevant atoms
2105 auxiliary atoms
4130 final queue length
7122 total queue pushes
Completing instantiation... [0.040s CPU, 0.039s wall-clock]
Instantiating: [0.070s CPU, 0.065s wall-clock]
Computing fact groups...
Finding invariants...
24 initial candidates
Finding invariants: [0.010s CPU, 0.007s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
207 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.009s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.002s wall-clock]
Translating task: [0.090s CPU, 0.087s wall-clock]
2326 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
3 propositions removed
Detecting unreachable propositions: [0.040s CPU, 0.038s wall-clock]
Reordering and filtering variables...
210 of 210 variables necessary.
11 of 14 mutex groups necessary.
1390 of 1390 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.010s CPU, 0.016s wall-clock]
Translator variables: 210
Translator derived variables: 0
Translator facts: 441
Translator goal facts: 9
Translator mutex groups: 11
Translator total mutex groups size: 33
Translator operators: 1390
Translator axioms: 0
Translator task size: 13333
Translator peak memory: 40168 KB
Writing output... [0.000s CPU, 0.009s wall-clock]
Done! [0.240s CPU, 0.230s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: 1799s
INFO     search memory limit: 2048 MB
INFO     search command line string: /home/henry/Documents/UFRGS/TCC/downward/experiments/lab/data/main/code-5bb2ccb6957559b6969ffd7e29254c73f84d5e49_e5e41175/builds/release/bin/downward --search 'eager_greedy([lsh(patterns=systematic(2), transform=adapt_costs(cost_type=ONE))])' --internal-plan-file sas_plan < output.sas
[t=0s, 10544 KB] reading input...
[t=0.00750059s, 11072 KB] done reading input!
[t=0.00750059s, 11468 KB] Generating patterns using: systematic pattern collection generator
[t=0.00750059s, 11468 KB] building causal graph...done! [t=0s]
[t=0.0115089s, 11864 KB] Found 72 SGA patterns.
[t=0.0115089s, 11864 KB] Found 72 interesting patterns.
[t=0.0115089s, 11864 KB] systematic pattern collection generator number of patterns: 72
[t=0.0115089s, 11864 KB] systematic pattern collection generator total PDB size: 648
[t=0.0115089s, 11864 KB] systematic pattern collection generator computation time: 0.00400833s
[t=0.0115089s, 11864 KB] Computing PDBs for pattern collection...
[t=0.0235112s, 11864 KB] Done computing PDBs for pattern collection: 0.0120022s
[t=0.0274804s, 11864 KB] Building successor generator...done!
[t=0.0274804s, 11864 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0274804s, 11864 KB] time for successor generation creation: 0s
[t=0.0274804s, 11864 KB] Variables: 210
[t=0.0274804s, 11864 KB] FactPairs: 441
[t=0.0274804s, 11864 KB] Bytes per state: 28
[t=0.0274804s, 11864 KB] Conducting best first search without reopening closed nodes, (real) bound = 2147483647
[t=0.0274804s, 11864 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 17
[t=0.0274804s, 11864 KB] g=0, 1 evaluated, 0 expanded
[t=0.0274804s, 11864 KB] Initial heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 17
[t=0.0274804s, 11864 KB] pruning method: none
[t=0.0514676s, 12396 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 16
[t=0.0514676s, 12396 KB] g=27, 9717 evaluated, 4288 expanded
[t=0.0514676s, 12396 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 15
[t=0.0514676s, 12396 KB] g=28, 9735 evaluated, 4289 expanded
[t=0.143369s, 14408 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 14
[t=0.143369s, 14408 KB] g=58, 44859 evaluated, 17404 expanded
[t=0.143369s, 14408 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 13
[t=0.143369s, 14408 KB] g=59, 44877 evaluated, 17405 expanded
[t=0.151375s, 14676 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 12
[t=0.151375s, 14676 KB] g=60, 48620 evaluated, 18604 expanded
[t=0.191326s, 16108 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 11
[t=0.191326s, 16108 KB] g=90, 63371 evaluated, 25025 expanded
[t=0.191326s, 16108 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 10
[t=0.191326s, 16108 KB] g=91, 63389 evaluated, 25026 expanded
[t=0.27523s, 17628 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 9
[t=0.27523s, 17628 KB] g=121, 98202 evaluated, 38511 expanded
[t=0.27523s, 17628 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 8
[t=0.27523s, 17628 KB] g=122, 98221 evaluated, 38512 expanded
[t=0.443018s, 22032 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 7
[t=0.443018s, 22032 KB] g=152, 165792 evaluated, 65328 expanded
[t=0.443018s, 22032 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 6
[t=0.443018s, 22032 KB] g=153, 165806 evaluated, 65329 expanded
[t=0.598848s, 24868 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 5
[t=0.598848s, 24868 KB] g=183, 223487 evaluated, 87674 expanded
[t=0.598848s, 24868 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 4
[t=0.598848s, 24868 KB] g=184, 223500 evaluated, 87675 expanded
[t=0.7228s, 29336 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 3
[t=0.7228s, 29336 KB] g=215, 272442 evaluated, 106417 expanded
[t=0.7228s, 29336 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 2
[t=0.7228s, 29336 KB] g=216, 272457 evaluated, 106418 expanded
[t=0.82676s, 31636 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 1
[t=0.82676s, 31636 KB] g=246, 319265 evaluated, 124220 expanded
[t=0.82676s, 31636 KB] New best heuristic value for lsh(patterns=systematic(2),transform=adapt_costs(cost_type=one)): 0
[t=0.82676s, 31636 KB] g=247, 319278 evaluated, 124221 expanded
[t=0.82676s, 31636 KB] Solution found!
[t=0.82676s, 31636 KB] Actual search time: 0.799279s
grasp left shot10 (1)
fill-shot shot10 ingredient1 left right dispenser1 (10)
pour-shot-to-clean-shaker shot10 ingredient1 shaker1 left l0 l1 (1)
clean-shot shot10 ingredient1 left right (1)
fill-shot shot10 ingredient2 left right dispenser2 (10)
grasp right shaker1 (1)
pour-shot-to-used-shaker shot10 ingredient2 shaker1 left l1 l2 (1)
leave left shot10 (1)
shake cocktail4 ingredient2 ingredient1 shaker1 right left (1)
pour-shaker-to-shot cocktail4 shot5 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail4 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot10 (1)
leave right shaker1 (1)
refill-shot shot10 ingredient2 left right dispenser2 (10)
pour-shot-to-clean-shaker shot10 ingredient2 shaker1 left l0 l1 (1)
clean-shot shot10 ingredient2 left right (1)
fill-shot shot10 ingredient1 left right dispenser1 (10)
grasp right shaker1 (1)
pour-shot-to-used-shaker shot10 ingredient1 shaker1 left l1 l2 (1)
leave left shot10 (1)
shake cocktail8 ingredient2 ingredient1 shaker1 right left (1)
pour-shaker-to-shot cocktail8 shot7 right shaker1 l2 l1 (1)
pour-shaker-to-shot cocktail8 shot9 right shaker1 l1 l0 (1)
empty-shaker right shaker1 cocktail8 l0 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot10 (1)
leave right shaker1 (1)
refill-shot shot10 ingredient1 left right dispenser1 (10)
pour-shot-to-clean-shaker shot10 ingredient1 shaker1 left l0 l1 (1)
clean-shot shot10 ingredient1 left right (1)
fill-shot shot10 ingredient2 left right dispenser2 (10)
grasp right shaker1 (1)
pour-shot-to-used-shaker shot10 ingredient2 shaker1 left l1 l2 (1)
leave left shot10 (1)
shake cocktail1 ingredient1 ingredient2 shaker1 right left (1)
pour-shaker-to-shot cocktail1 shot4 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail1 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot10 (1)
leave right shaker1 (1)
refill-shot shot10 ingredient2 left right dispenser2 (10)
pour-shot-to-clean-shaker shot10 ingredient2 shaker1 left l0 l1 (1)
clean-shot shot10 ingredient2 left right (1)
fill-shot shot10 ingredient3 left right dispenser3 (10)
grasp right shaker1 (1)
pour-shot-to-used-shaker shot10 ingredient3 shaker1 left l1 l2 (1)
leave left shot10 (1)
shake cocktail3 ingredient2 ingredient3 shaker1 right left (1)
pour-shaker-to-shot cocktail3 shot8 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail3 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot10 (1)
leave right shaker1 (1)
refill-shot shot10 ingredient3 left right dispenser3 (10)
pour-shot-to-clean-shaker shot10 ingredient3 shaker1 left l0 l1 (1)
clean-shot shot10 ingredient3 left right (1)
fill-shot shot10 ingredient2 left right dispenser2 (10)
grasp right shaker1 (1)
pour-shot-to-used-shaker shot10 ingredient2 shaker1 left l1 l2 (1)
leave left shot10 (1)
shake cocktail5 ingredient2 ingredient3 shaker1 right left (1)
pour-shaker-to-shot cocktail5 shot1 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail5 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot10 (1)
leave right shaker1 (1)
refill-shot shot10 ingredient2 left right dispenser2 (10)
pour-shot-to-clean-shaker shot10 ingredient2 shaker1 left l0 l1 (1)
clean-shot shot10 ingredient2 left right (1)
fill-shot shot10 ingredient3 left right dispenser3 (10)
grasp right shaker1 (1)
pour-shot-to-used-shaker shot10 ingredient3 shaker1 left l1 l2 (1)
leave left shot10 (1)
shake cocktail6 ingredient3 ingredient2 shaker1 right left (1)
pour-shaker-to-shot cocktail6 shot2 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail6 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot10 (1)
leave right shaker1 (1)
clean-shot shot10 ingredient3 left right (1)
fill-shot shot10 ingredient1 left right dispenser1 (10)
pour-shot-to-clean-shaker shot10 ingredient1 shaker1 left l0 l1 (1)
clean-shot shot10 ingredient1 left right (1)
fill-shot shot10 ingredient4 left right dispenser4 (10)
grasp right shaker1 (1)
pour-shot-to-used-shaker shot10 ingredient4 shaker1 left l1 l2 (1)
leave left shot10 (1)
shake cocktail2 ingredient1 ingredient4 shaker1 right left (1)
pour-shaker-to-shot cocktail2 shot6 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail2 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot10 (1)
leave right shaker1 (1)
refill-shot shot10 ingredient4 left right dispenser4 (10)
pour-shot-to-clean-shaker shot10 ingredient4 shaker1 left l0 l1 (1)
clean-shot shot10 ingredient4 left right (1)
fill-shot shot10 ingredient1 left right dispenser1 (10)
grasp right shaker1 (1)
pour-shot-to-used-shaker shot10 ingredient1 shaker1 left l1 l2 (1)
leave left shot10 (1)
shake cocktail7 ingredient4 ingredient1 shaker1 right left (1)
pour-shaker-to-shot cocktail7 shot3 right shaker1 l2 l1 (1)
[t=0.82676s, 31636 KB] Plan length: 103 step(s).
[t=0.82676s, 31636 KB] Plan cost: 247
[t=0.82676s, 31636 KB] Expanded 124222 state(s).
[t=0.82676s, 31636 KB] Reopened 0 state(s).
[t=0.82676s, 31636 KB] Evaluated 319278 state(s).
[t=0.82676s, 31636 KB] Evaluations: 319278
[t=0.82676s, 31636 KB] Generated 681715 state(s).
[t=0.82676s, 31636 KB] Dead ends: 0 state(s).
[t=0.82676s, 31636 KB] Number of registered states: 319278
[t=0.82676s, 31636 KB] Int hash set load factor: 319278/524288 = 0.608974
[t=0.82676s, 31636 KB] Int hash set resizes: 19
[t=0.82676s, 31636 KB] Search time: 0.799279s
[t=0.82676s, 31636 KB] Total time: 0.82676s
Solution found.
Peak memory: 31636 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Running validate.
INFO     validate stdin: None
INFO     validate time limit: None
INFO     validate memory limit: None
INFO     validate command line string: /home/henry/bin/validate domain.pddl problem.pddl sas_plan
Checking plan: sas_plan
Plan executed successfully - checking goal
Plan valid
Final value: 247 

Successful plans:
Value: 247
 sas_plan 247 

validate exit code: 0

INFO     Planner time: 1.12s
