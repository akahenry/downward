INFO     planner time limit: 1800s
INFO     planner memory limit: 2048 MB

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: 1799s
INFO     translator memory limit: 2048 MB
INFO     translator command line string: /home/henry/Documents/UFRGS/TCC/downward/.venv/bin/python /home/henry/Documents/UFRGS/TCC/downward/experiments/lab/data/main/code-fa850d1cb8d716322f299a4f9b64478019793ada_e5e41175/builds/release/bin/translate/translate.py domain.pddl problem.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.002s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.010s CPU, 0.001s wall-clock]
Generated 26 rules.
Computing model... [0.000s CPU, 0.006s wall-clock]
497 relevant atoms
440 auxiliary atoms
937 final queue length
1162 total queue pushes
Completing instantiation... [0.010s CPU, 0.006s wall-clock]
Instantiating: [0.020s CPU, 0.015s wall-clock]
Computing fact groups...
Finding invariants...
6 initial candidates
Finding invariants: [0.000s CPU, 0.001s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
16 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.001s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.000s wall-clock]
Translating task: [0.000s CPU, 0.005s wall-clock]
8 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
1 propositions removed
Detecting unreachable propositions: [0.010s CPU, 0.003s wall-clock]
Reordering and filtering variables...
17 of 17 variables necessary.
0 of 1 mutex groups necessary.
256 of 256 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.001s wall-clock]
Translator variables: 17
Translator derived variables: 0
Translator facts: 48
Translator goal facts: 8
Translator mutex groups: 0
Translator total mutex groups size: 0
Translator operators: 256
Translator axioms: 0
Translator task size: 857
Translator peak memory: 32372 KB
Writing output... [0.000s CPU, 0.001s wall-clock]
Done! [0.030s CPU, 0.028s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: 1799s
INFO     search memory limit: 2048 MB
INFO     search command line string: /home/henry/Documents/UFRGS/TCC/downward/experiments/lab/data/main/code-fa850d1cb8d716322f299a4f9b64478019793ada_e5e41175/builds/release/bin/downward --search 'eager_greedy([lsh(patterns=systematic(4), transform=adapt_costs(cost_type=NORMAL))])' --internal-plan-file sas_plan < output.sas
[t=0s, 45596 KB] reading input...
[t=0.00384115s, 45596 KB] done reading input!
[t=0.00384115s, 45860 KB] Generating patterns using: systematic pattern collection generator
[t=0.00384115s, 45860 KB] building causal graph...done! [t=0s]
[t=0.00384115s, 45860 KB] Found 32 SGA patterns.
[t=0.00384115s, 45860 KB] Found 172 interesting patterns.
[t=0.00384115s, 45860 KB] systematic pattern collection generator number of patterns: 172
[t=0.00384115s, 45860 KB] systematic pattern collection generator total PDB size: 16944
[t=0.00384115s, 45860 KB] systematic pattern collection generator computation time: 0s
[t=0.00384115s, 45860 KB] Computing PDBs for pattern collection...
[t=0.0198589s, 45992 KB] Done computing PDBs for pattern collection: 0.0160178s
[t=0.0238146s, 46640 KB] Building successor generator...done!
[t=0.0238146s, 46640 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0238146s, 46640 KB] time for successor generation creation: 0s
[t=0.0238146s, 46640 KB] Variables: 17
[t=0.0238146s, 46640 KB] FactPairs: 48
[t=0.0238146s, 46640 KB] Bytes per state: 4
[t=0.0238146s, 46640 KB] Conducting best first search without reopening closed nodes, (real) bound = 2147483647
[t=0.0238146s, 46640 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 32
[t=0.0238146s, 46640 KB] g=0, 1 evaluated, 0 expanded
[t=0.0238146s, 46640 KB] Initial heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 32
[t=0.0238146s, 46640 KB] pruning method: none
[t=0.0238146s, 46640 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 31
[t=0.0238146s, 46640 KB] g=1, 2 evaluated, 1 expanded
[t=0.0238146s, 46640 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 30
[t=0.0238146s, 46640 KB] g=1, 3 evaluated, 1 expanded
[t=0.0238146s, 46640 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 29
[t=0.0238146s, 46640 KB] g=2, 17 evaluated, 2 expanded
[t=0.0238146s, 46640 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 28
[t=0.0238146s, 46640 KB] g=3, 19 evaluated, 3 expanded
[t=0.0238146s, 46640 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 27
[t=0.0238146s, 46640 KB] g=4, 36 evaluated, 4 expanded
[t=0.0238146s, 46640 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 26
[t=0.0238146s, 46640 KB] g=4, 44 evaluated, 4 expanded
[t=0.0238146s, 46640 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 25
[t=0.0238146s, 46640 KB] g=5, 50 evaluated, 5 expanded
[t=0.0238146s, 46640 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 24
[t=0.0238146s, 46640 KB] g=6, 52 evaluated, 6 expanded
[t=0.0238146s, 46640 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 23
[t=0.0238146s, 46640 KB] g=7, 69 evaluated, 7 expanded
[t=0.0238146s, 46640 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 22
[t=0.0238146s, 46640 KB] g=7, 71 evaluated, 7 expanded
[t=0.0238146s, 46640 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 21
[t=0.0238146s, 46640 KB] g=8, 83 evaluated, 8 expanded
[t=0.0238146s, 46640 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 20
[t=0.0238146s, 46640 KB] g=9, 100 evaluated, 9 expanded
[t=0.0238146s, 46640 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 19
[t=0.0238146s, 46640 KB] g=10, 102 evaluated, 10 expanded
[t=0.0238146s, 46640 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 18
[t=0.0238146s, 46640 KB] g=11, 116 evaluated, 11 expanded
[t=0.0238146s, 46640 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 17
[t=0.0238146s, 46640 KB] g=12, 119 evaluated, 12 expanded
[t=0.0238146s, 46640 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 16
[t=0.0238146s, 46640 KB] g=13, 132 evaluated, 13 expanded
[t=0.0238146s, 46640 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 15
[t=0.0238146s, 46640 KB] g=14, 136 evaluated, 14 expanded
[t=0.0238146s, 46640 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 14
[t=0.0238146s, 46640 KB] g=15, 148 evaluated, 15 expanded
[t=0.0238146s, 46640 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 13
[t=0.0238146s, 46640 KB] g=16, 152 evaluated, 16 expanded
[t=0.0238146s, 46640 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 12
[t=0.0238146s, 46640 KB] g=17, 164 evaluated, 17 expanded
[t=0.0238146s, 46640 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 11
[t=0.0238146s, 46640 KB] g=18, 172 evaluated, 18 expanded
[t=0.0238146s, 46640 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 10
[t=0.0238146s, 46640 KB] g=19, 180 evaluated, 19 expanded
[t=0.0238146s, 46640 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 9
[t=0.0238146s, 46640 KB] g=20, 189 evaluated, 20 expanded
[t=0.0238146s, 46640 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 8
[t=0.0238146s, 46640 KB] g=21, 196 evaluated, 21 expanded
[t=0.0238146s, 46640 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 7
[t=0.0238146s, 46640 KB] g=22, 206 evaluated, 22 expanded
[t=0.0238146s, 46640 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 6
[t=0.0238146s, 46640 KB] g=23, 212 evaluated, 23 expanded
[t=0.0238146s, 46640 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 5
[t=0.0238146s, 46640 KB] g=24, 219 evaluated, 24 expanded
[t=0.0238146s, 46640 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 4
[t=0.0238146s, 46640 KB] g=25, 228 evaluated, 25 expanded
[t=0.0238146s, 46640 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 3
[t=0.0238146s, 46640 KB] g=26, 238 evaluated, 26 expanded
[t=0.0238146s, 46640 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 2
[t=0.0238146s, 46640 KB] g=27, 244 evaluated, 27 expanded
[t=0.0238146s, 46640 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 1
[t=0.0238146s, 46640 KB] g=28, 259 evaluated, 28 expanded
[t=0.0238146s, 46640 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=normal)): 0
[t=0.0238146s, 46640 KB] g=29, 260 evaluated, 29 expanded
[t=0.0238146s, 46640 KB] Solution found!
[t=0.0238146s, 46640 KB] Actual search time: 0s
up f0 f10 (1)
board f10 p3 (1)
board f10 p5 (1)
down f10 f9 (1)
board f9 p1 (1)
board f9 p4 (1)
down f9 f3 (1)
board f3 p7 (1)
depart f3 p1 (1)
down f3 f1 (1)
board f1 p2 (1)
up f1 f11 (1)
depart f11 p5 (1)
down f11 f2 (1)
board f2 p6 (1)
up f2 f11 (1)
depart f11 p6 (1)
down f11 f6 (1)
depart f6 p7 (1)
up f6 f12 (1)
depart f12 p3 (1)
down f12 f7 (1)
board f7 p0 (1)
down f7 f6 (1)
depart f6 p0 (1)
up f6 f13 (1)
depart f13 p4 (1)
up f13 f15 (1)
depart f15 p2 (1)
[t=0.0238146s, 46640 KB] Plan length: 29 step(s).
[t=0.0238146s, 46640 KB] Plan cost: 29
[t=0.0238146s, 46640 KB] Expanded 30 state(s).
[t=0.0238146s, 46640 KB] Reopened 0 state(s).
[t=0.0238146s, 46640 KB] Evaluated 260 state(s).
[t=0.0238146s, 46640 KB] Evaluations: 260
[t=0.0238146s, 46640 KB] Generated 465 state(s).
[t=0.0238146s, 46640 KB] Dead ends: 0 state(s).
[t=0.0238146s, 46640 KB] Number of registered states: 260
[t=0.0238146s, 46640 KB] Int hash set load factor: 260/512 = 0.507812
[t=0.0238146s, 46640 KB] Int hash set resizes: 9
[t=0.0238146s, 46640 KB] Search time: 0s
[t=0.0238146s, 46640 KB] Total time: 0.0238146s
Solution found.
Peak memory: 46640 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Running validate.
INFO     validate stdin: None
INFO     validate time limit: None
INFO     validate memory limit: None
INFO     validate command line string: /home/henry/bin/validate domain.pddl problem.pddl sas_plan
Checking plan: sas_plan
Plan executed successfully - checking goal
Plan valid
Final value: 29 

Successful plans:
Value: 29
 sas_plan 29 

validate exit code: 0

INFO     Planner time: 0.14s
