INFO     planner time limit: 1800s
INFO     planner memory limit: 2048 MB

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: 1799s
INFO     translator memory limit: 2048 MB
INFO     translator command line string: /home/henry/Documents/UFRGS/TCC/downward/.venv/bin/python /home/henry/Documents/UFRGS/TCC/downward/experiments/lab/data/main/code-5bb2ccb6957559b6969ffd7e29254c73f84d5e49_e5e41175/builds/release/bin/translate/translate.py domain.pddl problem.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.002s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.001s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.010s CPU, 0.003s wall-clock]
Preparing model... [0.000s CPU, 0.002s wall-clock]
Generated 115 rules.
Computing model... [0.030s CPU, 0.028s wall-clock]
2784 relevant atoms
2893 auxiliary atoms
5677 final queue length
9793 total queue pushes
Completing instantiation... [0.060s CPU, 0.058s wall-clock]
Instantiating: [0.100s CPU, 0.091s wall-clock]
Computing fact groups...
Finding invariants...
24 initial candidates
Finding invariants: [0.000s CPU, 0.006s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
292 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.001s wall-clock]
Computing fact groups: [0.000s CPU, 0.009s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.010s CPU, 0.003s wall-clock]
Translating task: [0.070s CPU, 0.066s wall-clock]
3276 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
3 propositions removed
Detecting unreachable propositions: [0.030s CPU, 0.030s wall-clock]
Reordering and filtering variables...
295 of 295 variables necessary.
14 of 17 mutex groups necessary.
1958 of 1958 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.020s CPU, 0.019s wall-clock]
Translator variables: 295
Translator derived variables: 0
Translator facts: 617
Translator goal facts: 12
Translator mutex groups: 14
Translator total mutex groups size: 42
Translator operators: 1958
Translator axioms: 0
Translator task size: 18764
Translator peak memory: 43512 KB
Writing output... [0.020s CPU, 0.013s wall-clock]
Done! [0.240s CPU, 0.234s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: 1799s
INFO     search memory limit: 2048 MB
INFO     search command line string: /home/henry/Documents/UFRGS/TCC/downward/experiments/lab/data/main/code-5bb2ccb6957559b6969ffd7e29254c73f84d5e49_e5e41175/builds/release/bin/downward --search 'eager_greedy([lsh(patterns=systematic(4), transform=adapt_costs(cost_type=ONE))])' --internal-plan-file sas_plan < output.sas
[t=0s, 10544 KB] reading input...
[t=0.01075s, 11388 KB] done reading input!
[t=0.0147386s, 11652 KB] Generating patterns using: systematic pattern collection generator
[t=0.0147386s, 11652 KB] building causal graph...done! [t=0s]
[t=0.0866864s, 36352 KB] Found 92116 SGA patterns.
[t=1.25803s, 37468 KB] Found 102920 interesting patterns.
[t=1.30595s, 37468 KB] systematic pattern collection generator number of patterns: 102920
[t=1.30595s, 37468 KB] systematic pattern collection generator total PDB size: 3835812
[t=1.31394s, 37468 KB] systematic pattern collection generator computation time: 1.29121s
[t=1.31394s, 37468 KB] Computing PDBs for pattern collection...
[t=50.0712s, 62308 KB] Done computing PDBs for pattern collection: 48.7572s
[t=55.5516s, 1291828 KB] Building successor generator...done!
[t=55.5516s, 1291828 KB] peak memory difference for successor generator creation: 0 KB
[t=55.5516s, 1291828 KB] time for successor generation creation: 0s
[t=55.5516s, 1291828 KB] Variables: 295
[t=55.5516s, 1291828 KB] FactPairs: 617
[t=55.5516s, 1291828 KB] Bytes per state: 40
[t=55.5516s, 1291828 KB] Conducting best first search without reopening closed nodes, (real) bound = 2147483647
[t=55.5596s, 1291828 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=one)): 45
[t=55.5596s, 1291828 KB] g=0, 1 evaluated, 0 expanded
[t=55.5596s, 1291828 KB] Initial heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=one)): 45
[t=55.5596s, 1291828 KB] pruning method: none
[t=55.6236s, 1291828 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=one)): 43
[t=55.6236s, 1291828 KB] g=1, 10 evaluated, 1 expanded
[t=55.8713s, 1291828 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=one)): 42
[t=55.8713s, 1291828 KB] g=11, 43 evaluated, 2 expanded
[t=59.0247s, 1291828 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=one)): 39
[t=59.0247s, 1291828 KB] g=28, 483 evaluated, 48 expanded
[t=59.6841s, 1291828 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=one)): 34
[t=59.6841s, 1291828 KB] g=28, 580 evaluated, 56 expanded
[t=64.932s, 1291828 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=one)): 33
[t=64.932s, 1291828 KB] g=31, 1346 evaluated, 184 expanded
[t=77.931s, 1291828 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=one)): 30
[t=77.931s, 1291828 KB] g=40, 3232 evaluated, 519 expanded
[t=143.925s, 1291828 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=one)): 27
[t=143.925s, 1291828 KB] g=72, 12775 evaluated, 1384 expanded
[t=253.008s, 1291828 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=one)): 23
[t=253.008s, 1291828 KB] g=123, 28036 evaluated, 2681 expanded
[t=267.63s, 1291828 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=one)): 20
[t=267.63s, 1291828 KB] g=134, 30088 evaluated, 2863 expanded
[t=367.009s, 1291828 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=one)): 19
[t=367.009s, 1291828 KB] g=164, 43898 evaluated, 4091 expanded
[t=367.053s, 1291828 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=one)): 14
[t=367.053s, 1291828 KB] g=165, 43904 evaluated, 4092 expanded
[t=543.091s, 1291828 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=one)): 12
[t=543.091s, 1291828 KB] g=196, 69547 evaluated, 6402 expanded
[t=678.588s, 1291828 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=one)): 10
[t=678.588s, 1291828 KB] g=227, 89649 evaluated, 8258 expanded
[t=774.232s, 1291828 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=one)): 8
[t=774.232s, 1291828 KB] g=258, 104302 evaluated, 9652 expanded
[t=792.011s, 1291828 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=one)): 7
[t=792.011s, 1291828 KB] g=277, 107078 evaluated, 9957 expanded
[t=807.317s, 1291828 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=one)): 6
[t=807.317s, 1291828 KB] g=289, 109449 evaluated, 10288 expanded
[t=808.112s, 1291828 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=one)): 4
[t=808.112s, 1291828 KB] g=292, 109564 evaluated, 10293 expanded
[t=935.835s, 1291828 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=one)): 3
[t=935.835s, 1291828 KB] g=308, 128074 evaluated, 15481 expanded
[t=941.625s, 1291828 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=one)): 2
[t=941.625s, 1291828 KB] g=322, 128896 evaluated, 15613 expanded
[t=941.717s, 1291828 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=one)): 1
[t=941.717s, 1291828 KB] g=323, 128909 evaluated, 15614 expanded
[t=941.833s, 1291828 KB] New best heuristic value for lsh(patterns=systematic(4),transform=adapt_costs(cost_type=one)): 0
[t=941.833s, 1291828 KB] g=324, 128926 evaluated, 15615 expanded
[t=941.833s, 1291828 KB] Solution found!
[t=941.833s, 1291828 KB] Actual search time: 886.273s
grasp left shot12 (1)
fill-shot shot12 ingredient4 left right dispenser4 (10)
grasp right shaker1 (1)
leave left shot12 (1)
grasp left shot13 (1)
leave right shaker1 (1)
fill-shot shot13 ingredient1 left right dispenser1 (10)
pour-shot-to-clean-shaker shot13 ingredient1 shaker1 left l0 l1 (1)
clean-shot shot13 ingredient1 left right (1)
fill-shot shot13 ingredient2 left right dispenser2 (10)
grasp right shaker1 (1)
pour-shot-to-used-shaker shot13 ingredient2 shaker1 left l1 l2 (1)
leave left shot13 (1)
shake cocktail7 ingredient1 ingredient2 shaker1 right left (1)
pour-shaker-to-shot cocktail7 shot11 right shaker1 l2 l1 (1)
pour-shaker-to-shot cocktail7 shot9 right shaker1 l1 l0 (1)
empty-shaker right shaker1 cocktail7 l0 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot13 (1)
leave right shaker1 (1)
refill-shot shot13 ingredient2 left right dispenser2 (10)
pour-shot-to-clean-shaker shot13 ingredient2 shaker1 left l0 l1 (1)
clean-shot shot13 ingredient2 left right (1)
fill-shot shot13 ingredient1 left right dispenser1 (10)
pour-shot-to-used-shaker shot13 ingredient1 shaker1 left l1 l2 (1)
grasp right shaker1 (1)
leave left shot13 (1)
shake cocktail6 ingredient2 ingredient1 shaker1 right left (1)
pour-shaker-to-shot cocktail6 shot6 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail6 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot13 (1)
leave right shaker1 (1)
refill-shot shot13 ingredient1 left right dispenser1 (10)
pour-shot-to-clean-shaker shot13 ingredient1 shaker1 left l0 l1 (1)
clean-shot shot13 ingredient1 left right (1)
fill-shot shot13 ingredient4 left right dispenser4 (10)
pour-shot-to-used-shaker shot13 ingredient4 shaker1 left l1 l2 (1)
grasp right shaker1 (1)
leave left shot13 (1)
shake cocktail2 ingredient4 ingredient1 shaker1 right left (1)
pour-shaker-to-shot cocktail2 shot7 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail2 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot13 (1)
leave right shaker1 (1)
refill-shot shot13 ingredient4 left right dispenser4 (10)
pour-shot-to-clean-shaker shot13 ingredient4 shaker1 left l0 l1 (1)
clean-shot shot13 ingredient4 left right (1)
fill-shot shot13 ingredient2 left right dispenser2 (10)
pour-shot-to-used-shaker shot13 ingredient2 shaker1 left l1 l2 (1)
grasp right shaker1 (1)
leave left shot13 (1)
shake cocktail8 ingredient2 ingredient4 shaker1 right left (1)
pour-shaker-to-shot cocktail8 shot2 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail8 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot13 (1)
leave right shaker1 (1)
refill-shot shot13 ingredient2 left right dispenser2 (10)
pour-shot-to-clean-shaker shot13 ingredient2 shaker1 left l0 l1 (1)
clean-shot shot13 ingredient2 left right (1)
fill-shot shot13 ingredient3 left right dispenser3 (10)
pour-shot-to-used-shaker shot13 ingredient3 shaker1 left l1 l2 (1)
leave left shot13 (1)
grasp left shaker1 (1)
shake cocktail10 ingredient3 ingredient2 shaker1 left right (1)
pour-shaker-to-shot cocktail10 shot8 left shaker1 l2 l1 (1)
empty-shaker left shaker1 cocktail10 l1 l0 (1)
clean-shaker left right shaker1 (1)
grasp right shot13 (1)
leave left shaker1 (1)
refill-shot shot13 ingredient3 right left dispenser3 (10)
pour-shot-to-clean-shaker shot13 ingredient3 shaker1 right l0 l1 (1)
clean-shot shot13 ingredient3 right left (1)
fill-shot shot13 ingredient2 right left dispenser2 (10)
pour-shot-to-used-shaker shot13 ingredient2 shaker1 right l1 l2 (1)
leave right shot13 (1)
grasp left shaker1 (1)
shake cocktail3 ingredient2 ingredient3 shaker1 left right (1)
pour-shaker-to-shot cocktail3 shot1 left shaker1 l2 l1 (1)
empty-shaker left shaker1 cocktail3 l1 l0 (1)
clean-shaker left right shaker1 (1)
grasp right shot13 (1)
leave left shaker1 (1)
refill-shot shot13 ingredient2 right left dispenser2 (10)
pour-shot-to-clean-shaker shot13 ingredient2 shaker1 right l0 l1 (1)
clean-shot shot13 ingredient2 right left (1)
fill-shot shot13 ingredient3 right left dispenser3 (10)
pour-shot-to-used-shaker shot13 ingredient3 shaker1 right l1 l2 (1)
leave right shot13 (1)
grasp left shaker1 (1)
shake cocktail4 ingredient2 ingredient3 shaker1 left right (1)
pour-shaker-to-shot cocktail4 shot5 left shaker1 l2 l1 (1)
empty-shaker left shaker1 cocktail4 l1 l0 (1)
clean-shaker left right shaker1 (1)
grasp right shot13 (1)
leave left shaker1 (1)
refill-shot shot13 ingredient3 right left dispenser3 (10)
pour-shot-to-clean-shaker shot13 ingredient3 shaker1 right l0 l1 (1)
clean-shot shot13 ingredient3 right left (1)
fill-shot shot13 ingredient2 right left dispenser2 (10)
pour-shot-to-used-shaker shot13 ingredient2 shaker1 right l1 l2 (1)
leave right shot13 (1)
grasp left shaker1 (1)
shake cocktail5 ingredient3 ingredient2 shaker1 left right (1)
pour-shaker-to-shot cocktail5 shot4 left shaker1 l2 l1 (1)
empty-shaker left shaker1 cocktail5 l1 l0 (1)
clean-shaker left right shaker1 (1)
grasp right shot13 (1)
leave left shaker1 (1)
refill-shot shot13 ingredient2 right left dispenser2 (10)
pour-shot-to-clean-shaker shot13 ingredient2 shaker1 right l0 l1 (1)
clean-shot shot13 ingredient2 right left (1)
fill-shot shot13 ingredient3 right left dispenser3 (10)
pour-shot-to-used-shaker shot13 ingredient3 shaker1 right l1 l2 (1)
leave right shot13 (1)
grasp left shaker1 (1)
shake cocktail1 ingredient2 ingredient3 shaker1 left right (1)
pour-shaker-to-shot cocktail1 shot3 left shaker1 l2 l1 (1)
empty-shaker left shaker1 cocktail1 l1 l0 (1)
clean-shaker left right shaker1 (1)
grasp right shot12 (1)
leave left shaker1 (1)
pour-shot-to-clean-shaker shot12 ingredient4 shaker1 right l0 l1 (1)
refill-shot shot12 ingredient4 right left dispenser4 (10)
leave right shot12 (1)
grasp left shot13 (1)
clean-shot shot13 ingredient3 left right (1)
fill-shot shot13 ingredient2 left right dispenser2 (10)
grasp right shaker1 (1)
pour-shot-to-used-shaker shot13 ingredient2 shaker1 left l1 l2 (1)
leave left shot13 (1)
shake cocktail9 ingredient2 ingredient4 shaker1 right left (1)
pour-shaker-to-shot cocktail9 shot10 right shaker1 l2 l1 (1)
[t=941.833s, 1291828 KB] Plan length: 135 step(s).
[t=941.833s, 1291828 KB] Plan cost: 324
[t=941.833s, 1291828 KB] Expanded 15616 state(s).
[t=941.833s, 1291828 KB] Reopened 0 state(s).
[t=941.833s, 1291828 KB] Evaluated 128926 state(s).
[t=941.833s, 1291828 KB] Evaluations: 128926
[t=941.833s, 1291828 KB] Generated 194928 state(s).
[t=941.833s, 1291828 KB] Dead ends: 0 state(s).
[t=941.833s, 1291828 KB] Number of registered states: 128926
[t=941.833s, 1291828 KB] Int hash set load factor: 128926/262144 = 0.491814
[t=941.833s, 1291828 KB] Int hash set resizes: 18
[t=941.833s, 1291828 KB] Search time: 886.281s
[t=941.833s, 1291828 KB] Total time: 941.833s
Solution found.
Peak memory: 1291828 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Running validate.
INFO     validate stdin: None
INFO     validate time limit: None
INFO     validate memory limit: None
INFO     validate command line string: /home/henry/bin/validate domain.pddl problem.pddl sas_plan
Checking plan: sas_plan
Plan executed successfully - checking goal
Plan valid
Final value: 324 

Successful plans:
Value: 324
 sas_plan 324 

validate exit code: 0

INFO     Planner time: 942.24s
