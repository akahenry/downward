INFO     planner time limit: 1800s
INFO     planner memory limit: 2048 MB

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: 1799s
INFO     translator memory limit: 2048 MB
INFO     translator command line string: /home/henry/Documents/UFRGS/TCC/downward/.venv/bin/python /home/henry/Documents/UFRGS/TCC/downward/experiments/lab/data/main/code-5bb2ccb6957559b6969ffd7e29254c73f84d5e49_e5e41175/builds/release/bin/translate/translate.py domain.pddl problem.pddl --sas-file output.sas
Parsing...
Parsing: [0.010s CPU, 0.002s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.001s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.003s wall-clock]
Preparing model... [0.000s CPU, 0.002s wall-clock]
Generated 115 rules.
Computing model... [0.020s CPU, 0.025s wall-clock]
2300 relevant atoms
2393 auxiliary atoms
4693 final queue length
8087 total queue pushes
Completing instantiation... [0.050s CPU, 0.048s wall-clock]
Instantiating: [0.070s CPU, 0.079s wall-clock]
Computing fact groups...
Finding invariants...
24 initial candidates
Finding invariants: [0.010s CPU, 0.008s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
238 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.010s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.002s wall-clock]
Translating task: [0.050s CPU, 0.054s wall-clock]
2672 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
3 propositions removed
Detecting unreachable propositions: [0.030s CPU, 0.027s wall-clock]
Reordering and filtering variables...
241 of 241 variables necessary.
12 of 15 mutex groups necessary.
1596 of 1596 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.020s CPU, 0.015s wall-clock]
Translator variables: 241
Translator derived variables: 0
Translator facts: 505
Translator goal facts: 10
Translator mutex groups: 12
Translator total mutex groups size: 36
Translator operators: 1596
Translator axioms: 0
Translator task size: 15302
Translator peak memory: 41328 KB
Writing output... [0.010s CPU, 0.010s wall-clock]
Done! [0.200s CPU, 0.201s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: 1799s
INFO     search memory limit: 2048 MB
INFO     search command line string: /home/henry/Documents/UFRGS/TCC/downward/experiments/lab/data/main/code-5bb2ccb6957559b6969ffd7e29254c73f84d5e49_e5e41175/builds/release/bin/downward --search 'eager_greedy([ff(transform=adapt_costs(cost_type=ONE))])' --internal-plan-file sas_plan < output.sas
[t=0s, 10544 KB] reading input...
[t=0.00616475s, 11224 KB] done reading input!
[t=0.0101701s, 11924 KB] Simplifying 5886 unary operators... done! [5018 unary operators]
[t=0.0101701s, 12132 KB] time to simplify: 0.00398733s
[t=0.0141574s, 12132 KB] Initializing additive heuristic...
[t=0.0141574s, 12132 KB] Initializing FF heuristic...
[t=0.0141574s, 12132 KB] Building successor generator...done!
[t=0.0141574s, 12132 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0141574s, 12132 KB] time for successor generation creation: 0s
[t=0.0141574s, 12132 KB] Variables: 241
[t=0.0141574s, 12132 KB] FactPairs: 505
[t=0.0141574s, 12132 KB] Bytes per state: 32
[t=0.0141574s, 12132 KB] Conducting best first search without reopening closed nodes, (real) bound = 2147483647
[t=0.0141574s, 12132 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 30
[t=0.0141574s, 12132 KB] g=0, 1 evaluated, 0 expanded
[t=0.0141574s, 12132 KB] Initial heuristic value for ff(transform=adapt_costs(cost_type=one)): 30
[t=0.0141574s, 12132 KB] pruning method: none
[t=0.0141574s, 12132 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 28
[t=0.0141574s, 12132 KB] g=1, 6 evaluated, 1 expanded
[t=0.0221625s, 12132 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 27
[t=0.0221625s, 12132 KB] g=13, 113 evaluated, 18 expanded
[t=0.0261529s, 12132 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 26
[t=0.0261529s, 12132 KB] g=23, 142 evaluated, 20 expanded
[t=0.0541534s, 12132 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 25
[t=0.0541534s, 12132 KB] g=36, 442 evaluated, 68 expanded
[t=27.5104s, 30792 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 24
[t=27.5104s, 30792 KB] g=47, 272647 evaluated, 62138 expanded
[t=27.5144s, 30792 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 23
[t=27.5144s, 30792 KB] g=49, 272663 evaluated, 62140 expanded
[t=140.569s, 103484 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 22
[t=140.569s, 103484 KB] g=78, 1387772 evaluated, 309799 expanded
[t=140.573s, 103484 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 21
[t=140.573s, 103484 KB] g=80, 1387788 evaluated, 309801 expanded
[t=235.017s, 171224 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 20
[t=235.017s, 171224 KB] g=110, 2334280 evaluated, 519975 expanded
[t=235.017s, 171224 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 19
[t=235.017s, 171224 KB] g=112, 2334297 evaluated, 519977 expanded
[t=304.636s, 209664 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 18
[t=304.636s, 209664 KB] g=142, 3046125 evaluated, 675276 expanded
[t=304.64s, 209664 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 17
[t=304.64s, 209664 KB] g=144, 3046141 evaluated, 675278 expanded
[t=341.971s, 295292 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 16
[t=341.971s, 295292 KB] g=174, 3438507 evaluated, 762496 expanded
[t=341.975s, 295292 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 15
[t=341.975s, 295292 KB] g=176, 3438523 evaluated, 762498 expanded
[t=371.016s, 295292 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 14
[t=371.016s, 295292 KB] g=206, 3750080 evaluated, 832255 expanded
[t=371.016s, 295292 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 13
[t=371.016s, 295292 KB] g=208, 3750096 evaluated, 832257 expanded
[t=392.565s, 295292 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 12
[t=392.565s, 295292 KB] g=217, 3987358 evaluated, 885858 expanded
[t=392.581s, 295292 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 11
[t=392.581s, 295292 KB] g=231, 3987527 evaluated, 885921 expanded
[t=392.593s, 295292 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 10
[t=392.593s, 295292 KB] g=246, 3987666 evaluated, 885937 expanded
[t=392.593s, 295292 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 9
[t=392.593s, 295292 KB] g=247, 3987669 evaluated, 885938 expanded
[t=401.325s, 298504 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 8
[t=401.325s, 298504 KB] g=280, 4086835 evaluated, 907844 expanded
[t=404.81s, 302536 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 7
[t=404.81s, 302536 KB] g=261, 4161726 evaluated, 925330 expanded
[t=404.81s, 302536 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 6
[t=404.81s, 302536 KB] g=262, 4161729 evaluated, 925331 expanded
[t=404.81s, 302536 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 5
[t=404.81s, 302536 KB] g=263, 4161745 evaluated, 925332 expanded
[t=404.81s, 302536 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 4
[t=404.81s, 302536 KB] g=264, 4161746 evaluated, 925333 expanded
[t=429.473s, 331812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 3
[t=429.473s, 331812 KB] g=297, 4713769 evaluated, 1099954 expanded
[t=429.473s, 331812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 1
[t=429.473s, 331812 KB] g=298, 4713781 evaluated, 1099955 expanded
[t=429.473s, 331812 KB] New best heuristic value for ff(transform=adapt_costs(cost_type=one)): 0
[t=429.473s, 331812 KB] g=299, 4713794 evaluated, 1099956 expanded
[t=429.473s, 331812 KB] Solution found!
[t=429.473s, 331812 KB] Actual search time: 429.459s
grasp right shot10 (1)
fill-shot shot10 ingredient1 right left dispenser1 (10)
pour-shot-to-clean-shaker shot10 ingredient1 shaker1 right l0 l1 (1)
refill-shot shot10 ingredient1 right left dispenser1 (10)
leave right shot10 (1)
grasp right shot11 (1)
fill-shot shot11 ingredient2 right left dispenser2 (10)
pour-shot-to-used-shaker shot11 ingredient2 shaker1 right l1 l2 (1)
clean-shot shot11 ingredient2 right left (1)
grasp left shaker1 (1)
leave right shot11 (1)
shake cocktail3 ingredient2 ingredient1 shaker1 left right (1)
pour-shaker-to-shot cocktail3 shot8 left shaker1 l2 l1 (1)
empty-shaker left shaker1 cocktail3 l1 l0 (1)
clean-shaker left right shaker1 (1)
grasp right shot11 (1)
leave left shaker1 (1)
fill-shot shot11 ingredient3 right left dispenser3 (10)
pour-shot-to-clean-shaker shot11 ingredient3 shaker1 right l0 l1 (1)
clean-shot shot11 ingredient3 right left (1)
fill-shot shot11 ingredient1 right left dispenser1 (10)
pour-shot-to-used-shaker shot11 ingredient1 shaker1 right l1 l2 (1)
clean-shot shot11 ingredient1 right left (1)
grasp left shaker1 (1)
leave right shot11 (1)
shake cocktail1 ingredient1 ingredient3 shaker1 left right (1)
pour-shaker-to-shot cocktail1 shot5 left shaker1 l2 l1 (1)
empty-shaker left shaker1 cocktail1 l1 l0 (1)
clean-shaker left right shaker1 (1)
grasp right shot11 (1)
leave left shaker1 (1)
fill-shot shot11 ingredient4 right left dispenser4 (10)
pour-shot-to-clean-shaker shot11 ingredient4 shaker1 right l0 l1 (1)
clean-shot shot11 ingredient4 right left (1)
fill-shot shot11 ingredient1 right left dispenser1 (10)
pour-shot-to-used-shaker shot11 ingredient1 shaker1 right l1 l2 (1)
clean-shot shot11 ingredient1 right left (1)
grasp left shaker1 (1)
leave right shot11 (1)
shake cocktail9 ingredient4 ingredient1 shaker1 left right (1)
pour-shaker-to-shot cocktail9 shot7 left shaker1 l2 l1 (1)
empty-shaker left shaker1 cocktail9 l1 l0 (1)
clean-shaker left right shaker1 (1)
grasp right shot11 (1)
leave left shaker1 (1)
fill-shot shot11 ingredient1 right left dispenser1 (10)
pour-shot-to-clean-shaker shot11 ingredient1 shaker1 right l0 l1 (1)
clean-shot shot11 ingredient1 right left (1)
fill-shot shot11 ingredient2 right left dispenser2 (10)
pour-shot-to-used-shaker shot11 ingredient2 shaker1 right l1 l2 (1)
clean-shot shot11 ingredient2 right left (1)
grasp left shaker1 (1)
leave right shot11 (1)
shake cocktail7 ingredient2 ingredient1 shaker1 left right (1)
pour-shaker-to-shot cocktail7 shot4 left shaker1 l2 l1 (1)
empty-shaker left shaker1 cocktail7 l1 l0 (1)
clean-shaker left right shaker1 (1)
grasp right shot11 (1)
leave left shaker1 (1)
fill-shot shot11 ingredient1 right left dispenser1 (10)
pour-shot-to-clean-shaker shot11 ingredient1 shaker1 right l0 l1 (1)
clean-shot shot11 ingredient1 right left (1)
fill-shot shot11 ingredient3 right left dispenser3 (10)
pour-shot-to-used-shaker shot11 ingredient3 shaker1 right l1 l2 (1)
clean-shot shot11 ingredient3 right left (1)
grasp left shaker1 (1)
leave right shot11 (1)
shake cocktail2 ingredient1 ingredient3 shaker1 left right (1)
pour-shaker-to-shot cocktail2 shot6 left shaker1 l2 l1 (1)
empty-shaker left shaker1 cocktail2 l1 l0 (1)
clean-shaker left right shaker1 (1)
grasp right shot11 (1)
leave left shaker1 (1)
fill-shot shot11 ingredient1 right left dispenser1 (10)
pour-shot-to-clean-shaker shot11 ingredient1 shaker1 right l0 l1 (1)
clean-shot shot11 ingredient1 right left (1)
fill-shot shot11 ingredient3 right left dispenser3 (10)
pour-shot-to-used-shaker shot11 ingredient3 shaker1 right l1 l2 (1)
clean-shot shot11 ingredient3 right left (1)
grasp left shaker1 (1)
leave right shot11 (1)
shake cocktail5 ingredient3 ingredient1 shaker1 left right (1)
pour-shaker-to-shot cocktail5 shot2 left shaker1 l2 l1 (1)
empty-shaker left shaker1 cocktail5 l1 l0 (1)
clean-shaker left right shaker1 (1)
grasp right shot11 (1)
leave left shaker1 (1)
fill-shot shot11 ingredient2 right left dispenser2 (10)
grasp left shot1 (1)
pour-shot-to-clean-shaker shot11 ingredient2 shaker1 right l0 l1 (1)
leave right shot11 (1)
grasp right shot3 (1)
leave left shot1 (1)
fill-shot shot3 ingredient3 right left dispenser3 (10)
pour-shot-to-used-shaker shot3 ingredient3 shaker1 right l1 l2 (1)
clean-shot shot3 ingredient3 right left (1)
grasp left shaker1 (1)
leave right shot3 (1)
shake cocktail8 ingredient2 ingredient3 shaker1 left right (1)
pour-shaker-to-shot cocktail8 shot1 left shaker1 l2 l1 (1)
empty-shaker left shaker1 cocktail8 l1 l0 (1)
clean-shaker left right shaker1 (1)
leave left shaker1 (1)
grasp right shot11 (1)
refill-shot shot11 ingredient2 right left dispenser2 (10)
pour-shot-to-clean-shaker shot11 ingredient2 shaker1 right l0 l1 (1)
clean-shot shot11 ingredient2 right left (1)
fill-shot shot11 ingredient4 right left dispenser4 (10)
grasp left shaker1 (1)
pour-shot-to-used-shaker shot11 ingredient4 shaker1 right l1 l2 (1)
leave right shot11 (1)
shake cocktail4 ingredient4 ingredient2 shaker1 left right (1)
pour-shaker-to-shot cocktail4 shot3 left shaker1 l2 l1 (1)
empty-shaker left shaker1 cocktail4 l1 l0 (1)
clean-shaker left right shaker1 (1)
leave left shaker1 (1)
grasp right shot11 (1)
refill-shot shot11 ingredient4 right left dispenser4 (10)
grasp left shot9 (1)
pour-shot-to-clean-shaker shot11 ingredient4 shaker1 right l0 l1 (1)
leave right shot11 (1)
fill-shot shot9 ingredient2 left right dispenser2 (10)
pour-shot-to-used-shaker shot9 ingredient2 shaker1 left l1 l2 (1)
clean-shot shot9 ingredient2 left right (1)
grasp right shaker1 (1)
leave left shot9 (1)
shake cocktail6 ingredient4 ingredient2 shaker1 right left (1)
pour-shaker-to-shot cocktail6 shot9 right shaker1 l2 l1 (1)
[t=429.473s, 331812 KB] Plan length: 128 step(s).
[t=429.473s, 331812 KB] Plan cost: 299
[t=429.473s, 331812 KB] Expanded 1099957 state(s).
[t=429.473s, 331812 KB] Reopened 0 state(s).
[t=429.473s, 331812 KB] Evaluated 4713795 state(s).
[t=429.473s, 331812 KB] Evaluations: 4713795
[t=429.473s, 331812 KB] Generated 7578453 state(s).
[t=429.473s, 331812 KB] Dead ends: 225900 state(s).
[t=429.473s, 331812 KB] Number of registered states: 4713795
[t=429.473s, 331812 KB] Int hash set load factor: 4713795/8388608 = 0.561928
[t=429.473s, 331812 KB] Int hash set resizes: 23
[t=429.473s, 331812 KB] Search time: 429.459s
[t=429.473s, 331812 KB] Total time: 429.473s
Solution found.
Peak memory: 331812 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Running validate.
INFO     validate stdin: None
INFO     validate time limit: None
INFO     validate memory limit: None
INFO     validate command line string: /home/henry/bin/validate domain.pddl problem.pddl sas_plan
Checking plan: sas_plan
Plan executed successfully - checking goal
Plan valid
Final value: 299 

Successful plans:
Value: 299
 sas_plan 299 

validate exit code: 0

INFO     Planner time: 429.75s
