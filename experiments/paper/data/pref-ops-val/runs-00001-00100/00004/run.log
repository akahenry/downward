INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: 1799.98s
INFO     translator memory limit: 4096 MB
INFO     translator command line string: /usr/bin/python3 /home/dmdoebber/downward-projects/downward/experiments/paper/data/pref-ops-val/code-11d6cc7f374e3fd7216f4422aa97b8db8c68d3c3_e5e41175/builds/release/bin/translate/translate.py domain.pddl problem.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.003s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.010s CPU, 0.003s wall-clock]
Preparing model... [0.000s CPU, 0.001s wall-clock]
Generated 115 rules.
Computing model... [0.020s CPU, 0.021s wall-clock]
2025 relevant atoms
2105 auxiliary atoms
4130 final queue length
7122 total queue pushes
Completing instantiation... [0.040s CPU, 0.039s wall-clock]
Instantiating: [0.070s CPU, 0.066s wall-clock]
Computing fact groups...
Finding invariants...
24 initial candidates
Finding invariants: [0.010s CPU, 0.007s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
207 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.009s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.002s wall-clock]
Translating task: [0.050s CPU, 0.056s wall-clock]
2326 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
3 propositions removed
Detecting unreachable propositions: [0.030s CPU, 0.022s wall-clock]
Reordering and filtering variables...
210 of 210 variables necessary.
11 of 14 mutex groups necessary.
1390 of 1390 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.010s CPU, 0.014s wall-clock]
Translator variables: 210
Translator derived variables: 0
Translator facts: 441
Translator goal facts: 9
Translator mutex groups: 11
Translator total mutex groups size: 33
Translator operators: 1390
Translator axioms: 0
Translator task size: 13333
Translator peak memory: 37772 KB
Writing output... [0.010s CPU, 0.009s wall-clock]
Done! [0.180s CPU, 0.181s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: 1799.77s
INFO     search memory limit: 4096 MB
INFO     search command line string: /home/dmdoebber/downward-projects/downward/experiments/paper/data/pref-ops-val/code-11d6cc7f374e3fd7216f4422aa97b8db8c68d3c3_e5e41175/builds/release/bin/downward --evaluator 'eval=ff()' --search 'eager_greedy([lsh(patterns=systematic(4), op_order=default, res_order=default, transform=adapt_costs(cost_type=ONE))],  preferred=[eval])' --internal-plan-file sas_plan < output.sas
[t=0s, 46116 KB] reading input...
[t=0.00613627s, 46636 KB] done reading input!
[t=0.00613627s, 47312 KB] Simplifying 5146 unary operators... done! [4354 unary operators]
[t=0.0101368s, 47708 KB] time to simplify: 0.00400054s
[t=0.0101368s, 47708 KB] Initializing additive heuristic...
[t=0.0101368s, 47708 KB] Initializing FF heuristic...
[t=0.0101368s, 47708 KB] stop search of patterns: 3355443KB
[t=0.0101368s, 47708 KB] Generating patterns using the systematic generator...
[t=0.0101368s, 47708 KB] building causal graph...done! [t=0s]
[t=0.0580744s, 60132 KB] Found 47793 SGA patterns.
[t=0.883018s, 60624 KB] Found 52517 interesting patterns.
[t=0.887033s, 60624 KB] [9, 67, 1862, 50579]
[t=0.898903s, 60624 KB] Systematic generator number of patterns: 228
[t=0.898903s, 60624 KB] Systematic generator total PDB size: 4864
[t=0.898903s, 60624 KB] Systematic generator computation time: 0.888766s
[t=0.898903s, 60624 KB] Computing PDBs for pattern collection...
[t=0.954766s, 60624 KB] Done computing PDBs for pattern collection: 0.0558629s
[t=0.962768s, 60624 KB] Operators: 1390
[t=0.962768s, 60624 KB] Restrictions: 228
[t=0.962768s, 60624 KB] Mean mentions: 59
[t=0.962768s, 60624 KB] Mean operators: 360
[t=0.962768s, 60624 KB] Building successor generator...done!
[t=0.962768s, 60624 KB] peak memory difference for successor generator creation: 0 KB
[t=0.962768s, 60624 KB] time for successor generation creation: 0s
[t=0.962768s, 60624 KB] Variables: 210
[t=0.962768s, 60624 KB] FactPairs: 441
[t=0.962768s, 60624 KB] Bytes per state: 28
[t=0.962768s, 60624 KB] Conducting best first search without reopening closed nodes, (real) bound = 2147483647
[t=0.962768s, 60624 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 20
[t=0.962768s, 60624 KB] g=0, 1 evaluated, 0 expanded
[t=0.962768s, 60624 KB] Initial heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 20
[t=0.962768s, 60624 KB] pruning method: none
[t=0.962768s, 60624 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 19
[t=0.962768s, 60624 KB] g=11, 78 evaluated, 6 expanded
[t=0.966761s, 60624 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 18
[t=0.966761s, 60624 KB] g=24, 243 evaluated, 35 expanded
[t=0.966761s, 60624 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 17
[t=0.966761s, 60624 KB] g=26, 295 evaluated, 43 expanded
[t=0.966761s, 60624 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 16
[t=0.966761s, 60624 KB] g=37, 309 evaluated, 45 expanded
[t=1.02674s, 60624 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 15
[t=1.02674s, 60624 KB] g=56, 5130 evaluated, 955 expanded
[t=1.02674s, 60624 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 14
[t=1.02674s, 60624 KB] g=67, 5245 evaluated, 972 expanded
[t=1.1267s, 60624 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 13
[t=1.1267s, 60624 KB] g=84, 14326 evaluated, 2539 expanded
[t=1.19469s, 60624 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 12
[t=1.19469s, 60624 KB] g=100, 19713 evaluated, 3687 expanded
[t=1.19868s, 60624 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 11
[t=1.19868s, 60624 KB] g=104, 19885 evaluated, 3712 expanded
[t=1.25466s, 60624 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 10
[t=1.25466s, 60624 KB] g=139, 24646 evaluated, 4670 expanded
[t=1.25466s, 60624 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 9
[t=1.25466s, 60624 KB] g=140, 24663 evaluated, 4671 expanded
[t=1.29066s, 60624 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 7
[t=1.29465s, 60624 KB] g=175, 27809 evaluated, 5340 expanded
[t=1.29465s, 60624 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 6
[t=1.29465s, 60624 KB] g=176, 27826 evaluated, 5341 expanded
[t=1.37862s, 60624 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 5
[t=1.37862s, 60624 KB] g=206, 34576 evaluated, 6885 expanded
[t=1.37862s, 60624 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 4
[t=1.37862s, 60624 KB] g=207, 34590 evaluated, 6886 expanded
[t=1.4746s, 60624 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 3
[t=1.4746s, 60624 KB] g=242, 42693 evaluated, 8800 expanded
[t=1.4746s, 60624 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 2
[t=1.4746s, 60624 KB] g=243, 42707 evaluated, 8801 expanded
[t=1.53858s, 60624 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 1
[t=1.53858s, 60624 KB] g=278, 48446 evaluated, 10106 expanded
[t=1.53858s, 60624 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 0
[t=1.53858s, 60624 KB] g=279, 48459 evaluated, 10107 expanded
[t=1.53858s, 60624 KB] Solution found!
[t=1.53858s, 60624 KB] Actual search time: 0.575809s
grasp left shot9 (1)
fill-shot shot9 ingredient2 left right dispenser2 (10)
leave left shot9 (1)
grasp left shot10 (1)
fill-shot shot10 ingredient3 left right dispenser3 (10)
pour-shot-to-clean-shaker shot10 ingredient3 shaker1 left l0 l1 (1)
grasp right shot9 (1)
pour-shot-to-used-shaker shot9 ingredient2 shaker1 right l1 l2 (1)
leave left shot10 (1)
refill-shot shot9 ingredient2 right left dispenser2 (10)
grasp left shaker1 (1)
leave right shot9 (1)
shake cocktail3 ingredient3 ingredient2 shaker1 left right (1)
pour-shaker-to-shot cocktail3 shot7 left shaker1 l2 l1 (1)
empty-shaker left shaker1 cocktail3 l1 l0 (1)
clean-shaker left right shaker1 (1)
leave left shaker1 (1)
grasp left shot10 (1)
refill-shot shot10 ingredient3 left right dispenser3 (10)
pour-shot-to-clean-shaker shot10 ingredient3 shaker1 left l0 l1 (1)
clean-shot shot10 ingredient3 left right (1)
fill-shot shot10 ingredient1 left right dispenser1 (10)
pour-shot-to-used-shaker shot10 ingredient1 shaker1 left l1 l2 (1)
grasp right shaker1 (1)
leave left shot10 (1)
shake cocktail2 ingredient1 ingredient3 shaker1 right left (1)
pour-shaker-to-shot cocktail2 shot4 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail2 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot10 (1)
leave right shaker1 (1)
clean-shot shot10 ingredient1 left right (1)
fill-shot shot10 ingredient3 left right dispenser3 (10)
pour-shot-to-clean-shaker shot10 ingredient3 shaker1 left l0 l1 (1)
clean-shot shot10 ingredient3 left right (1)
fill-shot shot10 ingredient1 left right dispenser1 (10)
pour-shot-to-used-shaker shot10 ingredient1 shaker1 left l1 l2 (1)
grasp right shaker1 (1)
leave left shot10 (1)
shake cocktail1 ingredient1 ingredient3 shaker1 right left (1)
pour-shaker-to-shot cocktail1 shot5 right shaker1 l2 l1 (1)
grasp left shot10 (1)
leave right shaker1 (1)
clean-shot shot10 ingredient1 left right (1)
fill-shot shot10 ingredient3 left right dispenser3 (10)
grasp right shaker1 (1)
leave left shot10 (1)
empty-shaker right shaker1 cocktail1 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot10 (1)
pour-shot-to-clean-shaker shot10 ingredient3 shaker1 left l0 l1 (1)
leave right shaker1 (1)
clean-shot shot10 ingredient3 left right (1)
fill-shot shot10 ingredient1 left right dispenser1 (10)
grasp right shaker1 (1)
pour-shot-to-used-shaker shot10 ingredient1 shaker1 left l1 l2 (1)
leave left shot10 (1)
shake cocktail8 ingredient1 ingredient3 shaker1 right left (1)
pour-shaker-to-shot cocktail8 shot8 right shaker1 l2 l1 (1)
grasp left shot10 (1)
leave right shaker1 (1)
clean-shot shot10 ingredient1 left right (1)
fill-shot shot10 ingredient3 left right dispenser3 (10)
grasp right shaker1 (1)
leave left shot10 (1)
empty-shaker right shaker1 cocktail8 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot10 (1)
pour-shot-to-clean-shaker shot10 ingredient3 shaker1 left l0 l1 (1)
leave right shaker1 (1)
clean-shot shot10 ingredient3 left right (1)
fill-shot shot10 ingredient4 left right dispenser4 (10)
grasp right shaker1 (1)
pour-shot-to-used-shaker shot10 ingredient4 shaker1 left l1 l2 (1)
leave left shot10 (1)
shake cocktail4 ingredient3 ingredient4 shaker1 right left (1)
pour-shaker-to-shot cocktail4 shot6 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail4 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot10 (1)
leave right shaker1 (1)
refill-shot shot10 ingredient4 left right dispenser4 (10)
pour-shot-to-clean-shaker shot10 ingredient4 shaker1 left l0 l1 (1)
clean-shot shot10 ingredient4 left right (1)
fill-shot shot10 ingredient3 left right dispenser3 (10)
grasp right shaker1 (1)
pour-shot-to-used-shaker shot10 ingredient3 shaker1 left l1 l2 (1)
leave left shot10 (1)
shake cocktail7 ingredient3 ingredient4 shaker1 right left (1)
pour-shaker-to-shot cocktail7 shot2 right shaker1 l2 l1 (1)
grasp left shot10 (1)
leave right shaker1 (1)
clean-shot shot10 ingredient3 left right (1)
fill-shot shot10 ingredient2 left right dispenser2 (10)
grasp right shaker1 (1)
leave left shot10 (1)
empty-shaker right shaker1 cocktail7 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot10 (1)
pour-shot-to-clean-shaker shot10 ingredient2 shaker1 left l0 l1 (1)
leave right shaker1 (1)
clean-shot shot10 ingredient2 left right (1)
fill-shot shot10 ingredient3 left right dispenser3 (10)
grasp right shaker1 (1)
pour-shot-to-used-shaker shot10 ingredient3 shaker1 left l1 l2 (1)
leave left shot10 (1)
shake cocktail6 ingredient2 ingredient3 shaker1 right left (1)
pour-shaker-to-shot cocktail6 shot3 right shaker1 l2 l1 (1)
grasp left shot10 (1)
leave right shaker1 (1)
clean-shot shot10 ingredient3 left right (1)
fill-shot shot10 ingredient2 left right dispenser2 (10)
grasp right shaker1 (1)
leave left shot10 (1)
empty-shaker right shaker1 cocktail6 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot10 (1)
pour-shot-to-clean-shaker shot10 ingredient2 shaker1 left l0 l1 (1)
leave right shaker1 (1)
clean-shot shot10 ingredient2 left right (1)
fill-shot shot10 ingredient4 left right dispenser4 (10)
grasp right shaker1 (1)
pour-shot-to-used-shaker shot10 ingredient4 shaker1 left l1 l2 (1)
leave left shot10 (1)
shake cocktail5 ingredient2 ingredient4 shaker1 right left (1)
pour-shaker-to-shot cocktail5 shot1 right shaker1 l2 l1 (1)
[t=1.53858s, 60624 KB] Plan length: 126 step(s).
[t=1.53858s, 60624 KB] Plan cost: 279
[t=1.53858s, 60624 KB] Expanded 10108 state(s).
[t=1.53858s, 60624 KB] Reopened 0 state(s).
[t=1.53858s, 60624 KB] Evaluated 48459 state(s).
[t=1.53858s, 60624 KB] Evaluations: 58566
[t=1.53858s, 60624 KB] Generated 76403 state(s).
[t=1.53858s, 60624 KB] Dead ends: 0 state(s).
[t=1.53858s, 60624 KB] Number of registered states: 48459
[t=1.53858s, 60624 KB] Int hash set load factor: 48459/65536 = 0.739426
[t=1.53858s, 60624 KB] Int hash set resizes: 16
[t=1.53858s, 60624 KB] Search time: 0.575809s
[t=1.53858s, 60624 KB] Total time: 1.53858s
Solution found.
Peak memory: 60624 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Running validate.
INFO     validate stdin: None
INFO     validate time limit: None
INFO     validate memory limit: None
INFO     validate command line string: validate domain.pddl problem.pddl sas_plan
Checking plan: sas_plan
Plan executed successfully - checking goal
Plan valid
Final value: 279 

Successful plans:
Value: 279
 sas_plan 279 

validate exit code: 0

