INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: 1799.99s
INFO     translator memory limit: 4096 MB
INFO     translator command line string: /usr/bin/python3 /home/dmdoebber/downward-projects/downward/experiments/paper/data/pref-ops-val/code-11d6cc7f374e3fd7216f4422aa97b8db8c68d3c3_e5e41175/builds/release/bin/translate/translate.py domain.pddl problem.pddl --sas-file output.sas
Parsing...
Parsing: [0.050s CPU, 0.045s wall-clock]
Normalizing task... [0.000s CPU, 0.003s wall-clock]
Instantiating...
Generating Datalog program... [0.010s CPU, 0.016s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.100s CPU, 0.092s wall-clock]
Generated 23 rules.
Computing model... [0.230s CPU, 0.229s wall-clock]
19551 relevant atoms
34624 auxiliary atoms
54175 final queue length
63246 total queue pushes
Completing instantiation... [0.160s CPU, 0.158s wall-clock]
Instantiating: [0.510s CPU, 0.509s wall-clock]
Computing fact groups...
Finding invariants...
9 initial candidates
Finding invariants: [0.000s CPU, 0.004s wall-clock]
Checking invariant weight... [0.000s CPU, 0.004s wall-clock]
Instantiating groups... [0.010s CPU, 0.003s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
0 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.012s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.010s CPU, 0.006s wall-clock]
Translating task: [0.130s CPU, 0.135s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
12 propositions removed
Detecting unreachable propositions: [0.050s CPU, 0.047s wall-clock]
Reordering and filtering variables...
12 of 12 variables necessary.
0 of 12 mutex groups necessary.
4772 of 4772 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.020s CPU, 0.014s wall-clock]
Translator variables: 12
Translator derived variables: 0
Translator facts: 285
Translator goal facts: 10
Translator mutex groups: 0
Translator total mutex groups size: 0
Translator operators: 4772
Translator axioms: 0
Translator task size: 23967
Translator peak memory: 58000 KB
Writing output... [0.020s CPU, 0.018s wall-clock]
Done! [0.790s CPU, 0.793s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: 1799.16s
INFO     search memory limit: 4096 MB
INFO     search command line string: /home/dmdoebber/downward-projects/downward/experiments/paper/data/pref-ops-val/code-11d6cc7f374e3fd7216f4422aa97b8db8c68d3c3_e5e41175/builds/release/bin/downward --evaluator 'eval=ff()' --search 'eager_greedy([lsh(patterns=systematic(4), op_order=default, res_order=default, transform=adapt_costs(cost_type=ONE))],  preferred=[eval])' --internal-plan-file sas_plan < output.sas
[t=0s, 46116 KB] reading input...
[t=0.0119791s, 47348 KB] done reading input!
[t=0.0130708s, 48156 KB] Simplifying 9344 unary operators... done! [9344 unary operators]
[t=0.0170292s, 49080 KB] time to simplify: 0.0039584s
[t=0.0173128s, 49080 KB] Initializing additive heuristic...
[t=0.0174337s, 49080 KB] Initializing FF heuristic...
[t=0.0174454s, 49080 KB] stop search of patterns: 3355443KB
[t=0.0174911s, 49080 KB] Generating patterns using the systematic generator...
[t=0.017543s, 49080 KB] building causal graph...done! [t=1.2143e-05s]
[t=0.018032s, 49080 KB] Found 30 SGA patterns.
[t=0.0199006s, 49080 KB] Found 240 interesting patterns.
[t=0.0202196s, 49080 KB] [10, 10, 55, 165]
[t=0.0202375s, 49080 KB] Systematic generator number of patterns: 60
[t=0.0202887s, 49080 KB] Systematic generator total PDB size: 1070850
[t=0.0203009s, 49080 KB] Systematic generator computation time: 0.00274637s
[t=0.0203124s, 49080 KB] Computing PDBs for pattern collection...
[t=0.36784s, 53828 KB] Done computing PDBs for pattern collection: 0.347528s
[t=0.37184s, 55528 KB] Operators: 4772
[t=0.37184s, 55528 KB] Restrictions: 60
[t=0.37184s, 55528 KB] Mean mentions: 48
[t=0.37184s, 55528 KB] Mean operators: 3848
[t=0.37184s, 55528 KB] Building successor generator...done!
[t=0.37184s, 55984 KB] peak memory difference for successor generator creation: 456 KB
[t=0.37184s, 55984 KB] time for successor generation creation: 0s
[t=0.37184s, 55984 KB] Variables: 12
[t=0.37184s, 55984 KB] FactPairs: 285
[t=0.37184s, 55984 KB] Bytes per state: 8
[t=0.37184s, 55984 KB] Conducting best first search without reopening closed nodes, (real) bound = 2147483647
[t=0.37184s, 55984 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 31
[t=0.37184s, 55984 KB] g=0, 1 evaluated, 0 expanded
[t=0.37184s, 55984 KB] Initial heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 31
[t=0.37184s, 55984 KB] pruning method: none
[t=0.37184s, 55984 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 30
[t=0.37184s, 55984 KB] g=1, 2 evaluated, 1 expanded
[t=0.37184s, 55984 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 29
[t=0.37184s, 55984 KB] g=2, 3 evaluated, 2 expanded
[t=0.37184s, 55984 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 28
[t=0.37184s, 55984 KB] g=3, 14 evaluated, 3 expanded
[t=0.37184s, 55984 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 27
[t=0.37184s, 55984 KB] g=4, 16 evaluated, 4 expanded
[t=0.37184s, 55984 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 26
[t=0.37184s, 55984 KB] g=5, 23 evaluated, 5 expanded
[t=0.37584s, 55984 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 25
[t=0.37584s, 55984 KB] g=7, 30 evaluated, 7 expanded
[t=0.37584s, 55984 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 24
[t=0.37584s, 55984 KB] g=8, 35 evaluated, 8 expanded
[t=0.37584s, 55984 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 23
[t=0.37584s, 55984 KB] g=9, 38 evaluated, 9 expanded
[t=0.37584s, 55984 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 22
[t=0.37584s, 55984 KB] g=10, 42 evaluated, 10 expanded
[t=0.37584s, 55984 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 21
[t=0.37584s, 55984 KB] g=11, 55 evaluated, 11 expanded
[t=0.37584s, 55984 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 20
[t=0.37584s, 55984 KB] g=12, 71 evaluated, 12 expanded
[t=0.37584s, 55984 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 19
[t=0.37584s, 55984 KB] g=13, 74 evaluated, 13 expanded
[t=0.37584s, 55984 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 18
[t=0.37584s, 55984 KB] g=14, 83 evaluated, 14 expanded
[t=0.37584s, 55984 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 17
[t=0.37584s, 55984 KB] g=15, 93 evaluated, 15 expanded
[t=0.37584s, 55984 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 16
[t=0.37584s, 55984 KB] g=16, 106 evaluated, 16 expanded
[t=0.37584s, 55984 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 15
[t=0.37584s, 55984 KB] g=17, 119 evaluated, 17 expanded
[t=0.37584s, 55984 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 14
[t=0.37584s, 55984 KB] g=18, 130 evaluated, 18 expanded
[t=0.37584s, 55984 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 13
[t=0.37584s, 55984 KB] g=19, 142 evaluated, 19 expanded
[t=0.37584s, 55984 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 12
[t=0.37584s, 55984 KB] g=21, 154 evaluated, 21 expanded
[t=0.37584s, 55984 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 11
[t=0.37584s, 55984 KB] g=22, 176 evaluated, 22 expanded
[t=0.37584s, 55984 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 10
[t=0.37584s, 55984 KB] g=23, 216 evaluated, 25 expanded
[t=0.37584s, 55984 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 9
[t=0.37584s, 55984 KB] g=24, 253 evaluated, 28 expanded
[t=0.37584s, 55984 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 8
[t=0.37584s, 55984 KB] g=27, 282 evaluated, 31 expanded
[t=0.37584s, 55984 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 7
[t=0.37584s, 55984 KB] g=28, 320 evaluated, 35 expanded
[t=0.37584s, 55984 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 6
[t=0.37584s, 55984 KB] g=29, 326 evaluated, 36 expanded
[t=0.37584s, 55984 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 5
[t=0.37584s, 55984 KB] g=30, 332 evaluated, 37 expanded
[t=0.37584s, 55984 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 4
[t=0.37584s, 55984 KB] g=31, 336 evaluated, 38 expanded
[t=0.37584s, 55984 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 3
[t=0.37584s, 55984 KB] g=32, 339 evaluated, 39 expanded
[t=0.37984s, 55984 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 2
[t=0.37984s, 55984 KB] g=33, 772 evaluated, 147 expanded
[t=1.89578s, 64944 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 1
[t=1.89578s, 64944 KB] g=34, 220457 evaluated, 40922 expanded
[t=1.89578s, 64944 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 0
[t=1.89578s, 64944 KB] g=35, 220460 evaluated, 40923 expanded
[t=1.89578s, 64944 KB] Solution found!
[t=1.89578s, 64944 KB] Actual search time: 1.52394s
drive t0 l9 l3 level155 level10 level165 (1)
drive t0 l3 l0 level153 level2 level155 (1)
load p5 t0 l0 (1)
drive t0 l0 l2 level140 level13 level153 (1)
load p2 t0 l2 (1)
drive t0 l2 l8 level120 level20 level140 (1)
load p7 t0 l8 (1)
load p6 t0 l8 (1)
drive t0 l8 l2 level100 level20 level120 (1)
drive t0 l2 l6 level88 level12 level100 (1)
unload p6 t0 l6 (1)
drive t0 l6 l5 level66 level22 level88 (1)
drive t0 l5 l4 level63 level3 level66 (1)
load p9 t0 l4 (1)
unload p7 t0 l4 (1)
load p4 t0 l4 (1)
load p3 t0 l4 (1)
load p1 t0 l4 (1)
drive t0 l4 l5 level60 level3 level63 (1)
unload p2 t0 l5 (1)
unload p1 t0 l5 (1)
drive t0 l5 l3 level48 level12 level60 (1)
load p8 t0 l3 (1)
unload p4 t0 l3 (1)
load p0 t0 l3 (1)
drive t0 l3 l7 level37 level11 level48 (1)
unload p5 t0 l7 (1)
unload p3 t0 l7 (1)
unload p0 t0 l7 (1)
drive t0 l7 l1 level19 level18 level37 (1)
unload p8 t0 l1 (1)
drive t0 l1 l0 level12 level7 level19 (1)
drive t0 l0 l3 level10 level2 level12 (1)
drive t0 l3 l9 level0 level10 level10 (1)
unload p9 t0 l9 (1)
[t=1.89578s, 64944 KB] Plan length: 35 step(s).
[t=1.89578s, 64944 KB] Plan cost: 35
[t=1.89578s, 64944 KB] Expanded 40924 state(s).
[t=1.89578s, 64944 KB] Reopened 0 state(s).
[t=1.89578s, 64944 KB] Evaluated 220460 state(s).
[t=1.89578s, 64944 KB] Evaluations: 261383
[t=1.89578s, 64944 KB] Generated 320985 state(s).
[t=1.89578s, 64944 KB] Dead ends: 79493 state(s).
[t=1.89578s, 64944 KB] Number of registered states: 220460
[t=1.89578s, 64944 KB] Int hash set load factor: 220460/262144 = 0.840988
[t=1.89578s, 64944 KB] Int hash set resizes: 18
[t=1.89578s, 64944 KB] Search time: 1.52394s
[t=1.89578s, 64944 KB] Total time: 1.89578s
Solution found.
Peak memory: 64944 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Running validate.
INFO     validate stdin: None
INFO     validate time limit: None
INFO     validate memory limit: None
INFO     validate command line string: validate domain.pddl problem.pddl sas_plan
Checking plan: sas_plan
Plan executed successfully - checking goal
Plan valid
Final value: 35 

Successful plans:
Value: 35
 sas_plan 35 

validate exit code: 0

