INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: 1799.99s
INFO     translator memory limit: 4096 MB
INFO     translator command line string: /usr/bin/python3 /home/dmdoebber/downward-projects/downward/experiments/paper/data/pref-ops-val/code-11d6cc7f374e3fd7216f4422aa97b8db8c68d3c3_e5e41175/builds/release/bin/translate/translate.py domain.pddl problem.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.002s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.001s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.010s CPU, 0.003s wall-clock]
Preparing model... [0.000s CPU, 0.002s wall-clock]
Generated 115 rules.
Computing model... [0.030s CPU, 0.033s wall-clock]
3296 relevant atoms
3425 auxiliary atoms
6721 final queue length
11595 total queue pushes
Completing instantiation... [0.070s CPU, 0.068s wall-clock]
Instantiating: [0.110s CPU, 0.107s wall-clock]
Computing fact groups...
Finding invariants...
24 initial candidates
Finding invariants: [0.010s CPU, 0.007s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
350 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.001s wall-clock]
Computing fact groups: [0.010s CPU, 0.010s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.010s CPU, 0.004s wall-clock]
Translating task: [0.080s CPU, 0.082s wall-clock]
3920 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
3 propositions removed
Detecting unreachable propositions: [0.050s CPU, 0.045s wall-clock]
Reordering and filtering variables...
353 of 353 variables necessary.
16 of 19 mutex groups necessary.
2344 of 2344 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.030s CPU, 0.023s wall-clock]
Translator variables: 353
Translator derived variables: 0
Translator facts: 737
Translator goal facts: 14
Translator mutex groups: 16
Translator total mutex groups size: 48
Translator operators: 2344
Translator axioms: 0
Translator task size: 22454
Translator peak memory: 43172 KB
Writing output... [0.020s CPU, 0.015s wall-clock]
Done! [0.300s CPU, 0.289s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: 1799.68s
INFO     search memory limit: 4096 MB
INFO     search command line string: /home/dmdoebber/downward-projects/downward/experiments/paper/data/pref-ops-val/code-11d6cc7f374e3fd7216f4422aa97b8db8c68d3c3_e5e41175/builds/release/bin/downward --evaluator 'eval=ff()' --search 'eager_greedy([lsh(patterns=systematic(4), op_order=default, res_order=default, transform=adapt_costs(cost_type=ONE))],  preferred=[eval])' --internal-plan-file sas_plan < output.sas
[t=0s, 46116 KB] reading input...
[t=0.00799912s, 47120 KB] done reading input!
[t=0.00799912s, 48080 KB] Simplifying 8582 unary operators... done! [7402 unary operators]
[t=0.0159991s, 48740 KB] time to simplify: 0.00799997s
[t=0.0159991s, 48740 KB] Initializing additive heuristic...
[t=0.0159991s, 48740 KB] Initializing FF heuristic...
[t=0.0159991s, 48740 KB] stop search of patterns: 3355443KB
[t=0.0159991s, 48740 KB] Generating patterns using the systematic generator...
[t=0.0159991s, 48740 KB] building causal graph...done! [t=0s]
[t=0.123758s, 79032 KB] Found 123424 SGA patterns.
[t=3.02708s, 85980 KB] Found 141630 interesting patterns.
[t=3.04303s, 85980 KB] [14, 98, 3573, 137945]
[t=3.08297s, 85980 KB] Systematic generator number of patterns: 336
[t=3.08297s, 85980 KB] Systematic generator total PDB size: 9904
[t=3.08297s, 85980 KB] Systematic generator computation time: 3.06697s
[t=3.08297s, 85980 KB] Computing PDBs for pattern collection...
[t=3.22697s, 85980 KB] Done computing PDBs for pattern collection: 0.143995s
[t=3.24296s, 85980 KB] Operators: 2344
[t=3.24296s, 85980 KB] Restrictions: 336
[t=3.24296s, 85980 KB] Mean mentions: 102
[t=3.24296s, 85980 KB] Mean operators: 713
[t=3.24697s, 85980 KB] Building successor generator...done!
[t=3.24697s, 85980 KB] peak memory difference for successor generator creation: 0 KB
[t=3.24697s, 85980 KB] time for successor generation creation: 0s
[t=3.24697s, 85980 KB] Variables: 353
[t=3.24697s, 85980 KB] FactPairs: 737
[t=3.24697s, 85980 KB] Bytes per state: 48
[t=3.24697s, 85980 KB] Conducting best first search without reopening closed nodes, (real) bound = 2147483647
[t=3.24697s, 85980 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 32
[t=3.24697s, 85980 KB] g=0, 1 evaluated, 0 expanded
[t=3.24697s, 85980 KB] Initial heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 32
[t=3.24697s, 85980 KB] pruning method: none
[t=3.24697s, 85980 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 31
[t=3.24697s, 85980 KB] g=12, 149 evaluated, 10 expanded
[t=3.24697s, 85980 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 30
[t=3.24697s, 85980 KB] g=13, 152 evaluated, 11 expanded
[t=3.24697s, 85980 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 29
[t=3.24697s, 85980 KB] g=14, 170 evaluated, 12 expanded
[t=3.24697s, 85980 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 28
[t=3.24697s, 85980 KB] g=15, 249 evaluated, 17 expanded
[t=3.25097s, 85980 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 27
[t=3.25097s, 85980 KB] g=27, 444 evaluated, 46 expanded
[t=3.51496s, 85980 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 26
[t=3.51496s, 85980 KB] g=46, 19365 evaluated, 2122 expanded
[t=3.51496s, 85980 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 25
[t=3.51496s, 85980 KB] g=49, 19463 evaluated, 2137 expanded
[t=3.52696s, 85980 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 24
[t=3.52696s, 85980 KB] g=61, 20017 evaluated, 2224 expanded
[t=3.58695s, 85980 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 23
[t=3.58695s, 85980 KB] g=79, 24316 evaluated, 2751 expanded
[t=3.58695s, 85980 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 22
[t=3.58695s, 85980 KB] g=81, 24406 evaluated, 2756 expanded
[t=3.59095s, 85980 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 21
[t=3.59095s, 85980 KB] g=93, 24769 evaluated, 2783 expanded
[t=3.61895s, 85980 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 20
[t=3.61895s, 85980 KB] g=93, 26764 evaluated, 3040 expanded
[t=4.15493s, 85980 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 19
[t=4.15493s, 85980 KB] g=126, 70457 evaluated, 7227 expanded
[t=4.16693s, 85980 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 18
[t=4.16693s, 85980 KB] g=126, 71269 evaluated, 7297 expanded
[t=4.25492s, 85980 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 17
[t=4.25492s, 85980 KB] g=158, 78209 evaluated, 8049 expanded
[t=4.26692s, 85980 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 16
[t=4.26692s, 85980 KB] g=158, 79440 evaluated, 8149 expanded
[t=4.30292s, 85980 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 15
[t=4.30292s, 85980 KB] g=176, 82732 evaluated, 8392 expanded
[t=4.30292s, 85980 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 14
[t=4.30292s, 85980 KB] g=189, 82973 evaluated, 8411 expanded
[t=4.31892s, 85980 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 13
[t=4.31892s, 85980 KB] g=193, 84483 evaluated, 8524 expanded
[t=4.34292s, 85980 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 12
[t=4.34292s, 85980 KB] g=208, 86578 evaluated, 8704 expanded
[t=4.34292s, 85980 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 11
[t=4.34292s, 85980 KB] g=219, 86663 evaluated, 8709 expanded
[t=4.38292s, 85980 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 10
[t=4.38292s, 85980 KB] g=223, 91341 evaluated, 9044 expanded
[t=4.46292s, 85980 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 9
[t=4.46292s, 85980 KB] g=251, 99642 evaluated, 9628 expanded
[t=4.46292s, 85980 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 8
[t=4.46292s, 85980 KB] g=254, 99744 evaluated, 9634 expanded
[t=4.46292s, 85980 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 7
[t=4.46292s, 85980 KB] g=256, 99846 evaluated, 9643 expanded
[t=4.51092s, 85980 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 6
[t=4.51092s, 85980 KB] g=283, 104955 evaluated, 10036 expanded
[t=4.58291s, 85980 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 5
[t=4.58291s, 85980 KB] g=287, 112046 evaluated, 10628 expanded
[t=4.58291s, 85980 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 4
[t=4.58291s, 85980 KB] g=288, 112067 evaluated, 10629 expanded
[t=4.7149s, 85980 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 3
[t=4.7149s, 85980 KB] g=318, 123542 evaluated, 11937 expanded
[t=4.7149s, 85980 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 2
[t=4.7149s, 85980 KB] g=319, 123560 evaluated, 11938 expanded
[t=4.83089s, 85980 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 1
[t=4.83089s, 85980 KB] g=349, 133387 evaluated, 13129 expanded
[t=4.83089s, 85980 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 0
[t=4.83089s, 85980 KB] g=350, 133405 evaluated, 13130 expanded
[t=4.83089s, 85980 KB] Solution found!
[t=4.83089s, 85980 KB] Actual search time: 1.58393s
grasp left shot7 (1)
fill-shot shot7 ingredient1 left right dispenser1 (10)
pour-shot-to-clean-shaker shot7 ingredient1 shaker1 left l0 l1 (1)
clean-shot shot7 ingredient1 left right (1)
fill-shot shot7 ingredient2 left right dispenser2 (10)
pour-shot-to-used-shaker shot7 ingredient2 shaker1 left l1 l2 (1)
clean-shot shot7 ingredient2 left right (1)
leave left shot7 (1)
grasp left shot11 (1)
fill-shot shot11 ingredient3 left right dispenser3 (10)
grasp right shaker1 (1)
leave left shot11 (1)
shake cocktail8 ingredient1 ingredient2 shaker1 right left (1)
pour-shaker-to-shot cocktail8 shot10 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail8 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot11 (1)
pour-shot-to-clean-shaker shot11 ingredient3 shaker1 left l0 l1 (1)
leave right shaker1 (1)
clean-shot shot11 ingredient3 left right (1)
fill-shot shot11 ingredient1 left right dispenser1 (10)
pour-shot-to-used-shaker shot11 ingredient1 shaker1 left l1 l2 (1)
clean-shot shot11 ingredient1 left right (1)
fill-shot shot11 ingredient2 left right dispenser2 (10)
grasp right shaker1 (1)
leave left shot11 (1)
shake cocktail9 ingredient1 ingredient3 shaker1 right left (1)
pour-shaker-to-shot cocktail9 shot12 right shaker1 l2 l1 (1)
pour-shaker-to-shot cocktail9 shot2 right shaker1 l1 l0 (1)
empty-shaker right shaker1 cocktail9 l0 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot11 (1)
pour-shot-to-clean-shaker shot11 ingredient2 shaker1 left l0 l1 (1)
leave right shaker1 (1)
clean-shot shot11 ingredient2 left right (1)
fill-shot shot11 ingredient3 left right dispenser3 (10)
pour-shot-to-used-shaker shot11 ingredient3 shaker1 left l1 l2 (1)
clean-shot shot11 ingredient3 left right (1)
leave left shot11 (1)
grasp left shot15 (1)
fill-shot shot15 ingredient1 left right dispenser1 (10)
leave left shot15 (1)
grasp left shaker1 (1)
shake cocktail2 ingredient3 ingredient2 shaker1 left right (1)
pour-shaker-to-shot cocktail2 shot8 left shaker1 l2 l1 (1)
empty-shaker left shaker1 cocktail2 l1 l0 (1)
clean-shaker left right shaker1 (1)
grasp right shot15 (1)
pour-shot-to-clean-shaker shot15 ingredient1 shaker1 right l0 l1 (1)
leave left shaker1 (1)
clean-shot shot15 ingredient1 right left (1)
fill-shot shot15 ingredient4 right left dispenser4 (10)
pour-shot-to-used-shaker shot15 ingredient4 shaker1 right l1 l2 (1)
clean-shot shot15 ingredient4 right left (1)
fill-shot shot15 ingredient2 right left dispenser2 (10)
leave right shot15 (1)
grasp left shaker1 (1)
shake cocktail11 ingredient4 ingredient1 shaker1 left right (1)
pour-shaker-to-shot cocktail11 shot3 left shaker1 l2 l1 (1)
empty-shaker left shaker1 cocktail11 l1 l0 (1)
clean-shaker left right shaker1 (1)
grasp right shot15 (1)
pour-shot-to-clean-shaker shot15 ingredient2 shaker1 right l0 l1 (1)
leave left shaker1 (1)
clean-shot shot15 ingredient2 right left (1)
fill-shot shot15 ingredient3 right left dispenser3 (10)
pour-shot-to-used-shaker shot15 ingredient3 shaker1 right l1 l2 (1)
refill-shot shot15 ingredient3 right left dispenser3 (10)
leave right shot15 (1)
grasp left shaker1 (1)
shake cocktail7 ingredient2 ingredient3 shaker1 left right (1)
pour-shaker-to-shot cocktail7 shot6 left shaker1 l2 l1 (1)
empty-shaker left shaker1 cocktail7 l1 l0 (1)
clean-shaker left right shaker1 (1)
grasp right shot15 (1)
pour-shot-to-clean-shaker shot15 ingredient3 shaker1 right l0 l1 (1)
leave left shaker1 (1)
clean-shot shot15 ingredient3 right left (1)
fill-shot shot15 ingredient2 right left dispenser2 (10)
pour-shot-to-used-shaker shot15 ingredient2 shaker1 right l1 l2 (1)
leave right shot15 (1)
grasp left shaker1 (1)
shake cocktail3 ingredient2 ingredient3 shaker1 left right (1)
pour-shaker-to-shot cocktail3 shot14 left shaker1 l2 l1 (1)
pour-shaker-to-shot cocktail3 shot4 left shaker1 l1 l0 (1)
empty-shaker left shaker1 cocktail3 l0 l0 (1)
clean-shaker left right shaker1 (1)
leave left shaker1 (1)
grasp left shot15 (1)
refill-shot shot15 ingredient2 left right dispenser2 (10)
pour-shot-to-clean-shaker shot15 ingredient2 shaker1 left l0 l1 (1)
clean-shot shot15 ingredient2 left right (1)
fill-shot shot15 ingredient4 left right dispenser4 (10)
pour-shot-to-used-shaker shot15 ingredient4 shaker1 left l1 l2 (1)
grasp right shaker1 (1)
leave left shot15 (1)
shake cocktail4 ingredient4 ingredient2 shaker1 right left (1)
pour-shaker-to-shot cocktail4 shot9 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail4 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot15 (1)
leave right shaker1 (1)
refill-shot shot15 ingredient4 left right dispenser4 (10)
pour-shot-to-clean-shaker shot15 ingredient4 shaker1 left l0 l1 (1)
clean-shot shot15 ingredient4 left right (1)
fill-shot shot15 ingredient1 left right dispenser1 (10)
pour-shot-to-used-shaker shot15 ingredient1 shaker1 left l1 l2 (1)
grasp right shaker1 (1)
leave left shot15 (1)
shake cocktail6 ingredient1 ingredient4 shaker1 right left (1)
pour-shaker-to-shot cocktail6 shot1 right shaker1 l2 l1 (1)
pour-shaker-to-shot cocktail6 shot13 right shaker1 l1 l0 (1)
empty-shaker right shaker1 cocktail6 l0 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot15 (1)
leave right shaker1 (1)
clean-shot shot15 ingredient1 left right (1)
fill-shot shot15 ingredient2 left right dispenser2 (10)
pour-shot-to-clean-shaker shot15 ingredient2 shaker1 left l0 l1 (1)
clean-shot shot15 ingredient2 left right (1)
fill-shot shot15 ingredient3 left right dispenser3 (10)
pour-shot-to-used-shaker shot15 ingredient3 shaker1 left l1 l2 (1)
grasp right shaker1 (1)
leave left shot15 (1)
shake cocktail1 ingredient3 ingredient2 shaker1 right left (1)
pour-shaker-to-shot cocktail1 shot11 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail1 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot15 (1)
leave right shaker1 (1)
refill-shot shot15 ingredient3 left right dispenser3 (10)
pour-shot-to-clean-shaker shot15 ingredient3 shaker1 left l0 l1 (1)
clean-shot shot15 ingredient3 left right (1)
fill-shot shot15 ingredient4 left right dispenser4 (10)
grasp right shaker1 (1)
pour-shot-to-used-shaker shot15 ingredient4 shaker1 left l1 l2 (1)
leave left shot15 (1)
shake cocktail10 ingredient3 ingredient4 shaker1 right left (1)
pour-shaker-to-shot cocktail10 shot5 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail10 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot15 (1)
leave right shaker1 (1)
refill-shot shot15 ingredient4 left right dispenser4 (10)
pour-shot-to-clean-shaker shot15 ingredient4 shaker1 left l0 l1 (1)
clean-shot shot15 ingredient4 left right (1)
fill-shot shot15 ingredient2 left right dispenser2 (10)
grasp right shaker1 (1)
pour-shot-to-used-shaker shot15 ingredient2 shaker1 left l1 l2 (1)
leave left shot15 (1)
shake cocktail5 ingredient4 ingredient2 shaker1 right left (1)
pour-shaker-to-shot cocktail5 shot7 right shaker1 l2 l1 (1)
[t=4.83089s, 85980 KB] Plan length: 152 step(s).
[t=4.83089s, 85980 KB] Plan cost: 350
[t=4.83089s, 85980 KB] Expanded 13131 state(s).
[t=4.83089s, 85980 KB] Reopened 0 state(s).
[t=4.83089s, 85980 KB] Evaluated 133405 state(s).
[t=4.83089s, 85980 KB] Evaluations: 146535
[t=4.83089s, 85980 KB] Generated 169666 state(s).
[t=4.83089s, 85980 KB] Dead ends: 0 state(s).
[t=4.83089s, 85980 KB] Number of registered states: 133405
[t=4.83089s, 85980 KB] Int hash set load factor: 133405/262144 = 0.5089
[t=4.83089s, 85980 KB] Int hash set resizes: 18
[t=4.83089s, 85980 KB] Search time: 1.58393s
[t=4.83089s, 85980 KB] Total time: 4.83089s
Solution found.
Peak memory: 85980 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Running validate.
INFO     validate stdin: None
INFO     validate time limit: None
INFO     validate memory limit: None
INFO     validate command line string: validate domain.pddl problem.pddl sas_plan
Checking plan: sas_plan
Plan executed successfully - checking goal
Plan valid
Final value: 350 

Successful plans:
Value: 350
 sas_plan 350 

validate exit code: 0

