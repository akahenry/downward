INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: 1799.99s
INFO     translator memory limit: 4096 MB
INFO     translator command line string: /usr/bin/python3 /home/dmdoebber/downward-projects/downward/experiments/paper/data/pref-ops-val/code-11d6cc7f374e3fd7216f4422aa97b8db8c68d3c3_e5e41175/builds/release/bin/translate/translate.py domain.pddl problem.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.002s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.001s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.010s CPU, 0.003s wall-clock]
Preparing model... [0.000s CPU, 0.002s wall-clock]
Generated 115 rules.
Computing model... [0.040s CPU, 0.034s wall-clock]
3296 relevant atoms
3425 auxiliary atoms
6721 final queue length
11595 total queue pushes
Completing instantiation... [0.070s CPU, 0.069s wall-clock]
Instantiating: [0.120s CPU, 0.108s wall-clock]
Computing fact groups...
Finding invariants...
24 initial candidates
Finding invariants: [0.010s CPU, 0.009s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
350 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.001s wall-clock]
Computing fact groups: [0.010s CPU, 0.012s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.010s CPU, 0.004s wall-clock]
Translating task: [0.090s CPU, 0.084s wall-clock]
3920 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
3 propositions removed
Detecting unreachable propositions: [0.040s CPU, 0.046s wall-clock]
Reordering and filtering variables...
353 of 353 variables necessary.
16 of 19 mutex groups necessary.
2344 of 2344 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.030s CPU, 0.024s wall-clock]
Translator variables: 353
Translator derived variables: 0
Translator facts: 737
Translator goal facts: 14
Translator mutex groups: 16
Translator total mutex groups size: 48
Translator operators: 2344
Translator axioms: 0
Translator task size: 22454
Translator peak memory: 43172 KB
Writing output... [0.010s CPU, 0.015s wall-clock]
Done! [0.300s CPU, 0.296s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: 1799.67s
INFO     search memory limit: 4096 MB
INFO     search command line string: /home/dmdoebber/downward-projects/downward/experiments/paper/data/pref-ops-val/code-11d6cc7f374e3fd7216f4422aa97b8db8c68d3c3_e5e41175/builds/release/bin/downward --evaluator 'eval=ff()' --search 'eager_greedy([lsh(patterns=systematic(4), op_order=default, res_order=default, transform=adapt_costs(cost_type=ONE))],  preferred=[eval])' --internal-plan-file sas_plan < output.sas
[t=0s, 46116 KB] reading input...
[t=0.0114726s, 47120 KB] done reading input!
[t=0.0114726s, 48080 KB] Simplifying 8582 unary operators... done! [7402 unary operators]
[t=0.0154639s, 48740 KB] time to simplify: 0.0039913s
[t=0.0154639s, 48740 KB] Initializing additive heuristic...
[t=0.0154639s, 48740 KB] Initializing FF heuristic...
[t=0.0154639s, 48740 KB] stop search of patterns: 3355443KB
[t=0.0154639s, 48740 KB] Generating patterns using the systematic generator...
[t=0.0154639s, 48740 KB] building causal graph...done! [t=0.00400234s]
[t=0.151142s, 91092 KB] Found 140163 SGA patterns.
[t=3.23559s, 91092 KB] Found 155662 interesting patterns.
[t=3.25952s, 91092 KB] [14, 106, 4000, 151542]
[t=3.32351s, 91092 KB] Systematic generator number of patterns: 360
[t=3.32351s, 91092 KB] Systematic generator total PDB size: 8598
[t=3.32351s, 91092 KB] Systematic generator computation time: 3.30804s
[t=3.32351s, 91092 KB] Computing PDBs for pattern collection...
[t=3.4715s, 91092 KB] Done computing PDBs for pattern collection: 0.147994s
[t=3.4915s, 91092 KB] Operators: 2344
[t=3.4915s, 91092 KB] Restrictions: 360
[t=3.4915s, 91092 KB] Mean mentions: 99
[t=3.4915s, 91092 KB] Mean operators: 649
[t=3.4915s, 91092 KB] Building successor generator...done!
[t=3.4915s, 91092 KB] peak memory difference for successor generator creation: 0 KB
[t=3.4915s, 91092 KB] time for successor generation creation: 0s
[t=3.4915s, 91092 KB] Variables: 353
[t=3.4915s, 91092 KB] FactPairs: 737
[t=3.4915s, 91092 KB] Bytes per state: 48
[t=3.4915s, 91092 KB] Conducting best first search without reopening closed nodes, (real) bound = 2147483647
[t=3.4915s, 91092 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 31
[t=3.4915s, 91092 KB] g=0, 1 evaluated, 0 expanded
[t=3.4915s, 91092 KB] Initial heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 31
[t=3.4915s, 91092 KB] pruning method: none
[t=3.4915s, 91092 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 30
[t=3.4915s, 91092 KB] g=1, 2 evaluated, 1 expanded
[t=3.4955s, 91092 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 29
[t=3.4955s, 91092 KB] g=13, 117 evaluated, 20 expanded
[t=3.4955s, 91092 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 28
[t=3.4955s, 91092 KB] g=14, 134 evaluated, 22 expanded
[t=3.4955s, 91092 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 27
[t=3.4955s, 91092 KB] g=24, 275 evaluated, 43 expanded
[t=3.4995s, 91092 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 26
[t=3.4995s, 91092 KB] g=36, 389 evaluated, 61 expanded
[t=3.5035s, 91092 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 25
[t=3.5035s, 91092 KB] g=42, 679 evaluated, 95 expanded
[t=3.5035s, 91092 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 24
[t=3.5035s, 91092 KB] g=54, 807 evaluated, 110 expanded
[t=3.5715s, 91092 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 23
[t=3.5715s, 91092 KB] g=71, 5687 evaluated, 598 expanded
[t=3.5715s, 91092 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 22
[t=3.5715s, 91092 KB] g=82, 5767 evaluated, 603 expanded
[t=3.77949s, 91092 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 21
[t=3.77949s, 91092 KB] g=107, 22043 evaluated, 2237 expanded
[t=3.77949s, 91092 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 20
[t=3.77949s, 91092 KB] g=118, 22123 evaluated, 2242 expanded
[t=4.02747s, 91092 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 19
[t=4.02747s, 91092 KB] g=120, 40179 evaluated, 4471 expanded
[t=4.49545s, 91092 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 18
[t=4.49545s, 91092 KB] g=142, 73106 evaluated, 8341 expanded
[t=4.49945s, 91092 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 17
[t=4.49945s, 91092 KB] g=154, 73346 evaluated, 8372 expanded
[t=4.50745s, 91092 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 16
[t=4.50745s, 91092 KB] g=159, 74173 evaluated, 8443 expanded
[t=4.65544s, 91092 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 14
[t=4.65544s, 91092 KB] g=190, 82250 evaluated, 9932 expanded
[t=6.49137s, 91092 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 13
[t=6.49137s, 91092 KB] g=228, 183599 evaluated, 28641 expanded
[t=6.52336s, 91092 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 12
[t=6.52336s, 91092 KB] g=221, 185292 evaluated, 28951 expanded
[t=6.52336s, 91092 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 11
[t=6.52336s, 91092 KB] g=233, 185372 evaluated, 28959 expanded
[t=6.72335s, 91092 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 10
[t=6.72335s, 91092 KB] g=257, 197859 evaluated, 30990 expanded
[t=6.72335s, 91092 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 9
[t=6.72335s, 91092 KB] g=258, 197878 evaluated, 30991 expanded
[t=6.72735s, 91092 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 8
[t=6.72735s, 91092 KB] g=270, 197957 evaluated, 30999 expanded
[t=6.96734s, 91092 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 7
[t=6.96734s, 91092 KB] g=294, 212951 evaluated, 33555 expanded
[t=6.96734s, 91092 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 6
[t=6.96734s, 91092 KB] g=306, 213018 evaluated, 33563 expanded
[t=7.30333s, 91092 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 5
[t=7.30333s, 91092 KB] g=330, 233827 evaluated, 37094 expanded
[t=7.30733s, 91092 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 4
[t=7.30733s, 91092 KB] g=342, 233892 evaluated, 37102 expanded
[t=7.42332s, 91092 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 3
[t=7.42332s, 91092 KB] g=366, 241142 evaluated, 38401 expanded
[t=7.42332s, 91092 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 2
[t=7.42332s, 91092 KB] g=378, 241272 evaluated, 38415 expanded
[t=7.7713s, 91092 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 1
[t=7.7713s, 91092 KB] g=402, 262477 evaluated, 42478 expanded
[t=7.7713s, 91092 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 0
[t=7.7713s, 91092 KB] g=414, 262567 evaluated, 42487 expanded
[t=7.7713s, 91092 KB] Solution found!
[t=7.7713s, 91092 KB] Actual search time: 4.2798s
grasp right shot12 (1)
fill-shot shot12 ingredient1 right left dispenser1 (10)
pour-shot-to-clean-shaker shot12 ingredient1 shaker1 right l0 l1 (1)
refill-shot shot12 ingredient1 right left dispenser1 (10)
leave right shot12 (1)
grasp right shot13 (1)
fill-shot shot13 ingredient3 right left dispenser3 (10)
leave right shot13 (1)
grasp right shaker1 (1)
grasp left shot13 (1)
pour-shot-to-used-shaker shot13 ingredient3 shaker1 left l1 l2 (1)
leave left shot13 (1)
shake cocktail3 ingredient1 ingredient3 shaker1 right left (1)
pour-shaker-to-shot cocktail3 shot14 right shaker1 l2 l1 (1)
pour-shaker-to-shot cocktail3 shot5 right shaker1 l1 l0 (1)
grasp left shot13 (1)
leave right shaker1 (1)
refill-shot shot13 ingredient3 left right dispenser3 (10)
grasp right shaker1 (1)
leave left shot13 (1)
empty-shaker right shaker1 cocktail3 l0 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot12 (1)
pour-shot-to-clean-shaker shot12 ingredient1 shaker1 left l0 l1 (1)
leave right shaker1 (1)
refill-shot shot12 ingredient1 left right dispenser1 (10)
grasp right shaker1 (1)
leave left shot12 (1)
grasp left shot13 (1)
pour-shot-to-used-shaker shot13 ingredient3 shaker1 left l1 l2 (1)
leave right shaker1 (1)
refill-shot shot13 ingredient3 left right dispenser3 (10)
grasp right shaker1 (1)
leave left shot13 (1)
shake cocktail10 ingredient1 ingredient3 shaker1 right left (1)
pour-shaker-to-shot cocktail10 shot10 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail10 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot12 (1)
pour-shot-to-clean-shaker shot12 ingredient1 shaker1 left l0 l1 (1)
leave right shaker1 (1)
refill-shot shot12 ingredient1 left right dispenser1 (10)
leave left shot12 (1)
grasp left shot15 (1)
fill-shot shot15 ingredient2 left right dispenser2 (10)
pour-shot-to-used-shaker shot15 ingredient2 shaker1 left l1 l2 (1)
refill-shot shot15 ingredient2 left right dispenser2 (10)
grasp right shaker1 (1)
leave left shot15 (1)
shake cocktail11 ingredient2 ingredient1 shaker1 right left (1)
pour-shaker-to-shot cocktail11 shot1 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail11 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot15 (1)
pour-shot-to-clean-shaker shot15 ingredient2 shaker1 left l0 l1 (1)
leave right shaker1 (1)
clean-shot shot15 ingredient2 left right (1)
fill-shot shot15 ingredient4 left right dispenser4 (10)
pour-shot-to-used-shaker shot15 ingredient4 shaker1 left l1 l2 (1)
grasp right shaker1 (1)
leave left shot15 (1)
shake cocktail4 ingredient2 ingredient4 shaker1 right left (1)
pour-shaker-to-shot cocktail4 shot2 right shaker1 l2 l1 (1)
grasp left shot15 (1)
leave right shaker1 (1)
refill-shot shot15 ingredient4 left right dispenser4 (10)
grasp right shaker1 (1)
leave left shot15 (1)
empty-shaker right shaker1 cocktail4 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot15 (1)
pour-shot-to-clean-shaker shot15 ingredient4 shaker1 left l0 l1 (1)
leave left shot15 (1)
grasp left shot13 (1)
pour-shot-to-used-shaker shot13 ingredient3 shaker1 left l1 l2 (1)
leave left shot13 (1)
shake cocktail1 ingredient4 ingredient3 shaker1 right left (1)
grasp left shot15 (1)
leave right shaker1 (1)
refill-shot shot15 ingredient4 left right dispenser4 (10)
grasp right shot13 (1)
leave left shot15 (1)
refill-shot shot13 ingredient3 right left dispenser3 (10)
leave right shot13 (1)
grasp right shaker1 (1)
pour-shaker-to-shot cocktail1 shot8 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail1 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot15 (1)
pour-shot-to-clean-shaker shot15 ingredient4 shaker1 left l0 l1 (1)
leave left shot15 (1)
grasp left shot12 (1)
pour-shot-to-used-shaker shot12 ingredient1 shaker1 left l1 l2 (1)
leave left shot12 (1)
shake cocktail2 ingredient4 ingredient1 shaker1 right left (1)
pour-shaker-to-shot cocktail2 shot9 right shaker1 l2 l1 (1)
grasp left shot12 (1)
leave right shaker1 (1)
refill-shot shot12 ingredient1 left right dispenser1 (10)
leave left shot12 (1)
grasp left shot15 (1)
clean-shot shot15 ingredient4 left right (1)
fill-shot shot15 ingredient2 left right dispenser2 (10)
grasp right shaker1 (1)
leave left shot15 (1)
empty-shaker right shaker1 cocktail2 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot15 (1)
pour-shot-to-clean-shaker shot15 ingredient2 shaker1 left l0 l1 (1)
leave left shot15 (1)
grasp left shot12 (1)
pour-shot-to-used-shaker shot12 ingredient1 shaker1 left l1 l2 (1)
leave left shot12 (1)
shake cocktail8 ingredient2 ingredient1 shaker1 right left (1)
pour-shaker-to-shot cocktail8 shot11 right shaker1 l2 l1 (1)
grasp left shot12 (1)
leave right shaker1 (1)
refill-shot shot12 ingredient1 left right dispenser1 (10)
leave left shot12 (1)
grasp left shot15 (1)
refill-shot shot15 ingredient2 left right dispenser2 (10)
grasp right shaker1 (1)
leave left shot15 (1)
empty-shaker right shaker1 cocktail8 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot15 (1)
pour-shot-to-clean-shaker shot15 ingredient2 shaker1 left l0 l1 (1)
leave left shot15 (1)
grasp left shot12 (1)
pour-shot-to-used-shaker shot12 ingredient1 shaker1 left l1 l2 (1)
leave left shot12 (1)
shake cocktail5 ingredient1 ingredient2 shaker1 right left (1)
pour-shaker-to-shot cocktail5 shot7 right shaker1 l2 l1 (1)
grasp left shot12 (1)
leave right shaker1 (1)
refill-shot shot12 ingredient1 left right dispenser1 (10)
grasp right shot15 (1)
leave left shot12 (1)
refill-shot shot15 ingredient2 right left dispenser2 (10)
grasp left shaker1 (1)
leave right shot15 (1)
empty-shaker left shaker1 cocktail5 l1 l0 (1)
clean-shaker left right shaker1 (1)
grasp right shot15 (1)
pour-shot-to-clean-shaker shot15 ingredient2 shaker1 right l0 l1 (1)
leave right shot15 (1)
grasp right shot12 (1)
pour-shot-to-used-shaker shot12 ingredient1 shaker1 right l1 l2 (1)
leave right shot12 (1)
shake cocktail9 ingredient1 ingredient2 shaker1 left right (1)
pour-shaker-to-shot cocktail9 shot6 left shaker1 l2 l1 (1)
grasp right shot12 (1)
leave left shaker1 (1)
refill-shot shot12 ingredient1 right left dispenser1 (10)
grasp left shot15 (1)
leave right shot12 (1)
refill-shot shot15 ingredient2 left right dispenser2 (10)
grasp right shaker1 (1)
leave left shot15 (1)
empty-shaker right shaker1 cocktail9 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot15 (1)
pour-shot-to-clean-shaker shot15 ingredient2 shaker1 left l0 l1 (1)
leave left shot15 (1)
grasp left shot13 (1)
pour-shot-to-used-shaker shot13 ingredient3 shaker1 left l1 l2 (1)
leave left shot13 (1)
shake cocktail6 ingredient2 ingredient3 shaker1 right left (1)
pour-shaker-to-shot cocktail6 shot4 right shaker1 l2 l1 (1)
grasp left shot13 (1)
leave right shaker1 (1)
refill-shot shot13 ingredient3 left right dispenser3 (10)
grasp right shot15 (1)
leave left shot13 (1)
refill-shot shot15 ingredient2 right left dispenser2 (10)
grasp left shaker1 (1)
leave right shot15 (1)
empty-shaker left shaker1 cocktail6 l1 l0 (1)
clean-shaker left right shaker1 (1)
grasp right shot15 (1)
pour-shot-to-clean-shaker shot15 ingredient2 shaker1 right l0 l1 (1)
leave right shot15 (1)
grasp right shot13 (1)
pour-shot-to-used-shaker shot13 ingredient3 shaker1 right l1 l2 (1)
leave right shot13 (1)
shake cocktail7 ingredient3 ingredient2 shaker1 left right (1)
pour-shaker-to-shot cocktail7 shot3 left shaker1 l2 l1 (1)
grasp right shot13 (1)
leave left shaker1 (1)
refill-shot shot13 ingredient3 right left dispenser3 (10)
[t=7.7713s, 91092 KB] Plan length: 190 step(s).
[t=7.7713s, 91092 KB] Plan cost: 406
[t=7.7713s, 91092 KB] Expanded 42488 state(s).
[t=7.7713s, 91092 KB] Reopened 0 state(s).
[t=7.7713s, 91092 KB] Evaluated 262568 state(s).
[t=7.7713s, 91092 KB] Evaluations: 305055
[t=7.7713s, 91092 KB] Generated 391931 state(s).
[t=7.7713s, 91092 KB] Dead ends: 0 state(s).
[t=7.7713s, 91092 KB] Number of registered states: 262568
[t=7.7713s, 91092 KB] Int hash set load factor: 262568/524288 = 0.500809
[t=7.7713s, 91092 KB] Int hash set resizes: 19
[t=7.7713s, 91092 KB] Search time: 4.2798s
[t=7.7713s, 91092 KB] Total time: 7.7713s
Solution found.
Peak memory: 91092 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Running validate.
INFO     validate stdin: None
INFO     validate time limit: None
INFO     validate memory limit: None
INFO     validate command line string: validate domain.pddl problem.pddl sas_plan
Checking plan: sas_plan
Plan executed successfully - checking goal
Plan valid
Final value: 406 

Successful plans:
Value: 406
 sas_plan 406 

validate exit code: 0

