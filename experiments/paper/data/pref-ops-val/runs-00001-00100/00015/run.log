INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: 1799.99s
INFO     translator memory limit: 4096 MB
INFO     translator command line string: /usr/bin/python3 /home/dmdoebber/downward-projects/downward/experiments/paper/data/pref-ops-val/code-11d6cc7f374e3fd7216f4422aa97b8db8c68d3c3_e5e41175/builds/release/bin/translate/translate.py domain.pddl problem.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.012s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.001s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.010s CPU, 0.003s wall-clock]
Preparing model... [0.000s CPU, 0.002s wall-clock]
Generated 115 rules.
Computing model... [0.030s CPU, 0.032s wall-clock]
3094 relevant atoms
3221 auxiliary atoms
6315 final queue length
10878 total queue pushes
Completing instantiation... [0.070s CPU, 0.065s wall-clock]
Instantiating: [0.110s CPU, 0.103s wall-clock]
Computing fact groups...
Finding invariants...
24 initial candidates
Finding invariants: [0.000s CPU, 0.007s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
328 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.001s wall-clock]
Computing fact groups: [0.010s CPU, 0.010s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.004s wall-clock]
Translating task: [0.080s CPU, 0.079s wall-clock]
3672 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
3 propositions removed
Detecting unreachable propositions: [0.030s CPU, 0.034s wall-clock]
Reordering and filtering variables...
331 of 331 variables necessary.
15 of 18 mutex groups necessary.
2194 of 2194 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.020s CPU, 0.022s wall-clock]
Translator variables: 331
Translator derived variables: 0
Translator facts: 691
Translator goal facts: 13
Translator mutex groups: 15
Translator total mutex groups size: 45
Translator operators: 2194
Translator axioms: 0
Translator task size: 21018
Translator peak memory: 42276 KB
Writing output... [0.010s CPU, 0.014s wall-clock]
Done! [0.270s CPU, 0.279s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: 1799.7s
INFO     search memory limit: 4096 MB
INFO     search command line string: /home/dmdoebber/downward-projects/downward/experiments/paper/data/pref-ops-val/code-11d6cc7f374e3fd7216f4422aa97b8db8c68d3c3_e5e41175/builds/release/bin/downward --evaluator 'eval=ff()' --search 'eager_greedy([lsh(patterns=systematic(4), op_order=default, res_order=default, transform=adapt_costs(cost_type=ONE))],  preferred=[eval])' --internal-plan-file sas_plan < output.sas
[t=0s, 46116 KB] reading input...
[t=0.00752843s, 46976 KB] done reading input!
[t=0.0115292s, 47996 KB] Simplifying 8034 unary operators... done! [6930 unary operators]
[t=0.0155291s, 48660 KB] time to simplify: 0.00399993s
[t=0.0155291s, 48660 KB] Initializing additive heuristic...
[t=0.0155291s, 48660 KB] Initializing FF heuristic...
[t=0.0155291s, 48660 KB] stop search of patterns: 3355443KB
[t=0.0155291s, 48660 KB] Generating patterns using the systematic generator...
[t=0.0155291s, 48660 KB] building causal graph...done! [t=0.00399988s]
[t=0.13127s, 77868 KB] Found 119812 SGA patterns.
[t=2.70679s, 85204 KB] Found 132346 interesting patterns.
[t=2.72273s, 85204 KB] [13, 99, 3590, 128644]
[t=2.7627s, 85204 KB] Systematic generator number of patterns: 336
[t=2.7627s, 85204 KB] Systematic generator total PDB size: 8520
[t=2.7627s, 85204 KB] Systematic generator computation time: 2.74717s
[t=2.7627s, 85204 KB] Computing PDBs for pattern collection...
[t=2.89469s, 85204 KB] Done computing PDBs for pattern collection: 0.13199s
[t=2.91069s, 85204 KB] Operators: 2194
[t=2.91069s, 85204 KB] Restrictions: 336
[t=2.91069s, 85204 KB] Mean mentions: 92
[t=2.91069s, 85204 KB] Mean operators: 604
[t=2.91069s, 85204 KB] Building successor generator...done!
[t=2.91069s, 85204 KB] peak memory difference for successor generator creation: 0 KB
[t=2.91069s, 85204 KB] time for successor generation creation: 0s
[t=2.91069s, 85204 KB] Variables: 331
[t=2.91069s, 85204 KB] FactPairs: 691
[t=2.91069s, 85204 KB] Bytes per state: 44
[t=2.91069s, 85204 KB] Conducting best first search without reopening closed nodes, (real) bound = 2147483647
[t=2.91069s, 85204 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 27
[t=2.91069s, 85204 KB] g=0, 1 evaluated, 0 expanded
[t=2.91069s, 85204 KB] Initial heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 27
[t=2.91069s, 85204 KB] pruning method: none
[t=2.91069s, 85204 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 26
[t=2.91069s, 85204 KB] g=1, 2 evaluated, 1 expanded
[t=2.91469s, 85204 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 25
[t=2.91469s, 85204 KB] g=13, 162 evaluated, 13 expanded
[t=2.91869s, 85204 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 24
[t=2.91869s, 85204 KB] g=24, 326 evaluated, 45 expanded
[t=2.91869s, 85204 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 23
[t=2.91869s, 85204 KB] g=36, 417 evaluated, 57 expanded
[t=2.93469s, 85204 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 22
[t=2.93469s, 85204 KB] g=52, 1666 evaluated, 202 expanded
[t=2.96669s, 85204 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 21
[t=2.96669s, 85204 KB] g=75, 3867 evaluated, 502 expanded
[t=2.96669s, 85204 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 20
[t=2.96669s, 85204 KB] g=87, 3978 evaluated, 517 expanded
[t=3.00269s, 85204 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 19
[t=3.00269s, 85204 KB] g=104, 6279 evaluated, 877 expanded
[t=3.00669s, 85204 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 18
[t=3.00669s, 85204 KB] g=115, 6354 evaluated, 882 expanded
[t=3.02269s, 85204 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 17
[t=3.02269s, 85204 KB] g=136, 7905 evaluated, 1047 expanded
[t=3.02269s, 85204 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 16
[t=3.02269s, 85204 KB] g=147, 7980 evaluated, 1052 expanded
[t=3.17468s, 85204 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 15
[t=3.17468s, 85204 KB] g=168, 21648 evaluated, 2406 expanded
[t=3.17468s, 85204 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 14
[t=3.17468s, 85204 KB] g=179, 21723 evaluated, 2411 expanded
[t=3.32667s, 85204 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 13
[t=3.32667s, 85204 KB] g=201, 35433 evaluated, 3860 expanded
[t=3.32667s, 85204 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 12
[t=3.32667s, 85204 KB] g=212, 35508 evaluated, 3865 expanded
[t=4.47463s, 85204 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 11
[t=4.47463s, 85204 KB] g=265, 119210 evaluated, 16100 expanded
[t=4.47863s, 85204 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 10
[t=4.47863s, 85204 KB] g=276, 119285 evaluated, 16105 expanded
[t=5.5466s, 85204 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 9
[t=5.5466s, 85204 KB] g=341, 197313 evaluated, 27880 expanded
[t=5.63059s, 85204 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 8
[t=5.63059s, 85204 KB] g=333, 203321 evaluated, 28786 expanded
[t=5.63459s, 85204 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 7
[t=5.63459s, 85204 KB] g=345, 203521 evaluated, 28808 expanded
[t=5.77059s, 85204 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 6
[t=5.77059s, 85204 KB] g=380, 211787 evaluated, 30496 expanded
[t=5.81459s, 85204 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 5
[t=5.81859s, 85204 KB] g=370, 214512 evaluated, 31035 expanded
[t=5.81859s, 85204 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 4
[t=5.81859s, 85204 KB] g=382, 214646 evaluated, 31050 expanded
[t=6.07458s, 85204 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 3
[t=6.07458s, 85204 KB] g=407, 230138 evaluated, 34163 expanded
[t=6.07458s, 85204 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 2
[t=6.07458s, 85204 KB] g=419, 230262 evaluated, 34177 expanded
[t=6.43456s, 85204 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 1
[t=6.43456s, 85204 KB] g=443, 252595 evaluated, 38845 expanded
[t=6.43456s, 85204 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 0
[t=6.43456s, 85204 KB] g=455, 252675 evaluated, 38854 expanded
[t=6.43456s, 85204 KB] Solution found!
[t=6.43456s, 85204 KB] Actual search time: 3.52387s
grasp left shot12 (1)
fill-shot shot12 ingredient3 left right dispenser3 (10)
pour-shot-to-clean-shaker shot12 ingredient3 shaker1 left l0 l1 (1)
refill-shot shot12 ingredient3 left right dispenser3 (10)
leave left shot12 (1)
grasp right shot13 (1)
fill-shot shot13 ingredient2 right left dispenser2 (10)
grasp left shaker1 (1)
pour-shot-to-used-shaker shot13 ingredient2 shaker1 right l1 l2 (1)
leave right shot13 (1)
shake cocktail2 ingredient2 ingredient3 shaker1 left right (1)
pour-shaker-to-shot cocktail2 shot9 left shaker1 l2 l1 (1)
grasp right shot13 (1)
leave left shaker1 (1)
refill-shot shot13 ingredient2 right left dispenser2 (10)
grasp left shaker1 (1)
empty-shaker left shaker1 cocktail2 l1 l0 (1)
leave right shot13 (1)
clean-shaker left right shaker1 (1)
grasp right shot12 (1)
pour-shot-to-clean-shaker shot12 ingredient3 shaker1 right l0 l1 (1)
leave right shot12 (1)
grasp right shot13 (1)
pour-shot-to-used-shaker shot13 ingredient2 shaker1 right l1 l2 (1)
leave right shot13 (1)
shake cocktail8 ingredient2 ingredient3 shaker1 left right (1)
pour-shaker-to-shot cocktail8 shot10 left shaker1 l2 l1 (1)
grasp right shot12 (1)
leave left shaker1 (1)
refill-shot shot12 ingredient3 right left dispenser3 (10)
grasp left shot13 (1)
leave right shot12 (1)
refill-shot shot13 ingredient2 left right dispenser2 (10)
grasp right shaker1 (1)
leave left shot13 (1)
empty-shaker right shaker1 cocktail8 l1 l0 (1)
clean-shaker right left shaker1 (1)
leave right shaker1 (1)
grasp right shot12 (1)
pour-shot-to-clean-shaker shot12 ingredient3 shaker1 right l0 l1 (1)
refill-shot shot12 ingredient3 right left dispenser3 (10)
leave right shot12 (1)
grasp right shot13 (1)
pour-shot-to-used-shaker shot13 ingredient2 shaker1 right l1 l2 (1)
refill-shot shot13 ingredient2 right left dispenser2 (10)
grasp left shaker1 (1)
leave right shot13 (1)
shake cocktail4 ingredient2 ingredient3 shaker1 left right (1)
pour-shaker-to-shot cocktail4 shot4 left shaker1 l2 l1 (1)
empty-shaker left shaker1 cocktail4 l1 l0 (1)
clean-shaker left right shaker1 (1)
grasp right shot12 (1)
leave left shaker1 (1)
pour-shot-to-clean-shaker shot12 ingredient3 shaker1 right l0 l1 (1)
refill-shot shot12 ingredient3 right left dispenser3 (10)
leave right shot12 (1)
grasp right shot14 (1)
fill-shot shot14 ingredient1 right left dispenser1 (10)
pour-shot-to-used-shaker shot14 ingredient1 shaker1 right l1 l2 (1)
grasp left shaker1 (1)
leave right shot14 (1)
shake cocktail7 ingredient3 ingredient1 shaker1 left right (1)
pour-shaker-to-shot cocktail7 shot5 left shaker1 l2 l1 (1)
empty-shaker left shaker1 cocktail7 l1 l0 (1)
clean-shaker left right shaker1 (1)
grasp right shot12 (1)
leave left shaker1 (1)
pour-shot-to-clean-shaker shot12 ingredient3 shaker1 right l0 l1 (1)
refill-shot shot12 ingredient3 right left dispenser3 (10)
leave right shot12 (1)
grasp right shot14 (1)
clean-shot shot14 ingredient1 right left (1)
fill-shot shot14 ingredient4 right left dispenser4 (10)
pour-shot-to-used-shaker shot14 ingredient4 shaker1 right l1 l2 (1)
grasp left shaker1 (1)
leave right shot14 (1)
shake cocktail9 ingredient4 ingredient3 shaker1 left right (1)
pour-shaker-to-shot cocktail9 shot6 left shaker1 l2 l1 (1)
empty-shaker left shaker1 cocktail9 l1 l0 (1)
clean-shaker left right shaker1 (1)
grasp right shot12 (1)
leave left shaker1 (1)
pour-shot-to-clean-shaker shot12 ingredient3 shaker1 right l0 l1 (1)
refill-shot shot12 ingredient3 right left dispenser3 (10)
leave right shot12 (1)
grasp right shot14 (1)
refill-shot shot14 ingredient4 right left dispenser4 (10)
pour-shot-to-used-shaker shot14 ingredient4 shaker1 right l1 l2 (1)
refill-shot shot14 ingredient4 right left dispenser4 (10)
grasp left shaker1 (1)
leave right shot14 (1)
shake cocktail9 ingredient4 ingredient3 shaker1 left right (1)
empty-shaker left shaker1 cocktail9 l2 l0 (1)
clean-shaker left right shaker1 (1)
grasp right shot14 (1)
pour-shot-to-clean-shaker shot14 ingredient4 shaker1 right l0 l1 (1)
leave left shaker1 (1)
clean-shot shot14 ingredient4 right left (1)
fill-shot shot14 ingredient1 right left dispenser1 (10)
pour-shot-to-used-shaker shot14 ingredient1 shaker1 right l1 l2 (1)
grasp left shaker1 (1)
leave right shot14 (1)
shake cocktail11 ingredient4 ingredient1 shaker1 left right (1)
pour-shaker-to-shot cocktail11 shot2 left shaker1 l2 l1 (1)
empty-shaker left shaker1 cocktail11 l1 l0 (1)
clean-shaker left right shaker1 (1)
grasp right shot12 (1)
leave left shaker1 (1)
pour-shot-to-clean-shaker shot12 ingredient3 shaker1 right l0 l1 (1)
refill-shot shot12 ingredient3 right left dispenser3 (10)
leave right shot12 (1)
grasp right shot14 (1)
refill-shot shot14 ingredient1 right left dispenser1 (10)
pour-shot-to-used-shaker shot14 ingredient1 shaker1 right l1 l2 (1)
refill-shot shot14 ingredient1 right left dispenser1 (10)
grasp left shaker1 (1)
leave right shot14 (1)
shake cocktail7 ingredient3 ingredient1 shaker1 left right (1)
empty-shaker left shaker1 cocktail7 l2 l0 (1)
clean-shaker left right shaker1 (1)
grasp right shot14 (1)
pour-shot-to-clean-shaker shot14 ingredient1 shaker1 right l0 l1 (1)
leave left shaker1 (1)
clean-shot shot14 ingredient1 right left (1)
fill-shot shot14 ingredient4 right left dispenser4 (10)
pour-shot-to-used-shaker shot14 ingredient4 shaker1 right l1 l2 (1)
refill-shot shot14 ingredient4 right left dispenser4 (10)
grasp left shaker1 (1)
leave right shot14 (1)
shake cocktail1 ingredient1 ingredient4 shaker1 left right (1)
pour-shaker-to-shot cocktail1 shot1 left shaker1 l2 l1 (1)
empty-shaker left shaker1 cocktail1 l1 l0 (1)
clean-shaker left right shaker1 (1)
grasp right shot14 (1)
pour-shot-to-clean-shaker shot14 ingredient4 shaker1 right l0 l1 (1)
leave right shot14 (1)
grasp right shot13 (1)
pour-shot-to-used-shaker shot13 ingredient2 shaker1 right l1 l2 (1)
leave right shot13 (1)
shake cocktail3 ingredient4 ingredient2 shaker1 left right (1)
grasp right shot13 (1)
leave left shaker1 (1)
refill-shot shot13 ingredient2 right left dispenser2 (10)
grasp left shot14 (1)
leave right shot13 (1)
refill-shot shot14 ingredient4 left right dispenser4 (10)
grasp right shaker1 (1)
leave left shot14 (1)
pour-shaker-to-shot cocktail3 shot3 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail3 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot14 (1)
pour-shot-to-clean-shaker shot14 ingredient4 shaker1 left l0 l1 (1)
leave left shot14 (1)
grasp left shot13 (1)
pour-shot-to-used-shaker shot13 ingredient2 shaker1 left l1 l2 (1)
leave left shot13 (1)
shake cocktail6 ingredient4 ingredient2 shaker1 right left (1)
pour-shaker-to-shot cocktail6 shot7 right shaker1 l2 l1 (1)
grasp left shot13 (1)
leave right shaker1 (1)
refill-shot shot13 ingredient2 left right dispenser2 (10)
leave left shot13 (1)
grasp left shot14 (1)
clean-shot shot14 ingredient4 left right (1)
fill-shot shot14 ingredient1 left right dispenser1 (10)
grasp right shaker1 (1)
leave left shot14 (1)
empty-shaker right shaker1 cocktail6 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot14 (1)
pour-shot-to-clean-shaker shot14 ingredient1 shaker1 left l0 l1 (1)
leave left shot14 (1)
grasp left shot13 (1)
pour-shot-to-used-shaker shot13 ingredient2 shaker1 left l1 l2 (1)
leave left shot13 (1)
shake cocktail10 ingredient1 ingredient2 shaker1 right left (1)
pour-shaker-to-shot cocktail10 shot11 right shaker1 l2 l1 (1)
grasp left shot13 (1)
leave right shaker1 (1)
refill-shot shot13 ingredient2 left right dispenser2 (10)
leave left shot13 (1)
grasp left shot14 (1)
refill-shot shot14 ingredient1 left right dispenser1 (10)
grasp right shaker1 (1)
leave left shot14 (1)
empty-shaker right shaker1 cocktail10 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot14 (1)
pour-shot-to-clean-shaker shot14 ingredient1 shaker1 left l0 l1 (1)
leave left shot14 (1)
grasp left shot13 (1)
pour-shot-to-used-shaker shot13 ingredient2 shaker1 left l1 l2 (1)
leave left shot13 (1)
shake cocktail5 ingredient1 ingredient2 shaker1 right left (1)
pour-shaker-to-shot cocktail5 shot8 right shaker1 l2 l1 (1)
grasp left shot13 (1)
leave right shaker1 (1)
refill-shot shot13 ingredient2 left right dispenser2 (10)
[t=6.43456s, 85204 KB] Plan length: 199 step(s).
[t=6.43456s, 85204 KB] Plan cost: 451
[t=6.43456s, 85204 KB] Expanded 38855 state(s).
[t=6.43456s, 85204 KB] Reopened 0 state(s).
[t=6.43456s, 85204 KB] Evaluated 252678 state(s).
[t=6.43456s, 85204 KB] Evaluations: 291532
[t=6.43456s, 85204 KB] Generated 353665 state(s).
[t=6.43456s, 85204 KB] Dead ends: 0 state(s).
[t=6.43456s, 85204 KB] Number of registered states: 252678
[t=6.43456s, 85204 KB] Int hash set load factor: 252678/524288 = 0.481945
[t=6.43456s, 85204 KB] Int hash set resizes: 19
[t=6.43456s, 85204 KB] Search time: 3.52387s
[t=6.43456s, 85204 KB] Total time: 6.43456s
Solution found.
Peak memory: 85204 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Running validate.
INFO     validate stdin: None
INFO     validate time limit: None
INFO     validate memory limit: None
INFO     validate command line string: validate domain.pddl problem.pddl sas_plan
Checking plan: sas_plan
Plan executed successfully - checking goal
Plan valid
Final value: 451 

Successful plans:
Value: 451
 sas_plan 451 

validate exit code: 0

