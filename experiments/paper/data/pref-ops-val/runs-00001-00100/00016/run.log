INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: 1799.99s
INFO     translator memory limit: 4096 MB
INFO     translator command line string: /usr/bin/python3 /home/dmdoebber/downward-projects/downward/experiments/paper/data/pref-ops-val/code-11d6cc7f374e3fd7216f4422aa97b8db8c68d3c3_e5e41175/builds/release/bin/translate/translate.py domain.pddl problem.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.003s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.001s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.003s wall-clock]
Preparing model... [0.010s CPU, 0.002s wall-clock]
Generated 115 rules.
Computing model... [0.030s CPU, 0.031s wall-clock]
3094 relevant atoms
3221 auxiliary atoms
6315 final queue length
10878 total queue pushes
Completing instantiation... [0.060s CPU, 0.067s wall-clock]
Instantiating: [0.100s CPU, 0.104s wall-clock]
Computing fact groups...
Finding invariants...
24 initial candidates
Finding invariants: [0.010s CPU, 0.007s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
328 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.001s wall-clock]
Computing fact groups: [0.010s CPU, 0.011s wall-clock]
Building STRIPS to SAS dictionary... [0.010s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.004s wall-clock]
Translating task: [0.070s CPU, 0.081s wall-clock]
3672 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
3 propositions removed
Detecting unreachable propositions: [0.040s CPU, 0.035s wall-clock]
Reordering and filtering variables...
331 of 331 variables necessary.
15 of 18 mutex groups necessary.
2194 of 2194 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.020s CPU, 0.022s wall-clock]
Translator variables: 331
Translator derived variables: 0
Translator facts: 691
Translator goal facts: 13
Translator mutex groups: 15
Translator total mutex groups size: 45
Translator operators: 2194
Translator axioms: 0
Translator task size: 21018
Translator peak memory: 42272 KB
Writing output... [0.020s CPU, 0.014s wall-clock]
Done! [0.270s CPU, 0.276s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: 1799.7s
INFO     search memory limit: 4096 MB
INFO     search command line string: /home/dmdoebber/downward-projects/downward/experiments/paper/data/pref-ops-val/code-11d6cc7f374e3fd7216f4422aa97b8db8c68d3c3_e5e41175/builds/release/bin/downward --evaluator 'eval=ff()' --search 'eager_greedy([lsh(patterns=systematic(4), op_order=default, res_order=default, transform=adapt_costs(cost_type=ONE))],  preferred=[eval])' --internal-plan-file sas_plan < output.sas
[t=0s, 46116 KB] reading input...
[t=0.011318s, 46976 KB] done reading input!
[t=0.011318s, 47996 KB] Simplifying 8034 unary operators... done! [6914 unary operators]
[t=0.0153192s, 48660 KB] time to simplify: 0.00400126s
[t=0.0153192s, 48660 KB] Initializing additive heuristic...
[t=0.0153192s, 48660 KB] Initializing FF heuristic...
[t=0.0153192s, 48660 KB] stop search of patterns: 3355443KB
[t=0.0153192s, 48660 KB] Generating patterns using the systematic generator...
[t=0.0153192s, 48660 KB] building causal graph...done! [t=0.00399998s]
[t=0.159025s, 77848 KB] Found 119732 SGA patterns.
[t=2.67222s, 85316 KB] Found 132266 interesting patterns.
[t=2.69213s, 85316 KB] [13, 99, 3588, 128566]
[t=2.74403s, 85316 KB] Systematic generator number of patterns: 336
[t=2.74403s, 85316 KB] Systematic generator total PDB size: 7000
[t=2.74403s, 85316 KB] Systematic generator computation time: 2.72871s
[t=2.74403s, 85316 KB] Computing PDBs for pattern collection...
[t=2.87597s, 85316 KB] Done computing PDBs for pattern collection: 0.131939s
[t=2.89196s, 85316 KB] Operators: 2194
[t=2.89196s, 85316 KB] Restrictions: 336
[t=2.89196s, 85316 KB] Mean mentions: 93
[t=2.89196s, 85316 KB] Mean operators: 612
[t=2.89196s, 85316 KB] Building successor generator...done!
[t=2.89196s, 85316 KB] peak memory difference for successor generator creation: 0 KB
[t=2.89196s, 85316 KB] time for successor generation creation: 0s
[t=2.89196s, 85316 KB] Variables: 331
[t=2.89196s, 85316 KB] FactPairs: 691
[t=2.89196s, 85316 KB] Bytes per state: 44
[t=2.89196s, 85316 KB] Conducting best first search without reopening closed nodes, (real) bound = 2147483647
[t=2.89196s, 85316 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 26
[t=2.89196s, 85316 KB] g=0, 1 evaluated, 0 expanded
[t=2.89196s, 85316 KB] Initial heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 26
[t=2.89196s, 85316 KB] pruning method: none
[t=2.89196s, 85316 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 25
[t=2.89196s, 85316 KB] g=11, 76 evaluated, 4 expanded
[t=2.89596s, 85316 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 24
[t=2.89596s, 85316 KB] g=22, 147 evaluated, 13 expanded
[t=2.89596s, 85316 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 23
[t=2.89596s, 85316 KB] g=34, 244 evaluated, 26 expanded
[t=2.89596s, 85316 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 22
[t=2.89596s, 85316 KB] g=45, 311 evaluated, 32 expanded
[t=2.89996s, 85316 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 21
[t=2.89996s, 85316 KB] g=49, 426 evaluated, 45 expanded
[t=3.20387s, 85316 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 20
[t=3.20387s, 85316 KB] g=80, 12529 evaluated, 1979 expanded
[t=3.21186s, 85316 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 19
[t=3.21186s, 85316 KB] g=84, 12773 evaluated, 2008 expanded
[t=3.39981s, 85316 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 18
[t=3.39981s, 85316 KB] g=111, 20039 evaluated, 3197 expanded
[t=3.4038s, 85316 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 17
[t=3.4038s, 85316 KB] g=115, 20283 evaluated, 3226 expanded
[t=3.52777s, 85316 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 16
[t=3.52777s, 85316 KB] g=142, 24481 evaluated, 4039 expanded
[t=3.53177s, 85316 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 15
[t=3.53177s, 85316 KB] g=146, 24724 evaluated, 4068 expanded
[t=3.58375s, 85316 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 14
[t=3.58375s, 85316 KB] g=161, 26860 evaluated, 4410 expanded
[t=3.60775s, 85316 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 13
[t=3.60775s, 85316 KB] g=177, 27821 evaluated, 4583 expanded
[t=3.60775s, 85316 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 12
[t=3.60775s, 85316 KB] g=178, 27840 evaluated, 4584 expanded
[t=3.86765s, 85316 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 11
[t=3.86765s, 85316 KB] g=208, 37121 evaluated, 6346 expanded
[t=3.86765s, 85316 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 10
[t=3.86765s, 85316 KB] g=209, 37143 evaluated, 6347 expanded
[t=4.53146s, 85316 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 9
[t=4.53146s, 85316 KB] g=239, 61949 evaluated, 11178 expanded
[t=4.53146s, 85316 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 8
[t=4.53146s, 85316 KB] g=240, 61971 evaluated, 11179 expanded
[t=4.98732s, 85316 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 7
[t=4.98732s, 85316 KB] g=270, 78099 evaluated, 14429 expanded
[t=4.98732s, 85316 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 6
[t=4.98732s, 85316 KB] g=271, 78118 evaluated, 14430 expanded
[t=5.35122s, 85316 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 5
[t=5.35122s, 85316 KB] g=296, 91936 evaluated, 17151 expanded
[t=5.35521s, 85316 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 4
[t=5.35521s, 85316 KB] g=308, 92072 evaluated, 17165 expanded
[t=6.17497s, 85316 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 3
[t=6.17497s, 85316 KB] g=332, 122649 evaluated, 23342 expanded
[t=6.17497s, 85316 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 2
[t=6.17497s, 85316 KB] g=344, 122778 evaluated, 23356 expanded
[t=6.70281s, 85316 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 1
[t=6.70281s, 85316 KB] g=368, 142991 evaluated, 27457 expanded
[t=6.70281s, 85316 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 0
[t=6.70281s, 85316 KB] g=380, 143071 evaluated, 27466 expanded
[t=6.70281s, 85316 KB] Solution found!
[t=6.70281s, 85316 KB] Actual search time: 3.81085s
grasp right shot12 (1)
fill-shot shot12 ingredient2 right left dispenser2 (10)
pour-shot-to-clean-shaker shot12 ingredient2 shaker1 right l0 l1 (1)
refill-shot shot12 ingredient2 right left dispenser2 (10)
grasp left shot13 (1)
leave right shot12 (1)
fill-shot shot13 ingredient3 left right dispenser3 (10)
pour-shot-to-used-shaker shot13 ingredient3 shaker1 left l1 l2 (1)
refill-shot shot13 ingredient3 left right dispenser3 (10)
grasp right shaker1 (1)
leave left shot13 (1)
shake cocktail4 ingredient3 ingredient2 shaker1 right left (1)
pour-shaker-to-shot cocktail4 shot3 right shaker1 l2 l1 (1)
leave right shaker1 (1)
grasp left shot14 (1)
fill-shot shot14 ingredient1 left right dispenser1 (10)
grasp right shaker1 (1)
leave left shot14 (1)
empty-shaker right shaker1 cocktail4 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot14 (1)
pour-shot-to-clean-shaker shot14 ingredient1 shaker1 left l0 l1 (1)
leave right shaker1 (1)
clean-shot shot14 ingredient1 left right (1)
fill-shot shot14 ingredient4 left right dispenser4 (10)
pour-shot-to-used-shaker shot14 ingredient4 shaker1 left l1 l2 (1)
grasp right shaker1 (1)
leave left shot14 (1)
shake cocktail5 ingredient1 ingredient4 shaker1 right left (1)
pour-shaker-to-shot cocktail5 shot4 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail5 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot14 (1)
leave right shaker1 (1)
refill-shot shot14 ingredient4 left right dispenser4 (10)
pour-shot-to-clean-shaker shot14 ingredient4 shaker1 left l0 l1 (1)
clean-shot shot14 ingredient4 left right (1)
fill-shot shot14 ingredient1 left right dispenser1 (10)
pour-shot-to-used-shaker shot14 ingredient1 shaker1 left l1 l2 (1)
grasp right shaker1 (1)
leave left shot14 (1)
shake cocktail11 ingredient4 ingredient1 shaker1 right left (1)
pour-shaker-to-shot cocktail11 shot8 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail11 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot14 (1)
leave right shaker1 (1)
refill-shot shot14 ingredient1 left right dispenser1 (10)
pour-shot-to-clean-shaker shot14 ingredient1 shaker1 left l0 l1 (1)
clean-shot shot14 ingredient1 left right (1)
fill-shot shot14 ingredient4 left right dispenser4 (10)
pour-shot-to-used-shaker shot14 ingredient4 shaker1 left l1 l2 (1)
grasp right shaker1 (1)
leave left shot14 (1)
shake cocktail3 ingredient4 ingredient1 shaker1 right left (1)
pour-shaker-to-shot cocktail3 shot6 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail3 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot12 (1)
pour-shot-to-clean-shaker shot12 ingredient2 shaker1 left l0 l1 (1)
leave right shaker1 (1)
refill-shot shot12 ingredient2 left right dispenser2 (10)
leave left shot12 (1)
grasp left shot14 (1)
refill-shot shot14 ingredient4 left right dispenser4 (10)
grasp right shaker1 (1)
pour-shot-to-used-shaker shot14 ingredient4 shaker1 left l1 l2 (1)
leave left shot14 (1)
shake cocktail1 ingredient4 ingredient2 shaker1 right left (1)
pour-shaker-to-shot cocktail1 shot11 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail1 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot14 (1)
leave right shaker1 (1)
refill-shot shot14 ingredient4 left right dispenser4 (10)
pour-shot-to-clean-shaker shot14 ingredient4 shaker1 left l0 l1 (1)
clean-shot shot14 ingredient4 left right (1)
fill-shot shot14 ingredient1 left right dispenser1 (10)
grasp right shaker1 (1)
pour-shot-to-used-shaker shot14 ingredient1 shaker1 left l1 l2 (1)
leave left shot14 (1)
shake cocktail7 ingredient1 ingredient4 shaker1 right left (1)
pour-shaker-to-shot cocktail7 shot5 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail7 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot14 (1)
leave right shaker1 (1)
refill-shot shot14 ingredient1 left right dispenser1 (10)
pour-shot-to-clean-shaker shot14 ingredient1 shaker1 left l0 l1 (1)
clean-shot shot14 ingredient1 left right (1)
fill-shot shot14 ingredient4 left right dispenser4 (10)
grasp right shaker1 (1)
pour-shot-to-used-shaker shot14 ingredient4 shaker1 left l1 l2 (1)
leave left shot14 (1)
shake cocktail8 ingredient1 ingredient4 shaker1 right left (1)
pour-shaker-to-shot cocktail8 shot9 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail8 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot14 (1)
leave right shaker1 (1)
refill-shot shot14 ingredient4 left right dispenser4 (10)
pour-shot-to-clean-shaker shot14 ingredient4 shaker1 left l0 l1 (1)
clean-shot shot14 ingredient4 left right (1)
fill-shot shot14 ingredient1 left right dispenser1 (10)
grasp right shaker1 (1)
pour-shot-to-used-shaker shot14 ingredient1 shaker1 left l1 l2 (1)
leave left shot14 (1)
shake cocktail9 ingredient4 ingredient1 shaker1 right left (1)
pour-shaker-to-shot cocktail9 shot2 right shaker1 l2 l1 (1)
leave right shaker1 (1)
grasp left shot14 (1)
clean-shot shot14 ingredient1 left right (1)
fill-shot shot14 ingredient4 left right dispenser4 (10)
grasp right shaker1 (1)
leave left shot14 (1)
empty-shaker right shaker1 cocktail9 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot14 (1)
pour-shot-to-clean-shaker shot14 ingredient4 shaker1 left l0 l1 (1)
leave left shot14 (1)
grasp left shot13 (1)
pour-shot-to-used-shaker shot13 ingredient3 shaker1 left l1 l2 (1)
leave left shot13 (1)
shake cocktail10 ingredient4 ingredient3 shaker1 right left (1)
pour-shaker-to-shot cocktail10 shot7 right shaker1 l2 l1 (1)
grasp left shot13 (1)
leave right shaker1 (1)
refill-shot shot13 ingredient3 left right dispenser3 (10)
grasp right shot14 (1)
leave left shot13 (1)
refill-shot shot14 ingredient4 right left dispenser4 (10)
grasp left shaker1 (1)
leave right shot14 (1)
empty-shaker left shaker1 cocktail10 l1 l0 (1)
clean-shaker left right shaker1 (1)
grasp right shot14 (1)
pour-shot-to-clean-shaker shot14 ingredient4 shaker1 right l0 l1 (1)
leave right shot14 (1)
grasp right shot13 (1)
pour-shot-to-used-shaker shot13 ingredient3 shaker1 right l1 l2 (1)
leave right shot13 (1)
shake cocktail2 ingredient4 ingredient3 shaker1 left right (1)
pour-shaker-to-shot cocktail2 shot10 left shaker1 l2 l1 (1)
grasp right shot13 (1)
leave left shaker1 (1)
refill-shot shot13 ingredient3 right left dispenser3 (10)
grasp left shot14 (1)
leave right shot13 (1)
refill-shot shot14 ingredient4 left right dispenser4 (10)
grasp right shaker1 (1)
leave left shot14 (1)
empty-shaker right shaker1 cocktail2 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot14 (1)
pour-shot-to-clean-shaker shot14 ingredient4 shaker1 left l0 l1 (1)
leave left shot14 (1)
grasp left shot13 (1)
pour-shot-to-used-shaker shot13 ingredient3 shaker1 left l1 l2 (1)
leave left shot13 (1)
shake cocktail6 ingredient4 ingredient3 shaker1 right left (1)
pour-shaker-to-shot cocktail6 shot1 right shaker1 l2 l1 (1)
grasp left shot13 (1)
leave right shaker1 (1)
refill-shot shot13 ingredient3 left right dispenser3 (10)
[t=6.70281s, 85316 KB] Plan length: 164 step(s).
[t=6.70281s, 85316 KB] Plan cost: 380
[t=6.70281s, 85316 KB] Expanded 27467 state(s).
[t=6.70281s, 85316 KB] Reopened 0 state(s).
[t=6.70281s, 85316 KB] Evaluated 143074 state(s).
[t=6.70281s, 85316 KB] Evaluations: 170540
[t=6.70281s, 85316 KB] Generated 221811 state(s).
[t=6.70281s, 85316 KB] Dead ends: 0 state(s).
[t=6.70281s, 85316 KB] Number of registered states: 143074
[t=6.70281s, 85316 KB] Int hash set load factor: 143074/262144 = 0.545784
[t=6.70281s, 85316 KB] Int hash set resizes: 18
[t=6.70281s, 85316 KB] Search time: 3.81085s
[t=6.70281s, 85316 KB] Total time: 6.70281s
Solution found.
Peak memory: 85316 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Running validate.
INFO     validate stdin: None
INFO     validate time limit: None
INFO     validate memory limit: None
INFO     validate command line string: validate domain.pddl problem.pddl sas_plan
Checking plan: sas_plan
Plan executed successfully - checking goal
Plan valid
Final value: 380 

Successful plans:
Value: 380
 sas_plan 380 

validate exit code: 0

