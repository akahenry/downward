INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: 1799.98s
INFO     translator memory limit: 4096 MB
INFO     translator command line string: /usr/bin/python3 /home/dmdoebber/downward-projects/downward/experiments/paper/data/pref-ops-val/code-11d6cc7f374e3fd7216f4422aa97b8db8c68d3c3_e5e41175/builds/release/bin/translate/translate.py domain.pddl problem.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.003s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.001s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.003s wall-clock]
Preparing model... [0.000s CPU, 0.002s wall-clock]
Generated 115 rules.
Computing model... [0.030s CPU, 0.031s wall-clock]
3094 relevant atoms
3221 auxiliary atoms
6315 final queue length
10878 total queue pushes
Completing instantiation... [0.070s CPU, 0.064s wall-clock]
Instantiating: [0.110s CPU, 0.101s wall-clock]
Computing fact groups...
Finding invariants...
24 initial candidates
Finding invariants: [0.000s CPU, 0.007s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
328 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.010s CPU, 0.001s wall-clock]
Computing fact groups: [0.010s CPU, 0.010s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.004s wall-clock]
Translating task: [0.080s CPU, 0.079s wall-clock]
3672 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
3 propositions removed
Detecting unreachable propositions: [0.040s CPU, 0.034s wall-clock]
Reordering and filtering variables...
331 of 331 variables necessary.
15 of 18 mutex groups necessary.
2194 of 2194 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.020s CPU, 0.022s wall-clock]
Translator variables: 331
Translator derived variables: 0
Translator facts: 691
Translator goal facts: 13
Translator mutex groups: 15
Translator total mutex groups size: 45
Translator operators: 2194
Translator axioms: 0
Translator task size: 21018
Translator peak memory: 42272 KB
Writing output... [0.020s CPU, 0.014s wall-clock]
Done! [0.280s CPU, 0.268s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: 1799.69s
INFO     search memory limit: 4096 MB
INFO     search command line string: /home/dmdoebber/downward-projects/downward/experiments/paper/data/pref-ops-val/code-11d6cc7f374e3fd7216f4422aa97b8db8c68d3c3_e5e41175/builds/release/bin/downward --evaluator 'eval=ff()' --search 'eager_greedy([lsh(patterns=systematic(4), op_order=default, res_order=default, transform=adapt_costs(cost_type=ONE))],  preferred=[eval])' --internal-plan-file sas_plan < output.sas
[t=0s, 46116 KB] reading input...
[t=0.0107851s, 46976 KB] done reading input!
[t=0.0107851s, 47996 KB] Simplifying 8034 unary operators... done! [6930 unary operators]
[t=0.0147854s, 48660 KB] time to simplify: 0.00400025s
[t=0.0147854s, 48660 KB] Initializing additive heuristic...
[t=0.0147854s, 48660 KB] Initializing FF heuristic...
[t=0.0147854s, 48660 KB] stop search of patterns: 3355443KB
[t=0.0147854s, 48660 KB] Generating patterns using the systematic generator...
[t=0.0147854s, 48660 KB] building causal graph...done! [t=0.00399974s]
[t=0.118549s, 76468 KB] Found 112486 SGA patterns.
[t=2.61334s, 78056 KB] Found 126142 interesting patterns.
[t=2.62531s, 78056 KB] [13, 95, 3390, 122644]
[t=2.65724s, 78056 KB] Systematic generator number of patterns: 324
[t=2.65724s, 78056 KB] Systematic generator total PDB size: 7764
[t=2.65724s, 78056 KB] Systematic generator computation time: 2.64245s
[t=2.65724s, 78056 KB] Computing PDBs for pattern collection...
[t=2.7852s, 78056 KB] Done computing PDBs for pattern collection: 0.127958s
[t=2.8012s, 78056 KB] Operators: 2194
[t=2.8012s, 78056 KB] Restrictions: 324
[t=2.8012s, 78056 KB] Mean mentions: 88
[t=2.8012s, 78056 KB] Mean operators: 597
[t=2.8012s, 78056 KB] Building successor generator...done!
[t=2.8012s, 78056 KB] peak memory difference for successor generator creation: 0 KB
[t=2.8012s, 78056 KB] time for successor generation creation: 0s
[t=2.8012s, 78056 KB] Variables: 331
[t=2.8012s, 78056 KB] FactPairs: 691
[t=2.8012s, 78056 KB] Bytes per state: 44
[t=2.8012s, 78056 KB] Conducting best first search without reopening closed nodes, (real) bound = 2147483647
[t=2.8012s, 78056 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 26
[t=2.8012s, 78056 KB] g=0, 1 evaluated, 0 expanded
[t=2.8012s, 78056 KB] Initial heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 26
[t=2.8012s, 78056 KB] pruning method: none
[t=2.80519s, 78056 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 25
[t=2.80519s, 78056 KB] g=11, 152 evaluated, 11 expanded
[t=2.80519s, 78056 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 24
[t=2.80519s, 78056 KB] g=22, 217 evaluated, 15 expanded
[t=2.80519s, 78056 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 23
[t=2.80519s, 78056 KB] g=33, 353 evaluated, 39 expanded
[t=2.80919s, 78056 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 22
[t=2.80919s, 78056 KB] g=39, 665 evaluated, 58 expanded
[t=2.95717s, 78056 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 21
[t=2.95717s, 78056 KB] g=67, 11107 evaluated, 1183 expanded
[t=2.95717s, 78056 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 20
[t=2.95717s, 78056 KB] g=70, 11202 evaluated, 1189 expanded
[t=3.07314s, 78056 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 19
[t=3.07314s, 78056 KB] g=98, 18058 evaluated, 1959 expanded
[t=3.10913s, 78056 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 18
[t=3.10913s, 78056 KB] g=101, 21477 evaluated, 2216 expanded
[t=3.39708s, 78056 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 17
[t=3.39708s, 78056 KB] g=133, 39171 evaluated, 4009 expanded
[t=3.39708s, 78056 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 16
[t=3.39708s, 78056 KB] g=136, 39266 evaluated, 4015 expanded
[t=3.70103s, 78056 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 15
[t=3.70103s, 78056 KB] g=168, 53909 evaluated, 5928 expanded
[t=3.77301s, 78056 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 14
[t=3.77301s, 78056 KB] g=172, 58988 evaluated, 6327 expanded
[t=4.3369s, 78056 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 13
[t=4.3369s, 78056 KB] g=204, 89796 evaluated, 9789 expanded
[t=4.40489s, 78056 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 12
[t=4.40489s, 78056 KB] g=208, 94638 evaluated, 10179 expanded
[t=4.68883s, 78056 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 11
[t=4.68883s, 78056 KB] g=241, 110878 evaluated, 11983 expanded
[t=4.71683s, 78056 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 10
[t=4.71683s, 78056 KB] g=234, 112978 evaluated, 12149 expanded
[t=4.72483s, 78056 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 9
[t=4.72483s, 78056 KB] g=246, 113125 evaluated, 12164 expanded
[t=4.75282s, 78056 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 8
[t=4.75282s, 78056 KB] g=264, 115136 evaluated, 12342 expanded
[t=4.76482s, 78056 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 7
[t=4.76482s, 78056 KB] g=280, 116088 evaluated, 12419 expanded
[t=4.76482s, 78056 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 6
[t=4.76482s, 78056 KB] g=281, 116109 evaluated, 12420 expanded
[t=5.22074s, 78056 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 5
[t=5.22074s, 78056 KB] g=315, 137838 evaluated, 15681 expanded
[t=5.22074s, 78056 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 4
[t=5.22074s, 78056 KB] g=316, 137859 evaluated, 15682 expanded
[t=5.56068s, 78056 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 3
[t=5.56068s, 78056 KB] g=341, 152772 evaluated, 18175 expanded
[t=5.56068s, 78056 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 2
[t=5.56068s, 78056 KB] g=353, 152863 evaluated, 18186 expanded
[t=5.81263s, 78056 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 1
[t=5.81263s, 78056 KB] g=400, 163715 evaluated, 20115 expanded
[t=5.81263s, 78056 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 0
[t=5.81263s, 78056 KB] g=401, 163732 evaluated, 20116 expanded
[t=5.81263s, 78056 KB] Solution found!
[t=5.81263s, 78056 KB] Actual search time: 3.01144s
grasp left shot12 (1)
fill-shot shot12 ingredient2 left right dispenser2 (10)
pour-shot-to-clean-shaker shot12 ingredient2 shaker1 left l0 l1 (1)
refill-shot shot12 ingredient2 left right dispenser2 (10)
leave left shot12 (1)
grasp left shot7 (1)
fill-shot shot7 ingredient1 left right dispenser1 (10)
pour-shot-to-used-shaker shot7 ingredient1 shaker1 left l1 l2 (1)
clean-shot shot7 ingredient1 left right (1)
grasp right shaker1 (1)
leave left shot7 (1)
shake cocktail11 ingredient1 ingredient2 shaker1 right left (1)
pour-shaker-to-shot cocktail11 shot11 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail11 l1 l0 (1)
clean-shaker right left shaker1 (1)
leave right shaker1 (1)
grasp left shot14 (1)
fill-shot shot14 ingredient1 left right dispenser1 (10)
pour-shot-to-clean-shaker shot14 ingredient1 shaker1 left l0 l1 (1)
clean-shot shot14 ingredient1 left right (1)
fill-shot shot14 ingredient3 left right dispenser3 (10)
pour-shot-to-used-shaker shot14 ingredient3 shaker1 left l1 l2 (1)
grasp right shaker1 (1)
leave left shot14 (1)
shake cocktail7 ingredient1 ingredient3 shaker1 right left (1)
pour-shaker-to-shot cocktail7 shot10 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail7 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot14 (1)
leave right shaker1 (1)
refill-shot shot14 ingredient3 left right dispenser3 (10)
pour-shot-to-clean-shaker shot14 ingredient3 shaker1 left l0 l1 (1)
clean-shot shot14 ingredient3 left right (1)
fill-shot shot14 ingredient4 left right dispenser4 (10)
pour-shot-to-used-shaker shot14 ingredient4 shaker1 left l1 l2 (1)
grasp right shaker1 (1)
leave left shot14 (1)
shake cocktail9 ingredient3 ingredient4 shaker1 right left (1)
grasp left shot14 (1)
leave right shaker1 (1)
refill-shot shot14 ingredient4 left right dispenser4 (10)
grasp right shaker1 (1)
leave left shot14 (1)
pour-shaker-to-shot cocktail9 shot6 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail9 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot14 (1)
pour-shot-to-clean-shaker shot14 ingredient4 shaker1 left l0 l1 (1)
leave right shaker1 (1)
clean-shot shot14 ingredient4 left right (1)
fill-shot shot14 ingredient1 left right dispenser1 (10)
pour-shot-to-used-shaker shot14 ingredient1 shaker1 left l1 l2 (1)
refill-shot shot14 ingredient1 left right dispenser1 (10)
grasp right shaker1 (1)
leave left shot14 (1)
shake cocktail8 ingredient4 ingredient1 shaker1 right left (1)
pour-shaker-to-shot cocktail8 shot5 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail8 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot14 (1)
pour-shot-to-clean-shaker shot14 ingredient1 shaker1 left l0 l1 (1)
leave left shot14 (1)
grasp left shot12 (1)
pour-shot-to-used-shaker shot12 ingredient2 shaker1 left l1 l2 (1)
leave left shot12 (1)
shake cocktail3 ingredient2 ingredient1 shaker1 right left (1)
grasp left shot12 (1)
leave right shaker1 (1)
refill-shot shot12 ingredient2 left right dispenser2 (10)
leave left shot12 (1)
grasp left shot14 (1)
refill-shot shot14 ingredient1 left right dispenser1 (10)
grasp right shaker1 (1)
leave left shot14 (1)
pour-shaker-to-shot cocktail3 shot2 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail3 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot14 (1)
pour-shot-to-clean-shaker shot14 ingredient1 shaker1 left l0 l1 (1)
leave left shot14 (1)
grasp left shot12 (1)
pour-shot-to-used-shaker shot12 ingredient2 shaker1 left l1 l2 (1)
leave left shot12 (1)
shake cocktail4 ingredient2 ingredient1 shaker1 right left (1)
grasp left shot12 (1)
leave right shaker1 (1)
refill-shot shot12 ingredient2 left right dispenser2 (10)
leave left shot12 (1)
grasp left shot14 (1)
clean-shot shot14 ingredient1 left right (1)
fill-shot shot14 ingredient3 left right dispenser3 (10)
grasp right shaker1 (1)
leave left shot14 (1)
pour-shaker-to-shot cocktail4 shot1 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail4 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot14 (1)
pour-shot-to-clean-shaker shot14 ingredient3 shaker1 left l0 l1 (1)
leave left shot14 (1)
grasp left shot12 (1)
pour-shot-to-used-shaker shot12 ingredient2 shaker1 left l1 l2 (1)
leave left shot12 (1)
shake cocktail5 ingredient3 ingredient2 shaker1 right left (1)
pour-shaker-to-shot cocktail5 shot4 right shaker1 l2 l1 (1)
grasp left shot12 (1)
leave right shaker1 (1)
refill-shot shot12 ingredient2 left right dispenser2 (10)
grasp right shaker1 (1)
leave left shot12 (1)
pour-shaker-to-shot cocktail5 shot13 right shaker1 l1 l0 (1)
empty-shaker right shaker1 cocktail5 l0 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot12 (1)
pour-shot-to-clean-shaker shot12 ingredient2 shaker1 left l0 l1 (1)
leave right shaker1 (1)
refill-shot shot12 ingredient2 left right dispenser2 (10)
leave left shot12 (1)
grasp left shot14 (1)
refill-shot shot14 ingredient3 left right dispenser3 (10)
grasp right shaker1 (1)
pour-shot-to-used-shaker shot14 ingredient3 shaker1 left l1 l2 (1)
leave left shot14 (1)
shake cocktail10 ingredient2 ingredient3 shaker1 right left (1)
pour-shaker-to-shot cocktail10 shot8 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail10 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot14 (1)
leave right shaker1 (1)
refill-shot shot14 ingredient3 left right dispenser3 (10)
pour-shot-to-clean-shaker shot14 ingredient3 shaker1 left l0 l1 (1)
clean-shot shot14 ingredient3 left right (1)
fill-shot shot14 ingredient2 left right dispenser2 (10)
grasp right shaker1 (1)
pour-shot-to-used-shaker shot14 ingredient2 shaker1 left l1 l2 (1)
leave left shot14 (1)
shake cocktail6 ingredient3 ingredient2 shaker1 right left (1)
pour-shaker-to-shot cocktail6 shot9 right shaker1 l2 l1 (1)
leave right shaker1 (1)
grasp left shot14 (1)
clean-shot shot14 ingredient2 left right (1)
fill-shot shot14 ingredient3 left right dispenser3 (10)
grasp right shaker1 (1)
leave left shot14 (1)
empty-shaker right shaker1 cocktail6 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot14 (1)
pour-shot-to-clean-shaker shot14 ingredient3 shaker1 left l0 l1 (1)
leave left shot14 (1)
grasp left shot12 (1)
pour-shot-to-used-shaker shot12 ingredient2 shaker1 left l1 l2 (1)
leave left shot12 (1)
shake cocktail1 ingredient2 ingredient3 shaker1 right left (1)
pour-shaker-to-shot cocktail1 shot7 right shaker1 l2 l1 (1)
grasp left shot12 (1)
leave right shaker1 (1)
refill-shot shot12 ingredient2 left right dispenser2 (10)
leave left shot12 (1)
grasp left shot14 (1)
clean-shot shot14 ingredient3 left right (1)
fill-shot shot14 ingredient4 left right dispenser4 (10)
empty-shot left shot14 ingredient4 (1)
leave left shot14 (1)
grasp left shaker1 (1)
empty-shaker left shaker1 cocktail1 l1 l0 (1)
clean-shaker left right shaker1 (1)
grasp right shot12 (1)
leave left shaker1 (1)
pour-shot-to-clean-shaker shot12 ingredient2 shaker1 right l0 l1 (1)
refill-shot shot12 ingredient2 right left dispenser2 (10)
grasp left shot14 (1)
leave right shot12 (1)
refill-shot shot14 ingredient4 left right dispenser4 (10)
grasp right shaker1 (1)
pour-shot-to-used-shaker shot14 ingredient4 shaker1 left l1 l2 (1)
leave left shot14 (1)
shake cocktail2 ingredient4 ingredient2 shaker1 right left (1)
pour-shaker-to-shot cocktail2 shot3 right shaker1 l2 l1 (1)
[t=5.81263s, 78056 KB] Plan length: 177 step(s).
[t=5.81263s, 78056 KB] Plan cost: 393
[t=5.81263s, 78056 KB] Expanded 20117 state(s).
[t=5.81263s, 78056 KB] Reopened 0 state(s).
[t=5.81263s, 78056 KB] Evaluated 163732 state(s).
[t=5.81263s, 78056 KB] Evaluations: 183848
[t=5.81263s, 78056 KB] Generated 214467 state(s).
[t=5.81263s, 78056 KB] Dead ends: 0 state(s).
[t=5.81263s, 78056 KB] Number of registered states: 163732
[t=5.81263s, 78056 KB] Int hash set load factor: 163732/262144 = 0.624588
[t=5.81263s, 78056 KB] Int hash set resizes: 18
[t=5.81263s, 78056 KB] Search time: 3.01144s
[t=5.81263s, 78056 KB] Total time: 5.81263s
Solution found.
Peak memory: 78056 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Running validate.
INFO     validate stdin: None
INFO     validate time limit: None
INFO     validate memory limit: None
INFO     validate command line string: validate domain.pddl problem.pddl sas_plan
Checking plan: sas_plan
Plan executed successfully - checking goal
Plan valid
Final value: 393 

Successful plans:
Value: 393
 sas_plan 393 

validate exit code: 0

