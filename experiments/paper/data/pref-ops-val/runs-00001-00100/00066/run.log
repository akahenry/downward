INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: 1799.99s
INFO     translator memory limit: 4096 MB
INFO     translator command line string: /usr/bin/python3 /home/dmdoebber/downward-projects/downward/experiments/paper/data/pref-ops-val/code-11d6cc7f374e3fd7216f4422aa97b8db8c68d3c3_e5e41175/builds/release/bin/translate/translate.py domain.pddl problem.pddl --sas-file output.sas
Parsing...
Parsing: [0.090s CPU, 0.081s wall-clock]
Normalizing task... [0.000s CPU, 0.003s wall-clock]
Instantiating...
Generating Datalog program... [0.020s CPU, 0.023s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.010s CPU, 0.001s wall-clock]
Preparing model... [0.150s CPU, 0.155s wall-clock]
Generated 23 rules.
Computing model... [0.410s CPU, 0.405s wall-clock]
33926 relevant atoms
61452 auxiliary atoms
95378 final queue length
108944 total queue pushes
Completing instantiation... [0.270s CPU, 0.270s wall-clock]
Instantiating: [0.880s CPU, 0.874s wall-clock]
Computing fact groups...
Finding invariants...
9 initial candidates
Finding invariants: [0.000s CPU, 0.005s wall-clock]
Checking invariant weight... [0.010s CPU, 0.005s wall-clock]
Instantiating groups... [0.000s CPU, 0.004s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
0 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.016s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.010s CPU, 0.009s wall-clock]
Translating task: [0.140s CPU, 0.141s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
13 propositions removed
Detecting unreachable propositions: [0.120s CPU, 0.116s wall-clock]
Reordering and filtering variables...
13 of 13 variables necessary.
0 of 13 mutex groups necessary.
7082 of 7082 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.020s CPU, 0.019s wall-clock]
Translator variables: 13
Translator derived variables: 0
Translator facts: 369
Translator goal facts: 11
Translator mutex groups: 0
Translator total mutex groups size: 0
Translator operators: 7082
Translator axioms: 0
Translator task size: 35561
Translator peak memory: 80932 KB
Writing output... [0.020s CPU, 0.024s wall-clock]
Done! [1.290s CPU, 1.286s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: 1798.68s
INFO     search memory limit: 4096 MB
INFO     search command line string: /home/dmdoebber/downward-projects/downward/experiments/paper/data/pref-ops-val/code-11d6cc7f374e3fd7216f4422aa97b8db8c68d3c3_e5e41175/builds/release/bin/downward --evaluator 'eval=ff()' --search 'eager_greedy([lsh(patterns=systematic(4), op_order=default, res_order=default, transform=adapt_costs(cost_type=ONE))],  preferred=[eval])' --internal-plan-file sas_plan < output.sas
[t=0s, 46116 KB] reading input...
[t=0.0159986s, 48092 KB] done reading input!
[t=0.0159986s, 49008 KB] Simplifying 13922 unary operators... done! [13922 unary operators]
[t=0.0199991s, 50268 KB] time to simplify: 0.00400052s
[t=0.0199991s, 50268 KB] Initializing additive heuristic...
[t=0.0199991s, 50268 KB] Initializing FF heuristic...
[t=0.0199991s, 50268 KB] stop search of patterns: 3355443KB
[t=0.0199991s, 50268 KB] Generating patterns using the systematic generator...
[t=0.0199991s, 50268 KB] building causal graph...done! [t=0.0039997s]
[t=0.0239988s, 50268 KB] Found 33 SGA patterns.
[t=0.0239988s, 50268 KB] Found 308 interesting patterns.
[t=0.0239988s, 50268 KB] [11, 11, 66, 220]
[t=0.0239988s, 50268 KB] Systematic generator number of patterns: 66
[t=0.0239988s, 50268 KB] Systematic generator total PDB size: 2601456
[t=0.0239988s, 50268 KB] Systematic generator computation time: 0.0039997s
[t=0.0239988s, 50268 KB] Computing PDBs for pattern collection...
[t=0.719967s, 61536 KB] Done computing PDBs for pattern collection: 0.695968s
[t=0.727967s, 63216 KB] Operators: 7082
[t=0.727967s, 63216 KB] Restrictions: 66
[t=0.727967s, 63216 KB] Mean mentions: 53
[t=0.727967s, 63216 KB] Mean operators: 5740
[t=0.727967s, 63216 KB] Building successor generator...done!
[t=0.727967s, 63856 KB] peak memory difference for successor generator creation: 640 KB
[t=0.727967s, 63856 KB] time for successor generation creation: 0s
[t=0.727967s, 63856 KB] Variables: 13
[t=0.727967s, 63856 KB] FactPairs: 369
[t=0.727967s, 63856 KB] Bytes per state: 8
[t=0.727967s, 63856 KB] Conducting best first search without reopening closed nodes, (real) bound = 2147483647
[t=0.727967s, 63856 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 33
[t=0.727967s, 63856 KB] g=0, 1 evaluated, 0 expanded
[t=0.727967s, 63856 KB] Initial heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 33
[t=0.727967s, 63856 KB] pruning method: none
[t=0.727967s, 63856 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 32
[t=0.727967s, 63856 KB] g=1, 3 evaluated, 1 expanded
[t=0.727967s, 63856 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 31
[t=0.727967s, 63856 KB] g=2, 9 evaluated, 2 expanded
[t=0.727967s, 63856 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 30
[t=0.727967s, 63856 KB] g=5, 48 evaluated, 10 expanded
[t=0.727967s, 63856 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 29
[t=0.727967s, 63856 KB] g=8, 119 evaluated, 22 expanded
[t=0.727967s, 63856 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 28
[t=0.727967s, 63856 KB] g=9, 131 evaluated, 24 expanded
[t=0.727967s, 63856 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 27
[t=0.727967s, 63856 KB] g=10, 134 evaluated, 25 expanded
[t=0.731968s, 63856 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 26
[t=0.731968s, 63856 KB] g=11, 170 evaluated, 29 expanded
[t=0.731968s, 63856 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 25
[t=0.731968s, 63856 KB] g=13, 186 evaluated, 31 expanded
[t=0.731968s, 63856 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 24
[t=0.731968s, 63856 KB] g=14, 197 evaluated, 32 expanded
[t=0.731968s, 63856 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 23
[t=0.731968s, 63856 KB] g=15, 199 evaluated, 33 expanded
[t=0.731968s, 63856 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 22
[t=0.731968s, 63856 KB] g=16, 211 evaluated, 34 expanded
[t=0.731968s, 63856 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 21
[t=0.731968s, 63856 KB] g=17, 222 evaluated, 35 expanded
[t=0.731968s, 63856 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 20
[t=0.731968s, 63856 KB] g=18, 234 evaluated, 36 expanded
[t=0.731968s, 63856 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 19
[t=0.731968s, 63856 KB] g=19, 245 evaluated, 37 expanded
[t=0.731968s, 63856 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 18
[t=0.731968s, 63856 KB] g=20, 256 evaluated, 38 expanded
[t=0.731968s, 63856 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 17
[t=0.731968s, 63856 KB] g=21, 262 evaluated, 39 expanded
[t=0.731968s, 63856 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 16
[t=0.731968s, 63856 KB] g=22, 274 evaluated, 40 expanded
[t=0.731968s, 63856 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 15
[t=0.731968s, 63856 KB] g=23, 284 evaluated, 41 expanded
[t=0.731968s, 63856 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 14
[t=0.731968s, 63856 KB] g=24, 295 evaluated, 42 expanded
[t=0.731968s, 63856 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 13
[t=0.731968s, 63856 KB] g=25, 304 evaluated, 43 expanded
[t=0.731968s, 63856 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 12
[t=0.731968s, 63856 KB] g=26, 315 evaluated, 44 expanded
[t=0.731968s, 63856 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 11
[t=0.731968s, 63856 KB] g=27, 318 evaluated, 45 expanded
[t=0.731968s, 63856 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 10
[t=0.731968s, 63856 KB] g=28, 333 evaluated, 46 expanded
[t=0.731968s, 63856 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 9
[t=0.731968s, 63856 KB] g=29, 340 evaluated, 47 expanded
[t=0.731968s, 63856 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 8
[t=0.731968s, 63856 KB] g=30, 356 evaluated, 48 expanded
[t=0.731968s, 63856 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 7
[t=0.731968s, 63856 KB] g=31, 367 evaluated, 49 expanded
[t=0.731968s, 63856 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 6
[t=0.731968s, 63856 KB] g=32, 369 evaluated, 50 expanded
[t=0.731968s, 63856 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 5
[t=0.731968s, 63856 KB] g=33, 383 evaluated, 51 expanded
[t=0.731968s, 63856 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 4
[t=0.731968s, 63856 KB] g=34, 388 evaluated, 52 expanded
[t=0.731968s, 63856 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 3
[t=0.731968s, 63856 KB] g=35, 396 evaluated, 53 expanded
[t=0.731968s, 63856 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 2
[t=0.731968s, 63856 KB] g=36, 400 evaluated, 54 expanded
[t=0.731968s, 63856 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 1
[t=0.731968s, 63856 KB] g=37, 405 evaluated, 55 expanded
[t=0.731968s, 63856 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 0
[t=0.731968s, 63856 KB] g=38, 409 evaluated, 56 expanded
[t=0.731968s, 63856 KB] Solution found!
[t=0.731968s, 63856 KB] Actual search time: 0.00400119s
drive t0 l1 l2 level215 level10 level225 (1)
load p2 t0 l2 (1)
drive t0 l2 l4 level207 level8 level215 (1)
load p0 t0 l4 (1)
drive t0 l4 l2 level199 level8 level207 (1)
drive t0 l2 l5 level177 level22 level199 (1)
load p8 t0 l5 (1)
load p7 t0 l5 (1)
drive t0 l5 l2 level155 level22 level177 (1)
drive t0 l2 l6 level136 level19 level155 (1)
load p4 t0 l6 (1)
drive t0 l6 l3 level114 level22 level136 (1)
load p3 t0 l3 (1)
load p1 t0 l3 (1)
drive t0 l3 l4 level102 level12 level114 (1)
drive t0 l4 l9 level87 level15 level102 (1)
unload p8 t0 l9 (1)
unload p7 t0 l9 (1)
load p6 t0 l9 (1)
load p5 t0 l9 (1)
drive t0 l9 l10 level68 level19 level87 (1)
drive t0 l10 l8 level66 level2 level68 (1)
load p9 t0 l8 (1)
unload p5 t0 l8 (1)
unload p4 t0 l8 (1)
load p10 t0 l8 (1)
drive t0 l8 l10 level64 level2 level66 (1)
unload p2 t0 l10 (1)
drive t0 l10 l9 level45 level19 level64 (1)
unload p1 t0 l9 (1)
unload p0 t0 l9 (1)
drive t0 l9 l4 level30 level15 level45 (1)
unload p6 t0 l4 (1)
drive t0 l4 l3 level18 level12 level30 (1)
unload p9 t0 l3 (1)
drive t0 l3 l7 level16 level2 level18 (1)
unload p3 t0 l7 (1)
unload p10 t0 l7 (1)
[t=0.731968s, 63856 KB] Plan length: 38 step(s).
[t=0.731968s, 63856 KB] Plan cost: 38
[t=0.731968s, 63856 KB] Expanded 57 state(s).
[t=0.731968s, 63856 KB] Reopened 0 state(s).
[t=0.731968s, 63856 KB] Evaluated 409 state(s).
[t=0.731968s, 63856 KB] Evaluations: 465
[t=0.731968s, 63856 KB] Generated 440 state(s).
[t=0.731968s, 63856 KB] Dead ends: 6 state(s).
[t=0.731968s, 63856 KB] Number of registered states: 409
[t=0.731968s, 63856 KB] Int hash set load factor: 409/512 = 0.798828
[t=0.731968s, 63856 KB] Int hash set resizes: 9
[t=0.731968s, 63856 KB] Search time: 0.00400119s
[t=0.731968s, 63856 KB] Total time: 0.731968s
Solution found.
Peak memory: 63856 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Running validate.
INFO     validate stdin: None
INFO     validate time limit: None
INFO     validate memory limit: None
INFO     validate command line string: validate domain.pddl problem.pddl sas_plan
Checking plan: sas_plan
Plan executed successfully - checking goal
Plan valid
Final value: 38 

Successful plans:
Value: 38
 sas_plan 38 

validate exit code: 0

