INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: 1799.98s
INFO     translator memory limit: 4096 MB
INFO     translator command line string: /usr/bin/python3 /home/dmdoebber/downward-projects/downward/experiments/paper/data/pref-ops-val/code-11d6cc7f374e3fd7216f4422aa97b8db8c68d3c3_e5e41175/builds/release/bin/translate/translate.py domain.pddl problem.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.003s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.001s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.003s wall-clock]
Preparing model... [0.000s CPU, 0.002s wall-clock]
Generated 115 rules.
Computing model... [0.030s CPU, 0.025s wall-clock]
2300 relevant atoms
2393 auxiliary atoms
4693 final queue length
8087 total queue pushes
Completing instantiation... [0.050s CPU, 0.047s wall-clock]
Instantiating: [0.080s CPU, 0.078s wall-clock]
Computing fact groups...
Finding invariants...
24 initial candidates
Finding invariants: [0.010s CPU, 0.010s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
238 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.001s wall-clock]
Computing fact groups: [0.020s CPU, 0.020s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.010s CPU, 0.003s wall-clock]
Translating task: [0.060s CPU, 0.060s wall-clock]
2672 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
3 propositions removed
Detecting unreachable propositions: [0.030s CPU, 0.027s wall-clock]
Reordering and filtering variables...
241 of 241 variables necessary.
12 of 15 mutex groups necessary.
1596 of 1596 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.010s CPU, 0.017s wall-clock]
Translator variables: 241
Translator derived variables: 0
Translator facts: 505
Translator goal facts: 10
Translator mutex groups: 12
Translator total mutex groups size: 36
Translator operators: 1596
Translator axioms: 0
Translator task size: 15302
Translator peak memory: 38804 KB
Writing output... [0.010s CPU, 0.011s wall-clock]
Done! [0.220s CPU, 0.220s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: 1799.74s
INFO     search memory limit: 4096 MB
INFO     search command line string: /home/dmdoebber/downward-projects/downward/experiments/paper/data/pref-ops-val/code-11d6cc7f374e3fd7216f4422aa97b8db8c68d3c3_e5e41175/builds/release/bin/downward --evaluator 'eval=ff()' --search 'eager_greedy([lsh(patterns=systematic(4), op_order=default, res_order=default, transform=adapt_costs(cost_type=ONE))],  preferred=[eval])' --internal-plan-file sas_plan < output.sas
[t=0s, 46116 KB] reading input...
[t=0.00793334s, 46788 KB] done reading input!
[t=0.00793334s, 47484 KB] Simplifying 5886 unary operators... done! [5018 unary operators]
[t=0.0119353s, 47952 KB] time to simplify: 0.00400197s
[t=0.0119353s, 47952 KB] Initializing additive heuristic...
[t=0.0119353s, 47952 KB] Initializing FF heuristic...
[t=0.0119353s, 47952 KB] stop search of patterns: 3355443KB
[t=0.0119353s, 47952 KB] Generating patterns using the systematic generator...
[t=0.0119353s, 47952 KB] building causal graph...done! [t=0.00399928s]
[t=0.0917729s, 63120 KB] Found 61222 SGA patterns.
[t=1.23328s, 66592 KB] Found 67642 interesting patterns.
[t=1.24514s, 66592 KB] [10, 74, 2216, 65342]
[t=1.27293s, 66592 KB] Systematic generator number of patterns: 252
[t=1.27293s, 66592 KB] Systematic generator total PDB size: 5838
[t=1.27293s, 66592 KB] Systematic generator computation time: 1.261s
[t=1.27293s, 66592 KB] Computing PDBs for pattern collection...
[t=1.34493s, 66592 KB] Done computing PDBs for pattern collection: 0.0719978s
[t=1.35293s, 66592 KB] Operators: 1596
[t=1.35293s, 66592 KB] Restrictions: 252
[t=1.35293s, 66592 KB] Mean mentions: 69
[t=1.35293s, 66592 KB] Mean operators: 442
[t=1.35693s, 66592 KB] Building successor generator...done!
[t=1.35693s, 66592 KB] peak memory difference for successor generator creation: 0 KB
[t=1.35693s, 66592 KB] time for successor generation creation: 0s
[t=1.35693s, 66592 KB] Variables: 241
[t=1.35693s, 66592 KB] FactPairs: 505
[t=1.35693s, 66592 KB] Bytes per state: 32
[t=1.35693s, 66592 KB] Conducting best first search without reopening closed nodes, (real) bound = 2147483647
[t=1.35693s, 66592 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 24
[t=1.35693s, 66592 KB] g=0, 1 evaluated, 0 expanded
[t=1.35693s, 66592 KB] Initial heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 24
[t=1.35693s, 66592 KB] pruning method: none
[t=1.35693s, 66592 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 23
[t=1.35693s, 66592 KB] g=1, 2 evaluated, 1 expanded
[t=1.35693s, 66592 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 22
[t=1.35693s, 66592 KB] g=12, 62 evaluated, 13 expanded
[t=1.35693s, 66592 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 21
[t=1.35693s, 66592 KB] g=12, 74 evaluated, 13 expanded
[t=1.35693s, 66592 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 20
[t=1.35693s, 66592 KB] g=13, 76 evaluated, 14 expanded
[t=1.35693s, 66592 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 19
[t=1.35693s, 66592 KB] g=23, 91 evaluated, 16 expanded
[t=1.36093s, 66592 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 18
[t=1.36093s, 66592 KB] g=37, 254 evaluated, 46 expanded
[t=1.41293s, 66592 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 17
[t=1.41293s, 66592 KB] g=55, 5449 evaluated, 681 expanded
[t=1.41693s, 66592 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 16
[t=1.41693s, 66592 KB] g=69, 5615 evaluated, 713 expanded
[t=1.48091s, 66592 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 15
[t=1.48091s, 66592 KB] g=87, 12171 evaluated, 1467 expanded
[t=1.48491s, 66592 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 14
[t=1.48491s, 66592 KB] g=101, 12339 evaluated, 1499 expanded
[t=1.56091s, 66592 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 13
[t=1.56091s, 66592 KB] g=120, 20235 evaluated, 2394 expanded
[t=1.56091s, 66592 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 12
[t=1.56091s, 66592 KB] g=134, 20404 evaluated, 2426 expanded
[t=1.60091s, 66592 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 11
[t=1.60091s, 66592 KB] g=154, 24071 evaluated, 2929 expanded
[t=1.60091s, 66592 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 10
[t=1.60091s, 66592 KB] g=167, 24240 evaluated, 2956 expanded
[t=1.69691s, 66592 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 9
[t=1.69691s, 66592 KB] g=187, 33145 evaluated, 4142 expanded
[t=1.69691s, 66592 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 8
[t=1.69691s, 66592 KB] g=200, 33301 evaluated, 4168 expanded
[t=1.73689s, 66592 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 7
[t=1.73689s, 66592 KB] g=204, 37062 evaluated, 4715 expanded
[t=1.81689s, 66592 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 5
[t=1.81689s, 66592 KB] g=238, 43212 evaluated, 5945 expanded
[t=1.81689s, 66592 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 4
[t=1.81689s, 66592 KB] g=239, 43227 evaluated, 5946 expanded
[t=1.90889s, 66592 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 3
[t=1.90889s, 66592 KB] g=273, 50285 evaluated, 7465 expanded
[t=1.90889s, 66592 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 2
[t=1.90889s, 66592 KB] g=274, 50301 evaluated, 7466 expanded
[t=2.01289s, 66592 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 1
[t=2.01289s, 66592 KB] g=308, 58312 evaluated, 9181 expanded
[t=2.01289s, 66592 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 0
[t=2.01289s, 66592 KB] g=309, 58327 evaluated, 9182 expanded
[t=2.01289s, 66592 KB] Solution found!
[t=2.01289s, 66592 KB] Actual search time: 0.655955s
grasp right shot10 (1)
fill-shot shot10 ingredient1 right left dispenser1 (10)
pour-shot-to-clean-shaker shot10 ingredient1 shaker1 right l0 l1 (1)
refill-shot shot10 ingredient1 right left dispenser1 (10)
leave right shot10 (1)
grasp right shot11 (1)
fill-shot shot11 ingredient3 right left dispenser3 (10)
grasp left shaker1 (1)
pour-shot-to-used-shaker shot11 ingredient3 shaker1 right l1 l2 (1)
leave right shot11 (1)
shake cocktail2 ingredient1 ingredient3 shaker1 left right (1)
pour-shaker-to-shot cocktail2 shot6 left shaker1 l2 l1 (1)
empty-shaker left shaker1 cocktail2 l1 l0 (1)
clean-shaker left right shaker1 (1)
grasp right shot10 (1)
pour-shot-to-clean-shaker shot10 ingredient1 shaker1 right l0 l1 (1)
leave left shaker1 (1)
refill-shot shot10 ingredient1 right left dispenser1 (10)
leave right shot10 (1)
grasp right shot11 (1)
refill-shot shot11 ingredient3 right left dispenser3 (10)
grasp left shaker1 (1)
pour-shot-to-used-shaker shot11 ingredient3 shaker1 right l1 l2 (1)
leave right shot11 (1)
shake cocktail5 ingredient3 ingredient1 shaker1 left right (1)
pour-shaker-to-shot cocktail5 shot2 left shaker1 l2 l1 (1)
empty-shaker left shaker1 cocktail5 l1 l0 (1)
clean-shaker left right shaker1 (1)
grasp right shot10 (1)
pour-shot-to-clean-shaker shot10 ingredient1 shaker1 right l0 l1 (1)
leave left shaker1 (1)
refill-shot shot10 ingredient1 right left dispenser1 (10)
leave right shot10 (1)
grasp right shot11 (1)
clean-shot shot11 ingredient3 right left (1)
fill-shot shot11 ingredient2 right left dispenser2 (10)
grasp left shaker1 (1)
pour-shot-to-used-shaker shot11 ingredient2 shaker1 right l1 l2 (1)
leave right shot11 (1)
shake cocktail3 ingredient2 ingredient1 shaker1 left right (1)
pour-shaker-to-shot cocktail3 shot8 left shaker1 l2 l1 (1)
empty-shaker left shaker1 cocktail3 l1 l0 (1)
clean-shaker left right shaker1 (1)
grasp right shot10 (1)
pour-shot-to-clean-shaker shot10 ingredient1 shaker1 right l0 l1 (1)
leave left shaker1 (1)
refill-shot shot10 ingredient1 right left dispenser1 (10)
leave right shot10 (1)
grasp right shot11 (1)
refill-shot shot11 ingredient2 right left dispenser2 (10)
grasp left shaker1 (1)
pour-shot-to-used-shaker shot11 ingredient2 shaker1 right l1 l2 (1)
leave right shot11 (1)
leave left shaker1 (1)
grasp right shaker1 (1)
shake cocktail7 ingredient2 ingredient1 shaker1 right left (1)
pour-shaker-to-shot cocktail7 shot4 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail7 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot10 (1)
pour-shot-to-clean-shaker shot10 ingredient1 shaker1 left l0 l1 (1)
leave right shaker1 (1)
refill-shot shot10 ingredient1 left right dispenser1 (10)
leave left shot10 (1)
grasp left shot11 (1)
clean-shot shot11 ingredient2 left right (1)
fill-shot shot11 ingredient4 left right dispenser4 (10)
grasp right shaker1 (1)
pour-shot-to-used-shaker shot11 ingredient4 shaker1 left l1 l2 (1)
leave left shot11 (1)
shake cocktail9 ingredient4 ingredient1 shaker1 right left (1)
pour-shaker-to-shot cocktail9 shot7 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail9 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot10 (1)
pour-shot-to-clean-shaker shot10 ingredient1 shaker1 left l0 l1 (1)
leave right shaker1 (1)
refill-shot shot10 ingredient1 left right dispenser1 (10)
leave left shot10 (1)
grasp left shot11 (1)
clean-shot shot11 ingredient4 left right (1)
fill-shot shot11 ingredient3 left right dispenser3 (10)
grasp right shaker1 (1)
pour-shot-to-used-shaker shot11 ingredient3 shaker1 left l1 l2 (1)
leave left shot11 (1)
shake cocktail1 ingredient1 ingredient3 shaker1 right left (1)
pour-shaker-to-shot cocktail1 shot5 right shaker1 l2 l1 (1)
grasp left shot11 (1)
leave right shaker1 (1)
refill-shot shot11 ingredient3 left right dispenser3 (10)
grasp right shaker1 (1)
leave left shot11 (1)
empty-shaker right shaker1 cocktail1 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot11 (1)
pour-shot-to-clean-shaker shot11 ingredient3 shaker1 left l0 l1 (1)
leave right shaker1 (1)
clean-shot shot11 ingredient3 left right (1)
fill-shot shot11 ingredient2 left right dispenser2 (10)
grasp right shaker1 (1)
pour-shot-to-used-shaker shot11 ingredient2 shaker1 left l1 l2 (1)
leave left shot11 (1)
shake cocktail8 ingredient2 ingredient3 shaker1 right left (1)
pour-shaker-to-shot cocktail8 shot1 right shaker1 l2 l1 (1)
grasp left shot11 (1)
leave right shaker1 (1)
refill-shot shot11 ingredient2 left right dispenser2 (10)
grasp right shaker1 (1)
leave left shot11 (1)
empty-shaker right shaker1 cocktail8 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot11 (1)
pour-shot-to-clean-shaker shot11 ingredient2 shaker1 left l0 l1 (1)
leave right shaker1 (1)
clean-shot shot11 ingredient2 left right (1)
fill-shot shot11 ingredient4 left right dispenser4 (10)
grasp right shaker1 (1)
pour-shot-to-used-shaker shot11 ingredient4 shaker1 left l1 l2 (1)
leave left shot11 (1)
shake cocktail6 ingredient4 ingredient2 shaker1 right left (1)
pour-shaker-to-shot cocktail6 shot9 right shaker1 l2 l1 (1)
grasp left shot11 (1)
leave right shaker1 (1)
refill-shot shot11 ingredient4 left right dispenser4 (10)
grasp right shaker1 (1)
leave left shot11 (1)
empty-shaker right shaker1 cocktail6 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot11 (1)
pour-shot-to-clean-shaker shot11 ingredient4 shaker1 left l0 l1 (1)
leave right shaker1 (1)
clean-shot shot11 ingredient4 left right (1)
fill-shot shot11 ingredient2 left right dispenser2 (10)
grasp right shaker1 (1)
pour-shot-to-used-shaker shot11 ingredient2 shaker1 left l1 l2 (1)
leave left shot11 (1)
shake cocktail4 ingredient4 ingredient2 shaker1 right left (1)
pour-shaker-to-shot cocktail4 shot3 right shaker1 l2 l1 (1)
[t=2.01289s, 66592 KB] Plan length: 138 step(s).
[t=2.01289s, 66592 KB] Plan cost: 309
[t=2.01289s, 66592 KB] Expanded 9183 state(s).
[t=2.01289s, 66592 KB] Reopened 0 state(s).
[t=2.01289s, 66592 KB] Evaluated 58327 state(s).
[t=2.01289s, 66592 KB] Evaluations: 67509
[t=2.01289s, 66592 KB] Generated 82724 state(s).
[t=2.01289s, 66592 KB] Dead ends: 0 state(s).
[t=2.01289s, 66592 KB] Number of registered states: 58327
[t=2.01289s, 66592 KB] Int hash set load factor: 58327/131072 = 0.445
[t=2.01289s, 66592 KB] Int hash set resizes: 17
[t=2.01289s, 66592 KB] Search time: 0.655955s
[t=2.01289s, 66592 KB] Total time: 2.01289s
Solution found.
Peak memory: 66592 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Running validate.
INFO     validate stdin: None
INFO     validate time limit: None
INFO     validate memory limit: None
INFO     validate command line string: validate domain.pddl problem.pddl sas_plan
Checking plan: sas_plan
Plan executed successfully - checking goal
Plan valid
Final value: 309 

Successful plans:
Value: 309
 sas_plan 309 

validate exit code: 0

