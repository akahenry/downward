INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: 1799.99s
INFO     translator memory limit: 4096 MB
INFO     translator command line string: /usr/bin/python3 /home/dmdoebber/downward-projects/downward/experiments/paper/data/pref-ops-val/code-11d6cc7f374e3fd7216f4422aa97b8db8c68d3c3_e5e41175/builds/release/bin/translate/translate.py domain.pddl problem.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.002s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.001s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.010s CPU, 0.003s wall-clock]
Preparing model... [0.000s CPU, 0.002s wall-clock]
Generated 115 rules.
Computing model... [0.030s CPU, 0.032s wall-clock]
3094 relevant atoms
3221 auxiliary atoms
6315 final queue length
10878 total queue pushes
Completing instantiation... [0.060s CPU, 0.064s wall-clock]
Instantiating: [0.100s CPU, 0.101s wall-clock]
Computing fact groups...
Finding invariants...
24 initial candidates
Finding invariants: [0.010s CPU, 0.009s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
328 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.001s wall-clock]
Computing fact groups: [0.010s CPU, 0.012s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.010s CPU, 0.004s wall-clock]
Translating task: [0.080s CPU, 0.077s wall-clock]
3672 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
3 propositions removed
Detecting unreachable propositions: [0.030s CPU, 0.033s wall-clock]
Reordering and filtering variables...
331 of 331 variables necessary.
15 of 18 mutex groups necessary.
2194 of 2194 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.020s CPU, 0.021s wall-clock]
Translator variables: 331
Translator derived variables: 0
Translator facts: 691
Translator goal facts: 13
Translator mutex groups: 15
Translator total mutex groups size: 45
Translator operators: 2194
Translator axioms: 0
Translator task size: 21018
Translator peak memory: 42272 KB
Writing output... [0.010s CPU, 0.013s wall-clock]
Done! [0.260s CPU, 0.265s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: 1799.7s
INFO     search memory limit: 4096 MB
INFO     search command line string: /home/dmdoebber/downward-projects/downward/experiments/paper/data/pref-ops-val/code-11d6cc7f374e3fd7216f4422aa97b8db8c68d3c3_e5e41175/builds/release/bin/downward --evaluator 'eval=ff()' --search 'eager_greedy([lsh(patterns=systematic(4), op_order=default, res_order=default, transform=adapt_costs(cost_type=ONE))],  preferred=[eval])' --internal-plan-file sas_plan < output.sas
[t=0.0017836s, 46116 KB] reading input...
[t=0.00978236s, 46976 KB] done reading input!
[t=0.00978236s, 47996 KB] Simplifying 8034 unary operators... done! [6930 unary operators]
[t=0.0137826s, 48660 KB] time to simplify: 0.00400028s
[t=0.0137826s, 48660 KB] Initializing additive heuristic...
[t=0.0137826s, 48660 KB] Initializing FF heuristic...
[t=0.0137826s, 48660 KB] stop search of patterns: 3355443KB
[t=0.0137826s, 48660 KB] Generating patterns using the systematic generator...
[t=0.0137826s, 48660 KB] building causal graph...done! [t=0.0039997s]
[t=0.12156s, 77904 KB] Found 119792 SGA patterns.
[t=2.64823s, 85248 KB] Found 132323 interesting patterns.
[t=2.66016s, 85248 KB] [13, 99, 3589, 128622]
[t=2.6961s, 85248 KB] Systematic generator number of patterns: 336
[t=2.6961s, 85248 KB] Systematic generator total PDB size: 7328
[t=2.6961s, 85248 KB] Systematic generator computation time: 2.68232s
[t=2.6961s, 85248 KB] Computing PDBs for pattern collection...
[t=2.8241s, 85248 KB] Done computing PDBs for pattern collection: 0.127996s
[t=2.8401s, 85248 KB] Operators: 2194
[t=2.8401s, 85248 KB] Restrictions: 336
[t=2.8401s, 85248 KB] Mean mentions: 88
[t=2.8401s, 85248 KB] Mean operators: 579
[t=2.8401s, 85248 KB] Building successor generator...done!
[t=2.8401s, 85248 KB] peak memory difference for successor generator creation: 0 KB
[t=2.8401s, 85248 KB] time for successor generation creation: 0s
[t=2.8401s, 85248 KB] Variables: 331
[t=2.8401s, 85248 KB] FactPairs: 691
[t=2.8401s, 85248 KB] Bytes per state: 44
[t=2.8401s, 85248 KB] Conducting best first search without reopening closed nodes, (real) bound = 2147483647
[t=2.8401s, 85248 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 29
[t=2.8401s, 85248 KB] g=0, 1 evaluated, 0 expanded
[t=2.8401s, 85248 KB] Initial heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 29
[t=2.8401s, 85248 KB] pruning method: none
[t=2.8401s, 85248 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 28
[t=2.8401s, 85248 KB] g=1, 2 evaluated, 1 expanded
[t=2.8441s, 85248 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 27
[t=2.8441s, 85248 KB] g=12, 77 evaluated, 6 expanded
[t=2.8441s, 85248 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 26
[t=2.8441s, 85248 KB] g=23, 168 evaluated, 20 expanded
[t=2.8441s, 85248 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 25
[t=2.8441s, 85248 KB] g=35, 245 evaluated, 31 expanded
[t=2.8561s, 85248 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 24
[t=2.8561s, 85248 KB] g=36, 962 evaluated, 142 expanded
[t=2.8601s, 85248 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 23
[t=2.8601s, 85248 KB] g=47, 1181 evaluated, 171 expanded
[t=2.92009s, 85248 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 22
[t=2.92009s, 85248 KB] g=66, 5771 evaluated, 681 expanded
[t=2.92809s, 85248 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 21
[t=2.92809s, 85248 KB] g=79, 6305 evaluated, 763 expanded
[t=2.92809s, 85248 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 20
[t=2.92809s, 85248 KB] g=80, 6309 evaluated, 764 expanded
[t=2.96409s, 85248 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 19
[t=2.96409s, 85248 KB] g=116, 8610 evaluated, 1110 expanded
[t=2.98409s, 85248 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 18
[t=2.98409s, 85248 KB] g=133, 10114 evaluated, 1334 expanded
[t=2.98809s, 85248 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 17
[t=2.98809s, 85248 KB] g=144, 10241 evaluated, 1358 expanded
[t=2.99209s, 85248 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 16
[t=2.99209s, 85248 KB] g=148, 10670 evaluated, 1403 expanded
[t=3.36407s, 85248 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 15
[t=3.36407s, 85248 KB] g=171, 35215 evaluated, 5140 expanded
[t=3.36407s, 85248 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 14
[t=3.36407s, 85248 KB] g=182, 35232 evaluated, 5142 expanded
[t=3.46007s, 85248 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 12
[t=3.46007s, 85248 KB] g=216, 41379 evaluated, 6184 expanded
[t=3.51607s, 85248 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 11
[t=3.51607s, 85248 KB] g=235, 45051 evaluated, 6786 expanded
[t=3.51607s, 85248 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 10
[t=3.51607s, 85248 KB] g=246, 45228 evaluated, 6810 expanded
[t=3.53207s, 85248 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 9
[t=3.53207s, 85248 KB] g=250, 46214 evaluated, 6944 expanded
[t=3.62807s, 85248 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 8
[t=3.62807s, 85248 KB] g=278, 52495 evaluated, 8045 expanded
[t=3.62807s, 85248 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 7
[t=3.62807s, 85248 KB] g=281, 52577 evaluated, 8054 expanded
[t=3.82407s, 85248 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 6
[t=3.82407s, 85248 KB] g=312, 65467 evaluated, 10317 expanded
[t=3.90406s, 85248 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 5
[t=3.90406s, 85248 KB] g=317, 70844 evaluated, 11220 expanded
[t=3.90406s, 85248 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 4
[t=3.90406s, 85248 KB] g=318, 70862 evaluated, 11221 expanded
[t=4.14805s, 85248 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 3
[t=4.14805s, 85248 KB] g=349, 87483 evaluated, 14275 expanded
[t=4.14805s, 85248 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 2
[t=4.14805s, 85248 KB] g=350, 87500 evaluated, 14276 expanded
[t=4.26804s, 85248 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 1
[t=4.26804s, 85248 KB] g=397, 96234 evaluated, 15792 expanded
[t=4.26804s, 85248 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 0
[t=4.26804s, 85248 KB] g=398, 96251 evaluated, 15793 expanded
[t=4.26804s, 85248 KB] Solution found!
[t=4.26804s, 85248 KB] Actual search time: 1.42794s
grasp right shot12 (1)
fill-shot shot12 ingredient2 right left dispenser2 (10)
pour-shot-to-clean-shaker shot12 ingredient2 shaker1 right l0 l1 (1)
refill-shot shot12 ingredient2 right left dispenser2 (10)
leave right shot12 (1)
grasp right shot13 (1)
fill-shot shot13 ingredient1 right left dispenser1 (10)
pour-shot-to-used-shaker shot13 ingredient1 shaker1 right l1 l2 (1)
clean-shot shot13 ingredient1 right left (1)
fill-shot shot13 ingredient2 right left dispenser2 (10)
leave right shot13 (1)
grasp left shot14 (1)
fill-shot shot14 ingredient3 left right dispenser3 (10)
grasp right shaker1 (1)
leave left shot14 (1)
shake cocktail10 ingredient2 ingredient1 shaker1 right left (1)
pour-shaker-to-shot cocktail10 shot3 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail10 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot14 (1)
pour-shot-to-clean-shaker shot14 ingredient3 shaker1 left l0 l1 (1)
leave right shaker1 (1)
clean-shot shot14 ingredient3 left right (1)
fill-shot shot14 ingredient1 left right dispenser1 (10)
pour-shot-to-used-shaker shot14 ingredient1 shaker1 left l1 l2 (1)
clean-shot shot14 ingredient1 left right (1)
fill-shot shot14 ingredient4 left right dispenser4 (10)
grasp right shaker1 (1)
leave left shot14 (1)
shake cocktail2 ingredient3 ingredient1 shaker1 right left (1)
pour-shaker-to-shot cocktail2 shot9 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail2 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot14 (1)
pour-shot-to-clean-shaker shot14 ingredient4 shaker1 left l0 l1 (1)
leave left shot14 (1)
grasp left shot13 (1)
pour-shot-to-used-shaker shot13 ingredient2 shaker1 left l1 l2 (1)
leave left shot13 (1)
shake cocktail4 ingredient2 ingredient4 shaker1 right left (1)
grasp left shot13 (1)
pour-shaker-to-shot cocktail4 shot2 right shaker1 l2 l1 (1)
leave right shaker1 (1)
refill-shot shot13 ingredient2 left right dispenser2 (10)
grasp right shaker1 (1)
leave left shot13 (1)
empty-shaker right shaker1 cocktail4 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot14 (1)
leave right shaker1 (1)
refill-shot shot14 ingredient4 left right dispenser4 (10)
pour-shot-to-clean-shaker shot14 ingredient4 shaker1 left l0 l1 (1)
clean-shot shot14 ingredient4 left right (1)
fill-shot shot14 ingredient1 left right dispenser1 (10)
pour-shot-to-used-shaker shot14 ingredient1 shaker1 left l1 l2 (1)
clean-shot shot14 ingredient1 left right (1)
fill-shot shot14 ingredient3 left right dispenser3 (10)
grasp right shaker1 (1)
leave left shot14 (1)
shake cocktail9 ingredient4 ingredient1 shaker1 right left (1)
pour-shaker-to-shot cocktail9 shot5 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail9 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot14 (1)
pour-shot-to-clean-shaker shot14 ingredient3 shaker1 left l0 l1 (1)
leave right shaker1 (1)
grasp right shot12 (1)
pour-shot-to-used-shaker shot12 ingredient2 shaker1 right l1 l2 (1)
leave left shot14 (1)
refill-shot shot12 ingredient2 right left dispenser2 (10)
leave right shot12 (1)
grasp left shot14 (1)
clean-shot shot14 ingredient3 left right (1)
fill-shot shot14 ingredient1 left right dispenser1 (10)
grasp right shaker1 (1)
leave left shot14 (1)
shake cocktail8 ingredient3 ingredient2 shaker1 right left (1)
pour-shaker-to-shot cocktail8 shot7 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail8 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot14 (1)
pour-shot-to-clean-shaker shot14 ingredient1 shaker1 left l0 l1 (1)
leave right shaker1 (1)
clean-shot shot14 ingredient1 left right (1)
fill-shot shot14 ingredient3 left right dispenser3 (10)
pour-shot-to-used-shaker shot14 ingredient3 shaker1 left l1 l2 (1)
grasp right shaker1 (1)
leave left shot14 (1)
shake cocktail6 ingredient3 ingredient1 shaker1 right left (1)
pour-shaker-to-shot cocktail6 shot10 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail6 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot14 (1)
leave right shaker1 (1)
refill-shot shot14 ingredient3 left right dispenser3 (10)
pour-shot-to-clean-shaker shot14 ingredient3 shaker1 left l0 l1 (1)
clean-shot shot14 ingredient3 left right (1)
fill-shot shot14 ingredient4 left right dispenser4 (10)
pour-shot-to-used-shaker shot14 ingredient4 shaker1 left l1 l2 (1)
grasp right shaker1 (1)
leave left shot14 (1)
shake cocktail7 ingredient4 ingredient3 shaker1 right left (1)
pour-shaker-to-shot cocktail7 shot8 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail7 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot14 (1)
leave right shaker1 (1)
refill-shot shot14 ingredient4 left right dispenser4 (10)
pour-shot-to-clean-shaker shot14 ingredient4 shaker1 left l0 l1 (1)
clean-shot shot14 ingredient4 left right (1)
fill-shot shot14 ingredient1 left right dispenser1 (10)
pour-shot-to-used-shaker shot14 ingredient1 shaker1 left l1 l2 (1)
clean-shot shot14 ingredient1 left right (1)
fill-shot shot14 ingredient3 left right dispenser3 (10)
grasp right shaker1 (1)
leave left shot14 (1)
shake cocktail1 ingredient1 ingredient4 shaker1 right left (1)
pour-shaker-to-shot cocktail1 shot4 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail1 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot14 (1)
pour-shot-to-clean-shaker shot14 ingredient3 shaker1 left l0 l1 (1)
leave right shaker1 (1)
clean-shot shot14 ingredient3 left right (1)
fill-shot shot14 ingredient4 left right dispenser4 (10)
pour-shot-to-used-shaker shot14 ingredient4 shaker1 left l1 l2 (1)
grasp right shaker1 (1)
leave left shot14 (1)
shake cocktail5 ingredient4 ingredient3 shaker1 right left (1)
pour-shaker-to-shot cocktail5 shot1 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail5 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot12 (1)
leave right shaker1 (1)
pour-shot-to-clean-shaker shot12 ingredient2 shaker1 left l0 l1 (1)
refill-shot shot12 ingredient2 left right dispenser2 (10)
grasp right shot14 (1)
leave left shot12 (1)
refill-shot shot14 ingredient4 right left dispenser4 (10)
grasp left shaker1 (1)
pour-shot-to-used-shaker shot14 ingredient4 shaker1 right l1 l2 (1)
leave right shot14 (1)
shake cocktail11 ingredient4 ingredient2 shaker1 left right (1)
pour-shaker-to-shot cocktail11 shot11 left shaker1 l2 l1 (1)
leave left shaker1 (1)
grasp left shot14 (1)
clean-shot shot14 ingredient4 left right (1)
fill-shot shot14 ingredient1 left right dispenser1 (10)
empty-shot left shot14 ingredient1 (1)
leave left shot14 (1)
grasp left shaker1 (1)
empty-shaker left shaker1 cocktail11 l1 l0 (1)
clean-shaker left right shaker1 (1)
grasp right shot12 (1)
leave left shaker1 (1)
pour-shot-to-clean-shaker shot12 ingredient2 shaker1 right l0 l1 (1)
refill-shot shot12 ingredient2 right left dispenser2 (10)
grasp left shot14 (1)
leave right shot12 (1)
refill-shot shot14 ingredient1 left right dispenser1 (10)
grasp right shaker1 (1)
pour-shot-to-used-shaker shot14 ingredient1 shaker1 left l1 l2 (1)
leave left shot14 (1)
shake cocktail3 ingredient2 ingredient1 shaker1 right left (1)
pour-shaker-to-shot cocktail3 shot6 right shaker1 l2 l1 (1)
[t=4.26804s, 85248 KB] Plan length: 165 step(s).
[t=4.26804s, 85248 KB] Plan cost: 390
[t=4.26804s, 85248 KB] Expanded 15794 state(s).
[t=4.26804s, 85248 KB] Reopened 0 state(s).
[t=4.26804s, 85248 KB] Evaluated 96251 state(s).
[t=4.26804s, 85248 KB] Evaluations: 112044
[t=4.26804s, 85248 KB] Generated 142728 state(s).
[t=4.26804s, 85248 KB] Dead ends: 0 state(s).
[t=4.26804s, 85248 KB] Number of registered states: 96251
[t=4.26804s, 85248 KB] Int hash set load factor: 96251/131072 = 0.734337
[t=4.26804s, 85248 KB] Int hash set resizes: 17
[t=4.26804s, 85248 KB] Search time: 1.42794s
[t=4.26804s, 85248 KB] Total time: 4.26804s
Solution found.
Peak memory: 85248 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Running validate.
INFO     validate stdin: None
INFO     validate time limit: None
INFO     validate memory limit: None
INFO     validate command line string: validate domain.pddl problem.pddl sas_plan
Checking plan: sas_plan
Plan executed successfully - checking goal
Plan valid
Final value: 390 

Successful plans:
Value: 390
 sas_plan 390 

validate exit code: 0

