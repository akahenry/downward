INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: 1799.99s
INFO     translator memory limit: 4096 MB
INFO     translator command line string: /usr/bin/python3 /home/dmdoebber/downward-projects/downward/experiments/paper/data/pref-ops-val/code-11d6cc7f374e3fd7216f4422aa97b8db8c68d3c3_e5e41175/builds/release/bin/translate/translate.py domain.pddl problem.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.003s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.001s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.010s CPU, 0.003s wall-clock]
Preparing model... [0.000s CPU, 0.002s wall-clock]
Generated 115 rules.
Computing model... [0.020s CPU, 0.029s wall-clock]
2784 relevant atoms
2893 auxiliary atoms
5677 final queue length
9793 total queue pushes
Completing instantiation... [0.060s CPU, 0.059s wall-clock]
Instantiating: [0.090s CPU, 0.094s wall-clock]
Computing fact groups...
Finding invariants...
24 initial candidates
Finding invariants: [0.010s CPU, 0.007s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
292 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.001s wall-clock]
Computing fact groups: [0.010s CPU, 0.010s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.010s CPU, 0.004s wall-clock]
Translating task: [0.080s CPU, 0.073s wall-clock]
3276 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
3 propositions removed
Detecting unreachable propositions: [0.030s CPU, 0.032s wall-clock]
Reordering and filtering variables...
295 of 295 variables necessary.
14 of 17 mutex groups necessary.
1958 of 1958 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.020s CPU, 0.020s wall-clock]
Translator variables: 295
Translator derived variables: 0
Translator facts: 617
Translator goal facts: 12
Translator mutex groups: 14
Translator total mutex groups size: 42
Translator operators: 1958
Translator axioms: 0
Translator task size: 18764
Translator peak memory: 40992 KB
Writing output... [0.010s CPU, 0.012s wall-clock]
Done! [0.250s CPU, 0.249s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: 1799.72s
INFO     search memory limit: 4096 MB
INFO     search command line string: /home/dmdoebber/downward-projects/downward/experiments/paper/data/pref-ops-val/code-11d6cc7f374e3fd7216f4422aa97b8db8c68d3c3_e5e41175/builds/release/bin/downward --evaluator 'eval=ff()' --search 'eager_greedy([lsh(patterns=systematic(4), op_order=default, res_order=default, transform=adapt_costs(cost_type=ONE))],  preferred=[eval])' --internal-plan-file sas_plan < output.sas
[t=0s, 46116 KB] reading input...
[t=0.00748437s, 46952 KB] done reading input!
[t=0.011485s, 47876 KB] Simplifying 7194 unary operators... done! [6174 unary operators]
[t=0.0154844s, 48404 KB] time to simplify: 0.00399939s
[t=0.0154844s, 48404 KB] Initializing additive heuristic...
[t=0.0154844s, 48404 KB] Initializing FF heuristic...
[t=0.0154844s, 48404 KB] stop search of patterns: 3355443KB
[t=0.0154844s, 48404 KB] Generating patterns using the systematic generator...
[t=0.0154844s, 48404 KB] building causal graph...done! [t=0s]
[t=0.111219s, 72696 KB] Found 92165 SGA patterns.
[t=2.04007s, 73684 KB] Found 102969 interesting patterns.
[t=2.05186s, 73684 KB] [12, 88, 2952, 99917]
[t=2.07978s, 73684 KB] Systematic generator number of patterns: 300
[t=2.07978s, 73684 KB] Systematic generator total PDB size: 6224
[t=2.07978s, 73684 KB] Systematic generator computation time: 2.06429s
[t=2.07978s, 73684 KB] Computing PDBs for pattern collection...
[t=2.18773s, 73684 KB] Done computing PDBs for pattern collection: 0.107951s
[t=2.20372s, 73684 KB] Operators: 1958
[t=2.20372s, 73684 KB] Restrictions: 300
[t=2.20372s, 73684 KB] Mean mentions: 85
[t=2.20372s, 73684 KB] Mean operators: 558
[t=2.20372s, 73684 KB] Building successor generator...done!
[t=2.20372s, 73684 KB] peak memory difference for successor generator creation: 0 KB
[t=2.20372s, 73684 KB] time for successor generation creation: 0s
[t=2.20372s, 73684 KB] Variables: 295
[t=2.20372s, 73684 KB] FactPairs: 617
[t=2.20372s, 73684 KB] Bytes per state: 40
[t=2.20372s, 73684 KB] Conducting best first search without reopening closed nodes, (real) bound = 2147483647
[t=2.20372s, 73684 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 23
[t=2.20372s, 73684 KB] g=0, 1 evaluated, 0 expanded
[t=2.20372s, 73684 KB] Initial heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 23
[t=2.20372s, 73684 KB] pruning method: none
[t=2.20372s, 73684 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 22
[t=2.20372s, 73684 KB] g=11, 116 evaluated, 9 expanded
[t=2.21171s, 73684 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 21
[t=2.21171s, 73684 KB] g=33, 757 evaluated, 65 expanded
[t=2.21571s, 73684 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 20
[t=2.21571s, 73684 KB] g=39, 1346 evaluated, 114 expanded
[t=2.26371s, 73684 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 19
[t=2.26371s, 73684 KB] g=67, 6360 evaluated, 480 expanded
[t=2.29571s, 73684 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 18
[t=2.29571s, 73684 KB] g=70, 9601 evaluated, 735 expanded
[t=2.41171s, 73684 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 17
[t=2.41171s, 73684 KB] g=98, 22195 evaluated, 1678 expanded
[t=2.41171s, 73684 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 16
[t=2.41171s, 73684 KB] g=101, 22284 evaluated, 1684 expanded
[t=2.4877s, 73684 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 15
[t=2.4917s, 73684 KB] g=118, 30669 evaluated, 2333 expanded
[t=2.4917s, 73684 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 14
[t=2.4917s, 73684 KB] g=129, 30727 evaluated, 2337 expanded
[t=2.51569s, 73684 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 13
[t=2.51569s, 73684 KB] g=133, 33606 evaluated, 2581 expanded
[t=2.68369s, 73684 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 12
[t=2.68369s, 73684 KB] g=165, 49199 evaluated, 4249 expanded
[t=2.68369s, 73684 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 11
[t=2.68369s, 73684 KB] g=168, 49290 evaluated, 4255 expanded
[t=2.81969s, 73684 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 10
[t=2.81969s, 73684 KB] g=200, 59113 evaluated, 5829 expanded
[t=2.85969s, 73684 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 9
[t=2.85969s, 73684 KB] g=204, 63244 evaluated, 6200 expanded
[t=2.97968s, 73684 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 8
[t=2.97968s, 73684 KB] g=237, 73192 evaluated, 7552 expanded
[t=2.97968s, 73684 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 7
[t=2.97968s, 73684 KB] g=240, 73268 evaluated, 7557 expanded
[t=2.97968s, 73684 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 6
[t=2.97968s, 73684 KB] g=241, 73286 evaluated, 7558 expanded
[t=3.05968s, 73684 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 5
[t=3.05968s, 73684 KB] g=275, 79082 evaluated, 8580 expanded
[t=3.05968s, 73684 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 4
[t=3.05968s, 73684 KB] g=276, 79100 evaluated, 8581 expanded
[t=3.14368s, 73684 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 3
[t=3.14368s, 73684 KB] g=310, 85560 evaluated, 9744 expanded
[t=3.14368s, 73684 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 2
[t=3.14368s, 73684 KB] g=311, 85576 evaluated, 9745 expanded
[t=3.21568s, 73684 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 1
[t=3.21568s, 73684 KB] g=346, 91371 evaluated, 10758 expanded
[t=3.21568s, 73684 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 0
[t=3.21568s, 73684 KB] g=347, 91387 evaluated, 10759 expanded
[t=3.21568s, 73684 KB] Solution found!
[t=3.21568s, 73684 KB] Actual search time: 1.01196s
grasp left shot11 (1)
fill-shot shot11 ingredient4 left right dispenser4 (10)
leave left shot11 (1)
grasp left shot13 (1)
fill-shot shot13 ingredient1 left right dispenser1 (10)
pour-shot-to-clean-shaker shot13 ingredient1 shaker1 left l0 l1 (1)
clean-shot shot13 ingredient1 left right (1)
fill-shot shot13 ingredient2 left right dispenser2 (10)
pour-shot-to-used-shaker shot13 ingredient2 shaker1 left l1 l2 (1)
grasp right shaker1 (1)
leave left shot13 (1)
shake cocktail6 ingredient2 ingredient1 shaker1 right left (1)
pour-shaker-to-shot cocktail6 shot10 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail6 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot13 (1)
leave right shaker1 (1)
refill-shot shot13 ingredient2 left right dispenser2 (10)
pour-shot-to-clean-shaker shot13 ingredient2 shaker1 left l0 l1 (1)
clean-shot shot13 ingredient2 left right (1)
fill-shot shot13 ingredient3 left right dispenser3 (10)
pour-shot-to-used-shaker shot13 ingredient3 shaker1 left l1 l2 (1)
grasp right shaker1 (1)
leave left shot13 (1)
shake cocktail2 ingredient2 ingredient3 shaker1 right left (1)
pour-shaker-to-shot cocktail2 shot9 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail2 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot13 (1)
leave right shaker1 (1)
refill-shot shot13 ingredient3 left right dispenser3 (10)
pour-shot-to-clean-shaker shot13 ingredient3 shaker1 left l0 l1 (1)
clean-shot shot13 ingredient3 left right (1)
fill-shot shot13 ingredient1 left right dispenser1 (10)
pour-shot-to-used-shaker shot13 ingredient1 shaker1 left l1 l2 (1)
grasp right shaker1 (1)
leave left shot13 (1)
shake cocktail1 ingredient3 ingredient1 shaker1 right left (1)
pour-shaker-to-shot cocktail1 shot12 right shaker1 l2 l1 (1)
pour-shaker-to-shot cocktail1 shot2 right shaker1 l1 l0 (1)
empty-shaker right shaker1 cocktail1 l0 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot13 (1)
leave right shaker1 (1)
refill-shot shot13 ingredient1 left right dispenser1 (10)
pour-shot-to-clean-shaker shot13 ingredient1 shaker1 left l0 l1 (1)
clean-shot shot13 ingredient1 left right (1)
fill-shot shot13 ingredient3 left right dispenser3 (10)
pour-shot-to-used-shaker shot13 ingredient3 shaker1 left l1 l2 (1)
grasp right shaker1 (1)
leave left shot13 (1)
shake cocktail7 ingredient1 ingredient3 shaker1 right left (1)
grasp left shot13 (1)
leave right shaker1 (1)
refill-shot shot13 ingredient3 left right dispenser3 (10)
grasp right shaker1 (1)
leave left shot13 (1)
pour-shaker-to-shot cocktail7 shot5 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail7 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot13 (1)
pour-shot-to-clean-shaker shot13 ingredient3 shaker1 left l0 l1 (1)
leave right shaker1 (1)
clean-shot shot13 ingredient3 left right (1)
fill-shot shot13 ingredient1 left right dispenser1 (10)
pour-shot-to-used-shaker shot13 ingredient1 shaker1 left l1 l2 (1)
refill-shot shot13 ingredient1 left right dispenser1 (10)
grasp right shaker1 (1)
leave left shot13 (1)
shake cocktail9 ingredient3 ingredient1 shaker1 right left (1)
pour-shaker-to-shot cocktail9 shot8 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail9 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot13 (1)
pour-shot-to-clean-shaker shot13 ingredient1 shaker1 left l0 l1 (1)
leave left shot13 (1)
grasp left shot11 (1)
pour-shot-to-used-shaker shot11 ingredient4 shaker1 left l1 l2 (1)
leave left shot11 (1)
shake cocktail3 ingredient1 ingredient4 shaker1 right left (1)
grasp left shot11 (1)
leave right shaker1 (1)
refill-shot shot11 ingredient4 left right dispenser4 (10)
leave left shot11 (1)
grasp left shot13 (1)
clean-shot shot13 ingredient1 left right (1)
fill-shot shot13 ingredient2 left right dispenser2 (10)
grasp right shaker1 (1)
leave left shot13 (1)
pour-shaker-to-shot cocktail3 shot4 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail3 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot13 (1)
pour-shot-to-clean-shaker shot13 ingredient2 shaker1 left l0 l1 (1)
leave right shaker1 (1)
clean-shot shot13 ingredient2 left right (1)
fill-shot shot13 ingredient3 left right dispenser3 (10)
pour-shot-to-used-shaker shot13 ingredient3 shaker1 left l1 l2 (1)
grasp right shaker1 (1)
leave left shot13 (1)
shake cocktail5 ingredient2 ingredient3 shaker1 right left (1)
pour-shaker-to-shot cocktail5 shot3 right shaker1 l2 l1 (1)
grasp left shot13 (1)
leave right shaker1 (1)
refill-shot shot13 ingredient3 left right dispenser3 (10)
grasp right shaker1 (1)
leave left shot13 (1)
empty-shaker right shaker1 cocktail5 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot13 (1)
pour-shot-to-clean-shaker shot13 ingredient3 shaker1 left l0 l1 (1)
leave right shaker1 (1)
clean-shot shot13 ingredient3 left right (1)
fill-shot shot13 ingredient2 left right dispenser2 (10)
grasp right shaker1 (1)
pour-shot-to-used-shaker shot13 ingredient2 shaker1 left l1 l2 (1)
leave left shot13 (1)
shake cocktail8 ingredient3 ingredient2 shaker1 right left (1)
pour-shaker-to-shot cocktail8 shot7 right shaker1 l2 l1 (1)
grasp left shot13 (1)
leave right shaker1 (1)
refill-shot shot13 ingredient2 left right dispenser2 (10)
grasp right shaker1 (1)
leave left shot13 (1)
empty-shaker right shaker1 cocktail8 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot13 (1)
pour-shot-to-clean-shaker shot13 ingredient2 shaker1 left l0 l1 (1)
leave right shaker1 (1)
clean-shot shot13 ingredient2 left right (1)
fill-shot shot13 ingredient4 left right dispenser4 (10)
grasp right shaker1 (1)
pour-shot-to-used-shaker shot13 ingredient4 shaker1 left l1 l2 (1)
leave left shot13 (1)
shake cocktail4 ingredient4 ingredient2 shaker1 right left (1)
pour-shaker-to-shot cocktail4 shot1 right shaker1 l2 l1 (1)
leave right shaker1 (1)
grasp left shot13 (1)
clean-shot shot13 ingredient4 left right (1)
fill-shot shot13 ingredient3 left right dispenser3 (10)
grasp right shaker1 (1)
leave left shot13 (1)
empty-shaker right shaker1 cocktail4 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot13 (1)
pour-shot-to-clean-shaker shot13 ingredient3 shaker1 left l0 l1 (1)
leave right shaker1 (1)
clean-shot shot13 ingredient3 left right (1)
fill-shot shot13 ingredient4 left right dispenser4 (10)
grasp right shaker1 (1)
pour-shot-to-used-shaker shot13 ingredient4 shaker1 left l1 l2 (1)
leave left shot13 (1)
shake cocktail10 ingredient4 ingredient3 shaker1 right left (1)
pour-shaker-to-shot cocktail10 shot6 right shaker1 l2 l1 (1)
[t=3.21568s, 73684 KB] Plan length: 154 step(s).
[t=3.21568s, 73684 KB] Plan cost: 343
[t=3.21568s, 73684 KB] Expanded 10760 state(s).
[t=3.21568s, 73684 KB] Reopened 0 state(s).
[t=3.21568s, 73684 KB] Evaluated 91387 state(s).
[t=3.21568s, 73684 KB] Evaluations: 102146
[t=3.21568s, 73684 KB] Generated 117537 state(s).
[t=3.21568s, 73684 KB] Dead ends: 0 state(s).
[t=3.21568s, 73684 KB] Number of registered states: 91387
[t=3.21568s, 73684 KB] Int hash set load factor: 91387/131072 = 0.697227
[t=3.21568s, 73684 KB] Int hash set resizes: 17
[t=3.21568s, 73684 KB] Search time: 1.01196s
[t=3.21568s, 73684 KB] Total time: 3.21568s
Solution found.
Peak memory: 73684 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Running validate.
INFO     validate stdin: None
INFO     validate time limit: None
INFO     validate memory limit: None
INFO     validate command line string: validate domain.pddl problem.pddl sas_plan
Checking plan: sas_plan
Plan executed successfully - checking goal
Plan valid
Final value: 343 

Successful plans:
Value: 343
 sas_plan 343 

validate exit code: 0

