INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: 1799.99s
INFO     translator memory limit: 4096 MB
INFO     translator command line string: /usr/bin/python3 /home/dmdoebber/downward-projects/downward/experiments/paper/data/pref-ops-val/code-11d6cc7f374e3fd7216f4422aa97b8db8c68d3c3_e5e41175/builds/release/bin/translate/translate.py domain.pddl problem.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.002s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.002s wall-clock]
Preparing model... [0.000s CPU, 0.001s wall-clock]
Generated 50 rules.
Computing model... [0.000s CPU, 0.004s wall-clock]
375 relevant atoms
456 auxiliary atoms
831 final queue length
1049 total queue pushes
Completing instantiation... [0.010s CPU, 0.004s wall-clock]
Instantiating: [0.010s CPU, 0.011s wall-clock]
Computing fact groups...
Finding invariants...
11 initial candidates
Finding invariants: [0.000s CPU, 0.003s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
0 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.004s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.000s wall-clock]
Translating task: [0.010s CPU, 0.004s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
4 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.002s wall-clock]
Reordering and filtering variables...
19 of 19 variables necessary.
30 of 34 mutex groups necessary.
188 of 188 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.001s wall-clock]
Translator variables: 19
Translator derived variables: 0
Translator facts: 94
Translator goal facts: 12
Translator mutex groups: 30
Translator total mutex groups size: 120
Translator operators: 188
Translator axioms: 0
Translator task size: 1265
Translator peak memory: 30124 KB
Writing output... [0.000s CPU, 0.001s wall-clock]
Done! [0.020s CPU, 0.026s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: 1799.95s
INFO     search memory limit: 4096 MB
INFO     search command line string: /home/dmdoebber/downward-projects/downward/experiments/paper/data/pref-ops-val/code-11d6cc7f374e3fd7216f4422aa97b8db8c68d3c3_e5e41175/builds/release/bin/downward --evaluator 'eval=ff()' --search 'eager_greedy([lsh(patterns=systematic(4), op_order=default, res_order=default, transform=adapt_costs(cost_type=ONE))],  preferred=[eval])' --internal-plan-file sas_plan < output.sas
[t=0s, 46116 KB] reading input...
[t=0.00105302s, 46116 KB] done reading input!
[t=0.00105302s, 46504 KB] Simplifying 364 unary operators... done! [364 unary operators]
[t=0.00105302s, 46504 KB] time to simplify: 0s
[t=0.00105302s, 46504 KB] Initializing additive heuristic...
[t=0.00105302s, 46504 KB] Initializing FF heuristic...
[t=0.00105302s, 46504 KB] stop search of patterns: 3355443KB
[t=0.00105302s, 46504 KB] Generating patterns using the systematic generator...
[t=0.00105302s, 46504 KB] building causal graph...done! [t=0s]
[t=0.00402709s, 47068 KB] Found 2111 SGA patterns.
[t=0.0279337s, 47224 KB] Found 2682 interesting patterns.
[t=0.0306052s, 47224 KB] [12, 68, 459, 2143]
[t=0.0307076s, 47224 KB] Systematic generator number of patterns: 240
[t=0.0310811s, 47224 KB] Systematic generator total PDB size: 72720
[t=0.031098s, 47224 KB] Systematic generator computation time: 0.0296546s
[t=0.0311095s, 47224 KB] Computing PDBs for pattern collection...
[t=0.0515823s, 47224 KB] Done computing PDBs for pattern collection: 0.0204728s
[t=0.0515823s, 47224 KB] Operators: 188
[t=0.0515823s, 47224 KB] Restrictions: 240
[t=0.0515823s, 47224 KB] Mean mentions: 67
[t=0.0515823s, 47224 KB] Mean operators: 53
[t=0.0515823s, 47224 KB] Building successor generator...done!
[t=0.0515823s, 47224 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0515823s, 47224 KB] time for successor generation creation: 0s
[t=0.0515823s, 47224 KB] Variables: 19
[t=0.0515823s, 47224 KB] FactPairs: 94
[t=0.0515823s, 47224 KB] Bytes per state: 8
[t=0.0515823s, 47224 KB] Conducting best first search without reopening closed nodes, (real) bound = 2147483647
[t=0.0515823s, 47224 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 13
[t=0.0515823s, 47224 KB] g=0, 1 evaluated, 0 expanded
[t=0.0515823s, 47224 KB] Initial heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 13
[t=0.0515823s, 47224 KB] pruning method: none
[t=0.0515823s, 47224 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 12
[t=0.0515823s, 47224 KB] g=2, 3 evaluated, 1 expanded
[t=0.0515823s, 47224 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 11
[t=0.0515823s, 47224 KB] g=4, 16 evaluated, 2 expanded
[t=0.0515823s, 47224 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 10
[t=0.0515823s, 47224 KB] g=5, 33 evaluated, 3 expanded
[t=0.0515823s, 47224 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 9
[t=0.0515823s, 47224 KB] g=8, 59 evaluated, 6 expanded
[t=0.0515823s, 47224 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 8
[t=0.0515823s, 47224 KB] g=17, 173 evaluated, 21 expanded
[t=0.0555872s, 47224 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 7
[t=0.0555872s, 47224 KB] g=34, 247 evaluated, 39 expanded
[t=0.0555872s, 47224 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 6
[t=0.0555872s, 47224 KB] g=37, 270 evaluated, 46 expanded
[t=0.0555872s, 47224 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 5
[t=0.0555872s, 47224 KB] g=44, 306 evaluated, 52 expanded
[t=0.0555872s, 47224 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 4
[t=0.0555872s, 47224 KB] g=60, 513 evaluated, 126 expanded
[t=0.0874686s, 47492 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 3
[t=0.0874686s, 47492 KB] g=98, 8870 evaluated, 3247 expanded
[t=0.61932s, 53936 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 2
[t=0.61932s, 53936 KB] g=118, 130323 evaluated, 52474 expanded
[t=0.64731s, 53936 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 1
[t=0.64731s, 53936 KB] g=94, 137263 evaluated, 55502 expanded
[t=2.27877s, 73976 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 0
[t=2.27877s, 73976 KB] g=112, 501495 evaluated, 200907 expanded
[t=2.27877s, 73976 KB] Solution found!
[t=2.27877s, 73976 KB] Actual search time: 2.22718s
down robot2 tile_2-2 tile_1-2 (1)
down robot1 tile_3-1 tile_2-1 (1)
down robot1 tile_2-1 tile_1-1 (1)
down robot1 tile_1-1 tile_0-1 (1)
left robot2 tile_1-2 tile_1-1 (1)
up robot2 tile_1-1 tile_2-1 (3)
up robot2 tile_2-1 tile_3-1 (3)
paint-up robot2 tile_4-1 tile_3-1 black (2)
down robot2 tile_3-1 tile_2-1 (1)
down robot2 tile_2-1 tile_1-1 (1)
right robot2 tile_1-1 tile_1-2 (1)
right robot2 tile_1-2 tile_1-3 (1)
up robot2 tile_1-3 tile_2-3 (3)
up robot2 tile_2-3 tile_3-3 (3)
paint-up robot2 tile_4-3 tile_3-3 black (2)
down robot2 tile_3-3 tile_2-3 (1)
down robot2 tile_2-3 tile_1-3 (1)
up robot1 tile_0-1 tile_1-1 (3)
up robot1 tile_1-1 tile_2-1 (3)
paint-up robot1 tile_3-1 tile_2-1 white (2)
down robot1 tile_2-1 tile_1-1 (1)
down robot1 tile_1-1 tile_0-1 (1)
left robot2 tile_1-3 tile_1-2 (1)
left robot2 tile_1-2 tile_1-1 (1)
paint-up robot2 tile_2-1 tile_1-1 black (2)
right robot2 tile_1-1 tile_1-2 (1)
paint-up robot1 tile_1-1 tile_0-1 white (2)
right robot2 tile_1-2 tile_1-3 (1)
change-color robot2 black white (5)
up robot2 tile_1-3 tile_2-3 (3)
paint-up robot2 tile_3-3 tile_2-3 white (2)
change-color robot2 white black (5)
down robot2 tile_2-3 tile_1-3 (1)
paint-up robot2 tile_2-3 tile_1-3 black (2)
down robot2 tile_1-3 tile_0-3 (1)
change-color robot2 black white (5)
paint-up robot2 tile_1-3 tile_0-3 white (2)
right robot1 tile_0-1 tile_0-2 (1)
change-color robot2 white black (5)
up robot1 tile_0-2 tile_1-2 (3)
up robot1 tile_1-2 tile_2-2 (3)
up robot1 tile_2-2 tile_3-2 (3)
paint-up robot1 tile_4-2 tile_3-2 white (2)
change-color robot1 white black (5)
down robot1 tile_3-2 tile_2-2 (1)
paint-up robot1 tile_3-2 tile_2-2 black (2)
change-color robot1 black white (5)
down robot1 tile_2-2 tile_1-2 (1)
paint-up robot1 tile_2-2 tile_1-2 white (2)
down robot1 tile_1-2 tile_0-2 (1)
change-color robot1 white black (5)
paint-up robot1 tile_1-2 tile_0-2 black (2)
[t=2.27877s, 73976 KB] Plan length: 52 step(s).
[t=2.27877s, 73976 KB] Plan cost: 112
[t=2.27877s, 73976 KB] Expanded 200908 state(s).
[t=2.27877s, 73976 KB] Reopened 0 state(s).
[t=2.27877s, 73976 KB] Evaluated 501496 state(s).
[t=2.27877s, 73976 KB] Evaluations: 702403
[t=2.27877s, 73976 KB] Generated 1230854 state(s).
[t=2.27877s, 73976 KB] Dead ends: 65314 state(s).
[t=2.27877s, 73976 KB] Number of registered states: 501496
[t=2.27877s, 73976 KB] Int hash set load factor: 501496/1048576 = 0.478264
[t=2.27877s, 73976 KB] Int hash set resizes: 20
[t=2.27877s, 73976 KB] Search time: 2.22718s
[t=2.27877s, 73976 KB] Total time: 2.27877s
Solution found.
Peak memory: 73976 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Running validate.
INFO     validate stdin: None
INFO     validate time limit: None
INFO     validate memory limit: None
INFO     validate command line string: validate domain.pddl problem.pddl sas_plan
Checking plan: sas_plan
Plan executed successfully - checking goal
Plan valid
Final value: 112 

Successful plans:
Value: 112
 sas_plan 112 

validate exit code: 0

