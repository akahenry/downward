INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: 1799.98s
INFO     translator memory limit: 4096 MB
INFO     translator command line string: /usr/bin/python3 /home/dmdoebber/downward-projects/downward/experiments/paper/data/pref-ops-val/code-11d6cc7f374e3fd7216f4422aa97b8db8c68d3c3_e5e41175/builds/release/bin/translate/translate.py domain.pddl problem.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.002s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.010s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.003s wall-clock]
Preparing model... [0.000s CPU, 0.002s wall-clock]
Generated 115 rules.
Computing model... [0.030s CPU, 0.021s wall-clock]
2025 relevant atoms
2105 auxiliary atoms
4130 final queue length
7122 total queue pushes
Completing instantiation... [0.040s CPU, 0.040s wall-clock]
Instantiating: [0.080s CPU, 0.066s wall-clock]
Computing fact groups...
Finding invariants...
24 initial candidates
Finding invariants: [0.000s CPU, 0.007s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
207 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.010s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.009s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.002s wall-clock]
Translating task: [0.050s CPU, 0.053s wall-clock]
2326 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
3 propositions removed
Detecting unreachable propositions: [0.020s CPU, 0.022s wall-clock]
Reordering and filtering variables...
210 of 210 variables necessary.
11 of 14 mutex groups necessary.
1390 of 1390 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.010s CPU, 0.013s wall-clock]
Translator variables: 210
Translator derived variables: 0
Translator facts: 441
Translator goal facts: 9
Translator mutex groups: 11
Translator total mutex groups size: 33
Translator operators: 1390
Translator axioms: 0
Translator task size: 13333
Translator peak memory: 37772 KB
Writing output... [0.000s CPU, 0.009s wall-clock]
Done! [0.180s CPU, 0.177s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: 1799.78s
INFO     search memory limit: 4096 MB
INFO     search command line string: /home/dmdoebber/downward-projects/downward/experiments/paper/data/pref-ops-val/code-11d6cc7f374e3fd7216f4422aa97b8db8c68d3c3_e5e41175/builds/release/bin/downward --evaluator 'eval=ff()' --search 'eager_greedy([lsh(patterns=systematic(4), op_order=default, res_order=default, transform=adapt_costs(cost_type=ONE))],  preferred=[eval])' --internal-plan-file sas_plan < output.sas
[t=0s, 46116 KB] reading input...
[t=0.00399962s, 46636 KB] done reading input!
[t=0.00399962s, 47312 KB] Simplifying 5146 unary operators... done! [4354 unary operators]
[t=0.0080028s, 47708 KB] time to simplify: 0.00400318s
[t=0.0080028s, 47708 KB] Initializing additive heuristic...
[t=0.0080028s, 47708 KB] Initializing FF heuristic...
[t=0.0080028s, 47708 KB] stop search of patterns: 3355443KB
[t=0.0080028s, 47708 KB] Generating patterns using the systematic generator...
[t=0.0080028s, 47708 KB] building causal graph...done! [t=0.00398978s]
[t=0.051981s, 60100 KB] Found 47791 SGA patterns.
[t=0.846011s, 60700 KB] Found 52515 interesting patterns.
[t=0.846011s, 60700 KB] [9, 67, 1862, 50577]
[t=0.85395s, 60700 KB] Systematic generator number of patterns: 228
[t=0.85395s, 60700 KB] Systematic generator total PDB size: 4624
[t=0.85395s, 60700 KB] Systematic generator computation time: 0.845947s
[t=0.85395s, 60700 KB] Computing PDBs for pattern collection...
[t=0.91386s, 60700 KB] Done computing PDBs for pattern collection: 0.0599099s
[t=0.91786s, 60700 KB] Operators: 1390
[t=0.91786s, 60700 KB] Restrictions: 228
[t=0.91786s, 60700 KB] Mean mentions: 59
[t=0.91786s, 60700 KB] Mean operators: 362
[t=0.91786s, 60700 KB] Building successor generator...done!
[t=0.921863s, 60700 KB] peak memory difference for successor generator creation: 0 KB
[t=0.921863s, 60700 KB] time for successor generation creation: 0s
[t=0.921863s, 60700 KB] Variables: 210
[t=0.921863s, 60700 KB] FactPairs: 441
[t=0.921863s, 60700 KB] Bytes per state: 28
[t=0.921863s, 60700 KB] Conducting best first search without reopening closed nodes, (real) bound = 2147483647
[t=0.921863s, 60700 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 22
[t=0.921863s, 60700 KB] g=0, 1 evaluated, 0 expanded
[t=0.921863s, 60700 KB] Initial heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 22
[t=0.921863s, 60700 KB] pruning method: none
[t=0.921863s, 60700 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 21
[t=0.921863s, 60700 KB] g=1, 3 evaluated, 1 expanded
[t=0.921863s, 60700 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 20
[t=0.921863s, 60700 KB] g=12, 134 evaluated, 12 expanded
[t=0.921863s, 60700 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 19
[t=0.921863s, 60700 KB] g=13, 135 evaluated, 13 expanded
[t=0.921863s, 60700 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 18
[t=0.921863s, 60700 KB] g=25, 216 evaluated, 31 expanded
[t=0.925856s, 60700 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 17
[t=0.925856s, 60700 KB] g=40, 359 evaluated, 56 expanded
[t=0.937853s, 60700 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 16
[t=0.937853s, 60700 KB] g=58, 1120 evaluated, 157 expanded
[t=0.937853s, 60700 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 15
[t=0.937853s, 60700 KB] g=72, 1260 evaluated, 182 expanded
[t=0.953851s, 60700 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 14
[t=0.953851s, 60700 KB] g=90, 2505 evaluated, 365 expanded
[t=0.957855s, 60700 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 13
[t=0.957855s, 60700 KB] g=104, 2655 evaluated, 396 expanded
[t=0.957855s, 60700 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 12
[t=0.957855s, 60700 KB] g=106, 2680 evaluated, 398 expanded
[t=0.981842s, 60700 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 11
[t=0.981842s, 60700 KB] g=122, 3899 evaluated, 643 expanded
[t=0.985842s, 60700 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 10
[t=0.985842s, 60700 KB] g=138, 4187 evaluated, 703 expanded
[t=0.985842s, 60700 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 9
[t=0.985842s, 60700 KB] g=139, 4205 evaluated, 704 expanded
[t=1.18181s, 60700 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 8
[t=1.18181s, 60700 KB] g=175, 13943 evaluated, 2877 expanded
[t=1.18181s, 60700 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 7
[t=1.18181s, 60700 KB] g=176, 13946 evaluated, 2878 expanded
[t=1.35778s, 60700 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 6
[t=1.35778s, 60700 KB] g=207, 22361 evaluated, 4898 expanded
[t=1.35778s, 60700 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 5
[t=1.35778s, 60700 KB] g=208, 22376 evaluated, 4899 expanded
[t=1.43376s, 60700 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 3
[t=1.43376s, 60700 KB] g=238, 26091 evaluated, 5771 expanded
[t=1.43376s, 60700 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 2
[t=1.43376s, 60700 KB] g=239, 26106 evaluated, 5772 expanded
[t=1.53775s, 60700 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 1
[t=1.53775s, 60700 KB] g=269, 31656 evaluated, 7043 expanded
[t=1.53775s, 60700 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 0
[t=1.53775s, 60700 KB] g=270, 31669 evaluated, 7044 expanded
[t=1.53775s, 60700 KB] Solution found!
[t=1.53775s, 60700 KB] Actual search time: 0.615883s
grasp right shot10 (1)
fill-shot shot10 ingredient3 right left dispenser3 (10)
pour-shot-to-clean-shaker shot10 ingredient3 shaker1 right l0 l1 (1)
leave right shot10 (1)
grasp right shot9 (1)
fill-shot shot9 ingredient3 right left dispenser3 (10)
leave right shot9 (1)
grasp right shot10 (1)
clean-shot shot10 ingredient3 right left (1)
fill-shot shot10 ingredient2 right left dispenser2 (10)
grasp left shaker1 (1)
pour-shot-to-used-shaker shot10 ingredient2 shaker1 right l1 l2 (1)
leave right shot10 (1)
shake cocktail5 ingredient2 ingredient3 shaker1 left right (1)
pour-shaker-to-shot cocktail5 shot6 left shaker1 l2 l1 (1)
empty-shaker left shaker1 cocktail5 l1 l0 (1)
clean-shaker left right shaker1 (1)
grasp right shot9 (1)
pour-shot-to-clean-shaker shot9 ingredient3 shaker1 right l0 l1 (1)
leave left shaker1 (1)
refill-shot shot9 ingredient3 right left dispenser3 (10)
leave right shot9 (1)
grasp right shot10 (1)
refill-shot shot10 ingredient2 right left dispenser2 (10)
grasp left shaker1 (1)
pour-shot-to-used-shaker shot10 ingredient2 shaker1 right l1 l2 (1)
leave right shot10 (1)
shake cocktail2 ingredient2 ingredient3 shaker1 left right (1)
pour-shaker-to-shot cocktail2 shot2 left shaker1 l2 l1 (1)
empty-shaker left shaker1 cocktail2 l1 l0 (1)
clean-shaker left right shaker1 (1)
grasp right shot9 (1)
pour-shot-to-clean-shaker shot9 ingredient3 shaker1 right l0 l1 (1)
leave left shaker1 (1)
refill-shot shot9 ingredient3 right left dispenser3 (10)
leave right shot9 (1)
grasp right shot10 (1)
refill-shot shot10 ingredient2 right left dispenser2 (10)
grasp left shaker1 (1)
pour-shot-to-used-shaker shot10 ingredient2 shaker1 right l1 l2 (1)
leave right shot10 (1)
shake cocktail3 ingredient2 ingredient3 shaker1 left right (1)
pour-shaker-to-shot cocktail3 shot5 left shaker1 l2 l1 (1)
empty-shaker left shaker1 cocktail3 l1 l0 (1)
clean-shaker left right shaker1 (1)
leave left shaker1 (1)
grasp left shot9 (1)
pour-shot-to-clean-shaker shot9 ingredient3 shaker1 left l0 l1 (1)
refill-shot shot9 ingredient3 left right dispenser3 (10)
leave left shot9 (1)
grasp left shot10 (1)
clean-shot shot10 ingredient2 left right (1)
fill-shot shot10 ingredient4 left right dispenser4 (10)
grasp right shaker1 (1)
pour-shot-to-used-shaker shot10 ingredient4 shaker1 left l1 l2 (1)
leave left shot10 (1)
shake cocktail1 ingredient3 ingredient4 shaker1 right left (1)
pour-shaker-to-shot cocktail1 shot7 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail1 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot10 (1)
leave right shaker1 (1)
refill-shot shot10 ingredient4 left right dispenser4 (10)
pour-shot-to-clean-shaker shot10 ingredient4 shaker1 left l0 l1 (1)
leave left shot10 (1)
grasp right shot9 (1)
grasp left shaker1 (1)
pour-shot-to-used-shaker shot9 ingredient3 shaker1 right l1 l2 (1)
leave right shot9 (1)
shake cocktail4 ingredient3 ingredient4 shaker1 left right (1)
pour-shaker-to-shot cocktail4 shot1 left shaker1 l2 l1 (1)
leave left shaker1 (1)
grasp left shot9 (1)
refill-shot shot9 ingredient3 left right dispenser3 (10)
grasp right shaker1 (1)
leave left shot9 (1)
empty-shaker right shaker1 cocktail4 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot10 (1)
leave right shaker1 (1)
refill-shot shot10 ingredient4 left right dispenser4 (10)
pour-shot-to-clean-shaker shot10 ingredient4 shaker1 left l0 l1 (1)
clean-shot shot10 ingredient4 left right (1)
fill-shot shot10 ingredient2 left right dispenser2 (10)
grasp right shaker1 (1)
pour-shot-to-used-shaker shot10 ingredient2 shaker1 left l1 l2 (1)
leave left shot10 (1)
shake cocktail7 ingredient2 ingredient4 shaker1 right left (1)
pour-shaker-to-shot cocktail7 shot4 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail7 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot10 (1)
leave right shaker1 (1)
refill-shot shot10 ingredient2 left right dispenser2 (10)
pour-shot-to-clean-shaker shot10 ingredient2 shaker1 left l0 l1 (1)
clean-shot shot10 ingredient2 left right (1)
fill-shot shot10 ingredient1 left right dispenser1 (10)
pour-shot-to-used-shaker shot10 ingredient1 shaker1 left l1 l2 (1)
grasp right shaker1 (1)
leave left shot10 (1)
shake cocktail6 ingredient1 ingredient2 shaker1 right left (1)
pour-shaker-to-shot cocktail6 shot8 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail6 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot10 (1)
leave right shaker1 (1)
refill-shot shot10 ingredient1 left right dispenser1 (10)
pour-shot-to-clean-shaker shot10 ingredient1 shaker1 left l0 l1 (1)
clean-shot shot10 ingredient1 left right (1)
fill-shot shot10 ingredient2 left right dispenser2 (10)
grasp right shaker1 (1)
pour-shot-to-used-shaker shot10 ingredient2 shaker1 left l1 l2 (1)
leave left shot10 (1)
shake cocktail8 ingredient1 ingredient2 shaker1 right left (1)
pour-shaker-to-shot cocktail8 shot3 right shaker1 l2 l1 (1)
[t=1.53775s, 60700 KB] Plan length: 115 step(s).
[t=1.53775s, 60700 KB] Plan cost: 268
[t=1.53775s, 60700 KB] Expanded 7045 state(s).
[t=1.53775s, 60700 KB] Reopened 0 state(s).
[t=1.53775s, 60700 KB] Evaluated 31669 state(s).
[t=1.53775s, 60700 KB] Evaluations: 38713
[t=1.53775s, 60700 KB] Generated 54357 state(s).
[t=1.53775s, 60700 KB] Dead ends: 0 state(s).
[t=1.53775s, 60700 KB] Number of registered states: 31669
[t=1.53775s, 60700 KB] Int hash set load factor: 31669/65536 = 0.483231
[t=1.53775s, 60700 KB] Int hash set resizes: 16
[t=1.53775s, 60700 KB] Search time: 0.615883s
[t=1.53775s, 60700 KB] Total time: 1.53775s
Solution found.
Peak memory: 60700 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Running validate.
INFO     validate stdin: None
INFO     validate time limit: None
INFO     validate memory limit: None
INFO     validate command line string: validate domain.pddl problem.pddl sas_plan
Checking plan: sas_plan
Plan executed successfully - checking goal
Plan valid
Final value: 268 

Successful plans:
Value: 268
 sas_plan 268 

validate exit code: 0

