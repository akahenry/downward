INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: 1799.98s
INFO     translator memory limit: 4096 MB
INFO     translator command line string: /usr/bin/python3 /home/dmdoebber/downward-projects/downward/experiments/paper/data/pref-ops-val/code-11d6cc7f374e3fd7216f4422aa97b8db8c68d3c3_e5e41175/builds/release/bin/translate/translate.py domain.pddl problem.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.002s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.001s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.003s wall-clock]
Preparing model... [0.000s CPU, 0.002s wall-clock]
Generated 115 rules.
Computing model... [0.030s CPU, 0.029s wall-clock]
2784 relevant atoms
2893 auxiliary atoms
5677 final queue length
9793 total queue pushes
Completing instantiation... [0.060s CPU, 0.058s wall-clock]
Instantiating: [0.090s CPU, 0.092s wall-clock]
Computing fact groups...
Finding invariants...
24 initial candidates
Finding invariants: [0.010s CPU, 0.008s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
292 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.001s wall-clock]
Computing fact groups: [0.010s CPU, 0.010s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.003s wall-clock]
Translating task: [0.070s CPU, 0.070s wall-clock]
3276 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
3 propositions removed
Detecting unreachable propositions: [0.030s CPU, 0.030s wall-clock]
Reordering and filtering variables...
295 of 295 variables necessary.
14 of 17 mutex groups necessary.
1958 of 1958 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.020s CPU, 0.019s wall-clock]
Translator variables: 295
Translator derived variables: 0
Translator facts: 617
Translator goal facts: 12
Translator mutex groups: 14
Translator total mutex groups size: 42
Translator operators: 1958
Translator axioms: 0
Translator task size: 18764
Translator peak memory: 40996 KB
Writing output... [0.010s CPU, 0.012s wall-clock]
Done! [0.240s CPU, 0.241s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: 1799.72s
INFO     search memory limit: 4096 MB
INFO     search command line string: /home/dmdoebber/downward-projects/downward/experiments/paper/data/pref-ops-val/code-11d6cc7f374e3fd7216f4422aa97b8db8c68d3c3_e5e41175/builds/release/bin/downward --evaluator 'eval=ff()' --search 'eager_greedy([lsh(patterns=systematic(4), op_order=default, res_order=default, transform=adapt_costs(cost_type=ONE))],  preferred=[eval])' --internal-plan-file sas_plan < output.sas
[t=0s, 46116 KB] reading input...
[t=0.00796453s, 46952 KB] done reading input!
[t=0.00886698s, 47876 KB] Simplifying 7194 unary operators... done! [6166 unary operators]
[t=0.0138986s, 48404 KB] time to simplify: 0.00503161s
[t=0.014113s, 48404 KB] Initializing additive heuristic...
[t=0.0142596s, 48404 KB] Initializing FF heuristic...
[t=0.0142716s, 48404 KB] stop search of patterns: 3355443KB
[t=0.0143196s, 48404 KB] Generating patterns using the systematic generator...
[t=0.0143633s, 48404 KB] building causal graph...done! [t=0.00153211s]
[t=0.0957085s, 72680 KB] Found 92126 SGA patterns.
[t=1.96427s, 73668 KB] Found 102930 interesting patterns.
[t=1.97229s, 73668 KB] [12, 88, 2951, 99879]
[t=1.9962s, 73668 KB] Systematic generator number of patterns: 300
[t=1.9962s, 73668 KB] Systematic generator total PDB size: 7056
[t=1.9962s, 73668 KB] Systematic generator computation time: 1.98188s
[t=1.9962s, 73668 KB] Computing PDBs for pattern collection...
[t=2.10418s, 73668 KB] Done computing PDBs for pattern collection: 0.107987s
[t=2.11618s, 73668 KB] Operators: 1958
[t=2.11618s, 73668 KB] Restrictions: 300
[t=2.11618s, 73668 KB] Mean mentions: 84
[t=2.11618s, 73668 KB] Mean operators: 549
[t=2.11618s, 73668 KB] Building successor generator...done!
[t=2.12018s, 73668 KB] peak memory difference for successor generator creation: 0 KB
[t=2.12018s, 73668 KB] time for successor generation creation: 0.00400009s
[t=2.12018s, 73668 KB] Variables: 295
[t=2.12018s, 73668 KB] FactPairs: 617
[t=2.12018s, 73668 KB] Bytes per state: 40
[t=2.12018s, 73668 KB] Conducting best first search without reopening closed nodes, (real) bound = 2147483647
[t=2.12018s, 73668 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 25
[t=2.12018s, 73668 KB] g=0, 1 evaluated, 0 expanded
[t=2.12018s, 73668 KB] Initial heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 25
[t=2.12018s, 73668 KB] pruning method: none
[t=2.12018s, 73668 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 24
[t=2.12018s, 73668 KB] g=1, 2 evaluated, 1 expanded
[t=2.12018s, 73668 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 23
[t=2.12018s, 73668 KB] g=12, 72 evaluated, 13 expanded
[t=2.13218s, 73668 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 22
[t=2.13218s, 73668 KB] g=27, 831 evaluated, 146 expanded
[t=2.13618s, 73668 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 21
[t=2.13618s, 73668 KB] g=40, 1159 evaluated, 169 expanded
[t=2.18418s, 73668 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 20
[t=2.18418s, 73668 KB] g=58, 4326 evaluated, 666 expanded
[t=2.18818s, 73668 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 19
[t=2.18818s, 73668 KB] g=71, 4563 evaluated, 703 expanded
[t=2.34018s, 73668 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 18
[t=2.34018s, 73668 KB] g=91, 15541 evaluated, 2251 expanded
[t=2.34018s, 73668 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 17
[t=2.34018s, 73668 KB] g=102, 15700 evaluated, 2273 expanded
[t=2.41618s, 73668 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 16
[t=2.41618s, 73668 KB] g=123, 21081 evaluated, 3055 expanded
[t=2.41618s, 73668 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 15
[t=2.41618s, 73668 KB] g=134, 21241 evaluated, 3077 expanded
[t=2.43218s, 73668 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 14
[t=2.43218s, 73668 KB] g=138, 22474 evaluated, 3256 expanded
[t=2.46018s, 73668 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 13
[t=2.46018s, 73668 KB] g=152, 24170 evaluated, 3499 expanded
[t=2.79617s, 73668 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 12
[t=2.80017s, 73668 KB] g=187, 37381 evaluated, 6107 expanded
[t=2.80017s, 73668 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 11
[t=2.80017s, 73668 KB] g=188, 37399 evaluated, 6108 expanded
[t=3.14816s, 73668 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 10
[t=3.14816s, 73668 KB] g=226, 50740 evaluated, 8876 expanded
[t=3.14816s, 73668 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 9
[t=3.14816s, 73668 KB] g=228, 50765 evaluated, 8878 expanded
[t=3.22415s, 73668 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 8
[t=3.22415s, 73668 KB] g=264, 54246 evaluated, 9497 expanded
[t=3.22415s, 73668 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 7
[t=3.22415s, 73668 KB] g=265, 54268 evaluated, 9498 expanded
[t=3.30815s, 73668 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 6
[t=3.30815s, 73668 KB] g=281, 58567 evaluated, 10167 expanded
[t=3.32815s, 73668 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 5
[t=3.32815s, 73668 KB] g=296, 59577 evaluated, 10340 expanded
[t=3.33215s, 73668 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 4
[t=3.33215s, 73668 KB] g=297, 59597 evaluated, 10341 expanded
[t=3.48415s, 73668 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 3
[t=3.48415s, 73668 KB] g=331, 66993 evaluated, 11697 expanded
[t=3.48415s, 73668 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 2
[t=3.48415s, 73668 KB] g=332, 67011 evaluated, 11698 expanded
[t=3.59614s, 73668 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 1
[t=3.59614s, 73668 KB] g=366, 71969 evaluated, 12666 expanded
[t=3.59614s, 73668 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 0
[t=3.59614s, 73668 KB] g=367, 71986 evaluated, 12667 expanded
[t=3.59614s, 73668 KB] Solution found!
[t=3.59614s, 73668 KB] Actual search time: 1.47596s
grasp right shot12 (1)
fill-shot shot12 ingredient1 right left dispenser1 (10)
pour-shot-to-clean-shaker shot12 ingredient1 shaker1 right l0 l1 (1)
clean-shot shot12 ingredient1 right left (1)
fill-shot shot12 ingredient4 right left dispenser4 (10)
grasp left shaker1 (1)
pour-shot-to-used-shaker shot12 ingredient4 shaker1 right l1 l2 (1)
leave right shot12 (1)
shake cocktail2 ingredient1 ingredient4 shaker1 left right (1)
grasp right shot12 (1)
pour-shaker-to-shot cocktail2 shot5 left shaker1 l2 l1 (1)
leave left shaker1 (1)
refill-shot shot12 ingredient4 right left dispenser4 (10)
leave right shot12 (1)
grasp left shot13 (1)
fill-shot shot13 ingredient3 left right dispenser3 (10)
grasp right shaker1 (1)
leave left shot13 (1)
empty-shaker right shaker1 cocktail2 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot13 (1)
pour-shot-to-clean-shaker shot13 ingredient3 shaker1 left l0 l1 (1)
leave right shaker1 (1)
clean-shot shot13 ingredient3 left right (1)
fill-shot shot13 ingredient1 left right dispenser1 (10)
pour-shot-to-used-shaker shot13 ingredient1 shaker1 left l1 l2 (1)
grasp right shaker1 (1)
leave left shot13 (1)
shake cocktail10 ingredient1 ingredient3 shaker1 right left (1)
pour-shaker-to-shot cocktail10 shot1 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail10 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot13 (1)
leave right shaker1 (1)
clean-shot shot13 ingredient1 left right (1)
fill-shot shot13 ingredient3 left right dispenser3 (10)
pour-shot-to-clean-shaker shot13 ingredient3 shaker1 left l0 l1 (1)
clean-shot shot13 ingredient3 left right (1)
fill-shot shot13 ingredient1 left right dispenser1 (10)
pour-shot-to-used-shaker shot13 ingredient1 shaker1 left l1 l2 (1)
grasp right shaker1 (1)
leave left shot13 (1)
shake cocktail9 ingredient1 ingredient3 shaker1 right left (1)
pour-shaker-to-shot cocktail9 shot2 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail9 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot13 (1)
leave right shaker1 (1)
clean-shot shot13 ingredient1 left right (1)
fill-shot shot13 ingredient3 left right dispenser3 (10)
pour-shot-to-clean-shaker shot13 ingredient3 shaker1 left l0 l1 (1)
clean-shot shot13 ingredient3 left right (1)
fill-shot shot13 ingredient2 left right dispenser2 (10)
pour-shot-to-used-shaker shot13 ingredient2 shaker1 left l1 l2 (1)
grasp right shaker1 (1)
leave left shot13 (1)
shake cocktail7 ingredient3 ingredient2 shaker1 right left (1)
leave right shaker1 (1)
grasp left shot8 (1)
fill-shot shot8 ingredient1 left right dispenser1 (10)
grasp right shaker1 (1)
pour-shaker-to-shot cocktail7 shot10 right shaker1 l2 l1 (1)
leave left shot8 (1)
grasp left shot13 (1)
leave right shaker1 (1)
refill-shot shot13 ingredient2 left right dispenser2 (10)
grasp right shaker1 (1)
leave left shot13 (1)
empty-shaker right shaker1 cocktail7 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot13 (1)
pour-shot-to-clean-shaker shot13 ingredient2 shaker1 left l0 l1 (1)
leave right shaker1 (1)
clean-shot shot13 ingredient2 left right (1)
fill-shot shot13 ingredient3 left right dispenser3 (10)
grasp right shaker1 (1)
pour-shot-to-used-shaker shot13 ingredient3 shaker1 left l1 l2 (1)
leave left shot13 (1)
shake cocktail3 ingredient3 ingredient2 shaker1 right left (1)
pour-shaker-to-shot cocktail3 shot3 right shaker1 l2 l1 (1)
empty-shaker right shaker1 cocktail3 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot13 (1)
leave right shaker1 (1)
refill-shot shot13 ingredient3 left right dispenser3 (10)
pour-shot-to-clean-shaker shot13 ingredient3 shaker1 left l0 l1 (1)
clean-shot shot13 ingredient3 left right (1)
fill-shot shot13 ingredient4 left right dispenser4 (10)
grasp right shaker1 (1)
pour-shot-to-used-shaker shot13 ingredient4 shaker1 left l1 l2 (1)
leave left shot13 (1)
shake cocktail1 ingredient4 ingredient3 shaker1 right left (1)
grasp left shot8 (1)
empty-shot left shot8 ingredient1 (1)
leave right shaker1 (1)
clean-shot shot8 ingredient1 left right (1)
grasp right shaker1 (1)
pour-shaker-to-shot cocktail1 shot8 right shaker1 l2 l1 (1)
leave left shot8 (1)
leave right shaker1 (1)
grasp left shot13 (1)
clean-shot shot13 ingredient4 left right (1)
fill-shot shot13 ingredient1 left right dispenser1 (10)
grasp right shaker1 (1)
leave left shot13 (1)
empty-shaker right shaker1 cocktail1 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot13 (1)
pour-shot-to-clean-shaker shot13 ingredient1 shaker1 left l0 l1 (1)
leave right shaker1 (1)
clean-shot shot13 ingredient1 left right (1)
fill-shot shot13 ingredient2 left right dispenser2 (10)
grasp right shaker1 (1)
pour-shot-to-used-shaker shot13 ingredient2 shaker1 left l1 l2 (1)
leave left shot13 (1)
shake cocktail8 ingredient1 ingredient2 shaker1 right left (1)
pour-shaker-to-shot cocktail8 shot11 right shaker1 l2 l1 (1)
pour-shaker-to-shot cocktail8 shot6 right shaker1 l1 l0 (1)
empty-shaker right shaker1 cocktail8 l0 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot13 (1)
leave right shaker1 (1)
refill-shot shot13 ingredient2 left right dispenser2 (10)
pour-shot-to-clean-shaker shot13 ingredient2 shaker1 left l0 l1 (1)
clean-shot shot13 ingredient2 left right (1)
fill-shot shot13 ingredient1 left right dispenser1 (10)
grasp right shaker1 (1)
pour-shot-to-used-shaker shot13 ingredient1 shaker1 left l1 l2 (1)
leave left shot13 (1)
shake cocktail4 ingredient2 ingredient1 shaker1 right left (1)
pour-shaker-to-shot cocktail4 shot7 right shaker1 l2 l1 (1)
grasp left shot13 (1)
leave right shaker1 (1)
refill-shot shot13 ingredient1 left right dispenser1 (10)
grasp right shaker1 (1)
leave left shot13 (1)
empty-shaker right shaker1 cocktail4 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot13 (1)
pour-shot-to-clean-shaker shot13 ingredient1 shaker1 left l0 l1 (1)
leave right shaker1 (1)
clean-shot shot13 ingredient1 left right (1)
fill-shot shot13 ingredient2 left right dispenser2 (10)
grasp right shaker1 (1)
pour-shot-to-used-shaker shot13 ingredient2 shaker1 left l1 l2 (1)
leave left shot13 (1)
shake cocktail5 ingredient2 ingredient1 shaker1 right left (1)
pour-shaker-to-shot cocktail5 shot4 right shaker1 l2 l1 (1)
grasp left shot13 (1)
leave right shaker1 (1)
refill-shot shot13 ingredient2 left right dispenser2 (10)
grasp right shaker1 (1)
leave left shot13 (1)
empty-shaker right shaker1 cocktail5 l1 l0 (1)
clean-shaker right left shaker1 (1)
grasp left shot13 (1)
pour-shot-to-clean-shaker shot13 ingredient2 shaker1 left l0 l1 (1)
leave right shaker1 (1)
clean-shot shot13 ingredient2 left right (1)
fill-shot shot13 ingredient1 left right dispenser1 (10)
grasp right shaker1 (1)
pour-shot-to-used-shaker shot13 ingredient1 shaker1 left l1 l2 (1)
leave left shot13 (1)
shake cocktail6 ingredient1 ingredient2 shaker1 right left (1)
pour-shaker-to-shot cocktail6 shot9 right shaker1 l2 l1 (1)
[t=3.59614s, 73668 KB] Plan length: 165 step(s).
[t=3.59614s, 73668 KB] Plan cost: 363
[t=3.59614s, 73668 KB] Expanded 12668 state(s).
[t=3.59614s, 73668 KB] Reopened 0 state(s).
[t=3.59614s, 73668 KB] Evaluated 71986 state(s).
[t=3.59614s, 73668 KB] Evaluations: 84653
[t=3.59614s, 73668 KB] Generated 108862 state(s).
[t=3.59614s, 73668 KB] Dead ends: 0 state(s).
[t=3.59614s, 73668 KB] Number of registered states: 71986
[t=3.59614s, 73668 KB] Int hash set load factor: 71986/131072 = 0.54921
[t=3.59614s, 73668 KB] Int hash set resizes: 17
[t=3.59614s, 73668 KB] Search time: 1.47596s
[t=3.59614s, 73668 KB] Total time: 3.59614s
Solution found.
Peak memory: 73668 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Running validate.
INFO     validate stdin: None
INFO     validate time limit: None
INFO     validate memory limit: None
INFO     validate command line string: validate domain.pddl problem.pddl sas_plan
Checking plan: sas_plan
Plan executed successfully - checking goal
Plan valid
Final value: 363 

Successful plans:
Value: 363
 sas_plan 363 

validate exit code: 0

