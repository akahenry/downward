INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: 1799.98s
INFO     translator memory limit: 4096 MB
INFO     translator command line string: /usr/bin/python3 /home/dmdoebber/downward-projects/downward/experiments/paper/data/pref-ops-val/code-11d6cc7f374e3fd7216f4422aa97b8db8c68d3c3_e5e41175/builds/release/bin/translate/translate.py domain.pddl problem.pddl --sas-file output.sas
Parsing...
Parsing: [0.010s CPU, 0.003s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.001s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.001s wall-clock]
Generated 26 rules.
Computing model... [0.130s CPU, 0.125s wall-clock]
15500 relevant atoms
12176 auxiliary atoms
27676 final queue length
55372 total queue pushes
Completing instantiation... [0.400s CPU, 0.395s wall-clock]
Instantiating: [0.530s CPU, 0.526s wall-clock]
Computing fact groups...
Finding invariants...
9 initial candidates
Finding invariants: [0.000s CPU, 0.006s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.010s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
0 uncovered facts
Choosing groups: [0.000s CPU, 0.001s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.011s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.020s CPU, 0.018s wall-clock]
Translating task: [0.340s CPU, 0.339s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
20 propositions removed
Detecting unreachable propositions: [0.200s CPU, 0.205s wall-clock]
Reordering and filtering variables...
20 of 20 variables necessary.
0 of 20 mutex groups necessary.
14496 of 14496 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.040s CPU, 0.044s wall-clock]
Translator variables: 20
Translator derived variables: 0
Translator facts: 644
Translator goal facts: 12
Translator mutex groups: 0
Translator total mutex groups size: 0
Translator operators: 14496
Translator axioms: 0
Translator task size: 85636
Translator peak memory: 86484 KB
Writing output... [0.060s CPU, 0.055s wall-clock]
Done! [1.210s CPU, 1.204s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: 1798.76s
INFO     search memory limit: 4096 MB
INFO     search command line string: /home/dmdoebber/downward-projects/downward/experiments/paper/data/pref-ops-val/code-11d6cc7f374e3fd7216f4422aa97b8db8c68d3c3_e5e41175/builds/release/bin/downward --evaluator 'eval=ff()' --search 'eager_greedy([lsh(patterns=systematic(4), op_order=default, res_order=default, transform=adapt_costs(cost_type=ONE))],  preferred=[eval])' --internal-plan-file sas_plan < output.sas
[t=0s, 46116 KB] reading input...
[t=0.0420398s, 50636 KB] done reading input!
[t=0.0460471s, 52612 KB] Simplifying 28320 unary operators... done! [28320 unary operators]
[t=0.0580359s, 55220 KB] time to simplify: 0.0119889s
[t=0.0580359s, 55220 KB] Initializing additive heuristic...
[t=0.0580359s, 55220 KB] Initializing FF heuristic...
[t=0.0580359s, 55220 KB] stop search of patterns: 3355443KB
[t=0.0580359s, 55220 KB] Generating patterns using the systematic generator...
[t=0.0580359s, 55220 KB] building causal graph...done! [t=0.00399356s]
[t=0.0700311s, 55220 KB] Found 3712 SGA patterns.
[t=0.113864s, 55220 KB] Found 5252 interesting patterns.
[t=0.113864s, 55220 KB] [12, 96, 864, 4280]
[t=0.113864s, 55220 KB] Systematic generator number of patterns: 324
[t=0.113864s, 55220 KB] Systematic generator total PDB size: 107364760
[t=0.113864s, 55220 KB] Systematic generator computation time: 0.0558283s
[t=0.113864s, 55220 KB] Computing PDBs for pattern collection...
[t=50.6073s, 492656 KB] Done computing PDBs for pattern collection: 50.4935s
[t=50.6753s, 492656 KB] Operators: 14496
[t=50.6753s, 492656 KB] Restrictions: 324
[t=50.6753s, 492656 KB] Mean mentions: 89
[t=50.6753s, 492656 KB] Mean operators: 4009
[t=50.6753s, 492656 KB] Building successor generator...done!
[t=50.6793s, 492656 KB] peak memory difference for successor generator creation: 0 KB
[t=50.6793s, 492656 KB] time for successor generation creation: 0.00398774s
[t=50.6793s, 492656 KB] Variables: 20
[t=50.6793s, 492656 KB] FactPairs: 644
[t=50.6793s, 492656 KB] Bytes per state: 16
[t=50.6793s, 492656 KB] Conducting best first search without reopening closed nodes, (real) bound = 2147483647
[t=50.6793s, 492656 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 24
[t=50.6793s, 492656 KB] g=0, 1 evaluated, 0 expanded
[t=50.6793s, 492656 KB] Initial heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 24
[t=50.6793s, 492656 KB] pruning method: none
[t=51.1631s, 492656 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 23
[t=51.1631s, 492656 KB] g=474, 18460 evaluated, 1493 expanded
[t=51.1631s, 492656 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 22
[t=51.1631s, 492656 KB] g=503, 18508 evaluated, 1495 expanded
[t=51.1631s, 492656 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 21
[t=51.1631s, 492656 KB] g=519, 18529 evaluated, 1496 expanded
[t=51.1631s, 492656 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 20
[t=51.1631s, 492656 KB] g=520, 18552 evaluated, 1497 expanded
[t=225.044s, 618936 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 19
[t=225.044s, 618936 KB] g=752, 2198184 evaluated, 547146 expanded
[t=225.072s, 618936 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 18
[t=225.072s, 618936 KB] g=791, 2199233 evaluated, 547226 expanded
[t=225.172s, 619204 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 17
[t=225.172s, 619204 KB] g=1006, 2202835 evaluated, 547494 expanded
[t=225.188s, 619204 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 16
[t=225.188s, 619204 KB] g=1051, 2203597 evaluated, 547544 expanded
[t=225.196s, 619204 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 15
[t=225.196s, 619204 KB] g=1081, 2203817 evaluated, 547555 expanded
[t=225.196s, 619204 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 14
[t=225.196s, 619204 KB] g=1082, 2203843 evaluated, 547556 expanded
[t=402.585s, 755352 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 13
[t=402.585s, 755352 KB] g=1141, 4571668 evaluated, 1101972 expanded
[t=402.585s, 755352 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 12
[t=402.585s, 755352 KB] g=1142, 4571690 evaluated, 1101973 expanded
[t=676.813s, 1005592 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 11
[t=676.813s, 1005592 KB] g=1677, 8809907 evaluated, 1942134 expanded
[t=676.813s, 1005592 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 10
[t=676.813s, 1005592 KB] g=1678, 8809986 evaluated, 1942138 expanded
[t=676.813s, 1005592 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 9
[t=676.813s, 1005592 KB] g=1691, 8810005 evaluated, 1942139 expanded
[t=676.813s, 1005592 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 8
[t=676.813s, 1005592 KB] g=1692, 8810028 evaluated, 1942140 expanded
[t=783.546s, 1094960 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 7
[t=783.546s, 1094960 KB] g=2076, 10867825 evaluated, 2261770 expanded
[t=783.566s, 1094960 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 6
[t=783.566s, 1094960 KB] g=2288, 10868634 evaluated, 2261827 expanded
[t=783.57s, 1094960 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 5
[t=783.57s, 1094960 KB] g=2326, 10868719 evaluated, 2261832 expanded
[t=783.57s, 1094960 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 4
[t=783.57s, 1094960 KB] g=2335, 10868782 evaluated, 2261835 expanded
[t=783.57s, 1094960 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 3
[t=783.57s, 1094960 KB] g=2364, 10868805 evaluated, 2261836 expanded
[t=783.57s, 1094960 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 2
[t=783.57s, 1094960 KB] g=2365, 10868824 evaluated, 2261837 expanded
[t=783.646s, 1095092 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 1
[t=783.646s, 1095092 KB] g=2944, 10871500 evaluated, 2262034 expanded
[t=783.646s, 1095092 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 0
[t=783.646s, 1095092 KB] g=2945, 10871523 evaluated, 2262035 expanded
[t=783.646s, 1095092 KB] Solution found!
[t=783.646s, 1095092 KB] Actual search time: 732.967s
drive truck-4 city-2-loc-5 city-1-loc-12 (128)
drive truck-4 city-1-loc-12 city-1-loc-3 (23)
drive truck-4 city-1-loc-3 city-1-loc-10 (25)
drive truck-4 city-1-loc-10 city-1-loc-9 (32)
pick-up truck-4 city-1-loc-9 package-1 capacity-1 capacity-2 (1)
pick-up truck-4 city-1-loc-9 package-3 capacity-0 capacity-1 (1)
drive truck-4 city-1-loc-9 city-1-loc-10 (32)
drive truck-4 city-1-loc-10 city-1-loc-3 (25)
drive truck-4 city-1-loc-3 city-1-loc-12 (23)
drive truck-4 city-1-loc-12 city-2-loc-5 (128)
drive truck-4 city-2-loc-5 city-2-loc-6 (29)
drive truck-4 city-2-loc-6 city-2-loc-8 (27)
drive truck-4 city-2-loc-8 city-2-loc-1 (28)
drop truck-4 city-2-loc-1 package-3 capacity-0 capacity-1 (1)
drive truck-4 city-2-loc-1 city-2-loc-4 (16)
drop truck-4 city-2-loc-4 package-1 capacity-1 capacity-2 (1)
drive truck-1 city-2-loc-6 city-2-loc-5 (29)
drive truck-1 city-2-loc-5 city-1-loc-12 (128)
drive truck-1 city-1-loc-12 city-1-loc-3 (23)
drive truck-1 city-1-loc-3 city-1-loc-10 (25)
pick-up truck-1 city-1-loc-10 package-10 capacity-3 capacity-4 (1)
pick-up truck-1 city-1-loc-10 package-7 capacity-2 capacity-3 (1)
drive truck-1 city-1-loc-10 city-1-loc-8 (24)
pick-up truck-1 city-1-loc-8 package-11 capacity-1 capacity-2 (1)
drive truck-1 city-1-loc-8 city-1-loc-14 (25)
drive truck-1 city-1-loc-14 city-1-loc-4 (13)
pick-up truck-1 city-1-loc-4 package-2 capacity-0 capacity-1 (1)
drive truck-1 city-1-loc-4 city-1-loc-1 (26)
drive truck-1 city-1-loc-1 city-1-loc-12 (29)
drive truck-1 city-1-loc-12 city-2-loc-5 (128)
drive truck-1 city-2-loc-5 city-2-loc-15 (31)
drop truck-1 city-2-loc-15 package-10 capacity-0 capacity-1 (1)
drive truck-1 city-2-loc-15 city-2-loc-3 (32)
drive truck-1 city-2-loc-3 city-2-loc-8 (12)
drop truck-1 city-2-loc-8 package-2 capacity-1 capacity-2 (1)
drive truck-1 city-2-loc-8 city-2-loc-4 (29)
drop truck-1 city-2-loc-4 package-11 capacity-2 capacity-3 (1)
drive truck-1 city-2-loc-4 city-2-loc-7 (14)
drive truck-1 city-2-loc-7 city-2-loc-14 (24)
drive truck-1 city-2-loc-14 city-2-loc-12 (22)
drop truck-1 city-2-loc-12 package-7 capacity-3 capacity-4 (1)
drive truck-3 city-2-loc-3 city-2-loc-6 (17)
drive truck-3 city-2-loc-6 city-2-loc-5 (29)
drive truck-3 city-2-loc-5 city-1-loc-12 (128)
drive truck-3 city-1-loc-12 city-1-loc-3 (23)
drive truck-3 city-1-loc-3 city-1-loc-10 (25)
drive truck-3 city-1-loc-10 city-1-loc-17 (21)
pick-up truck-3 city-1-loc-17 package-4 capacity-3 capacity-4 (1)
drive truck-3 city-1-loc-17 city-1-loc-16 (31)
pick-up truck-3 city-1-loc-16 package-9 capacity-2 capacity-3 (1)
drive truck-3 city-1-loc-16 city-1-loc-17 (31)
drive truck-3 city-1-loc-17 city-1-loc-10 (21)
drive truck-3 city-1-loc-10 city-1-loc-3 (25)
drive truck-3 city-1-loc-3 city-1-loc-12 (23)
drive truck-3 city-1-loc-12 city-2-loc-5 (128)
drop truck-3 city-2-loc-5 package-9 capacity-2 capacity-3 (1)
drive truck-3 city-2-loc-5 city-2-loc-15 (31)
drive truck-3 city-2-loc-15 city-2-loc-10 (13)
drop truck-3 city-2-loc-10 package-4 capacity-3 capacity-4 (1)
drive truck-3 city-2-loc-10 city-2-loc-17 (27)
drive truck-3 city-2-loc-17 city-2-loc-5 (15)
drive truck-3 city-2-loc-5 city-1-loc-12 (128)
drive truck-3 city-1-loc-12 city-1-loc-3 (23)
drive truck-3 city-1-loc-3 city-1-loc-10 (25)
drive truck-3 city-1-loc-10 city-1-loc-9 (32)
pick-up truck-3 city-1-loc-9 package-5 capacity-3 capacity-4 (1)
drive truck-3 city-1-loc-9 city-1-loc-18 (25)
pick-up truck-3 city-1-loc-18 package-12 capacity-2 capacity-3 (1)
drive truck-3 city-1-loc-18 city-1-loc-9 (25)
drive truck-3 city-1-loc-9 city-1-loc-10 (32)
drive truck-3 city-1-loc-10 city-1-loc-8 (24)
drive truck-3 city-1-loc-8 city-1-loc-14 (25)
pick-up truck-3 city-1-loc-14 package-6 capacity-1 capacity-2 (1)
drive truck-3 city-1-loc-14 city-1-loc-4 (13)
drive truck-3 city-1-loc-4 city-1-loc-1 (26)
drive truck-3 city-1-loc-1 city-1-loc-12 (29)
drive truck-3 city-1-loc-12 city-2-loc-5 (128)
drive truck-3 city-2-loc-5 city-2-loc-17 (15)
drop truck-3 city-2-loc-17 package-12 capacity-1 capacity-2 (1)
drive truck-3 city-2-loc-17 city-2-loc-6 (19)
drive truck-3 city-2-loc-6 city-2-loc-8 (27)
drop truck-3 city-2-loc-8 package-6 capacity-2 capacity-3 (1)
drive truck-3 city-2-loc-8 city-2-loc-7 (29)
drop truck-3 city-2-loc-7 package-5 capacity-3 capacity-4 (1)
drive truck-3 city-2-loc-7 city-2-loc-3 (31)
drive truck-3 city-2-loc-3 city-2-loc-6 (17)
drive truck-3 city-2-loc-6 city-2-loc-5 (29)
drive truck-3 city-2-loc-5 city-1-loc-12 (128)
drive truck-3 city-1-loc-12 city-1-loc-3 (23)
drive truck-3 city-1-loc-3 city-1-loc-10 (25)
drive truck-3 city-1-loc-10 city-1-loc-9 (32)
drive truck-3 city-1-loc-9 city-1-loc-6 (28)
pick-up truck-3 city-1-loc-6 package-8 capacity-3 capacity-4 (1)
drive truck-3 city-1-loc-6 city-1-loc-9 (28)
drive truck-3 city-1-loc-9 city-1-loc-10 (32)
drive truck-3 city-1-loc-10 city-1-loc-3 (25)
drive truck-3 city-1-loc-3 city-1-loc-12 (23)
drive truck-3 city-1-loc-12 city-2-loc-5 (128)
drive truck-3 city-2-loc-5 city-2-loc-6 (29)
drop truck-3 city-2-loc-6 package-8 capacity-3 capacity-4 (1)
[t=783.646s, 1095092 KB] Plan length: 100 step(s).
[t=783.646s, 1095092 KB] Plan cost: 2945
[t=783.646s, 1095092 KB] Expanded 2262036 state(s).
[t=783.646s, 1095092 KB] Reopened 0 state(s).
[t=783.646s, 1095092 KB] Evaluated 10871532 state(s).
[t=783.646s, 1095092 KB] Evaluations: 13133567
[t=783.646s, 1095092 KB] Generated 47739083 state(s).
[t=783.646s, 1095092 KB] Dead ends: 0 state(s).
[t=783.646s, 1095092 KB] Number of registered states: 10871532
[t=783.646s, 1095092 KB] Int hash set load factor: 10871532/16777216 = 0.647994
[t=783.646s, 1095092 KB] Int hash set resizes: 24
[t=783.646s, 1095092 KB] Search time: 732.967s
[t=783.646s, 1095092 KB] Total time: 783.646s
Solution found.
Peak memory: 1095092 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Running validate.
INFO     validate stdin: None
INFO     validate time limit: None
INFO     validate memory limit: None
INFO     validate command line string: validate domain.pddl problem.pddl sas_plan
Checking plan: sas_plan
Plan executed successfully - checking goal
Plan valid
Final value: 2945 

Successful plans:
Value: 2945
 sas_plan 2945 

validate exit code: 0

