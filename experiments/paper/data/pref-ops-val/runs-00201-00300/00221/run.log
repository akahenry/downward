INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: 1799.99s
INFO     translator memory limit: 4096 MB
INFO     translator command line string: /usr/bin/python3 /home/dmdoebber/downward-projects/downward/experiments/paper/data/pref-ops-val/code-11d6cc7f374e3fd7216f4422aa97b8db8c68d3c3_e5e41175/builds/release/bin/translate/translate.py domain.pddl problem.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.003s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.001s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.001s wall-clock]
Generated 26 rules.
Computing model... [0.180s CPU, 0.185s wall-clock]
22404 relevant atoms
17064 auxiliary atoms
39468 final queue length
80224 total queue pushes
Completing instantiation... [0.660s CPU, 0.665s wall-clock]
Instantiating: [0.850s CPU, 0.858s wall-clock]
Computing fact groups...
Finding invariants...
9 initial candidates
Finding invariants: [0.010s CPU, 0.008s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.002s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
0 uncovered facts
Choosing groups: [0.000s CPU, 0.001s wall-clock]
Building translation key... [0.000s CPU, 0.001s wall-clock]
Computing fact groups: [0.020s CPU, 0.015s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.030s CPU, 0.029s wall-clock]
Translating task: [0.540s CPU, 0.533s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
24 propositions removed
Detecting unreachable propositions: [0.320s CPU, 0.317s wall-clock]
Reordering and filtering variables...
24 of 24 variables necessary.
0 of 24 mutex groups necessary.
21136 of 21136 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.070s CPU, 0.069s wall-clock]
Translator variables: 24
Translator derived variables: 0
Translator facts: 884
Translator goal facts: 16
Translator mutex groups: 0
Translator total mutex groups size: 0
Translator operators: 21136
Translator axioms: 0
Translator task size: 125772
Translator peak memory: 113512 KB
Writing output... [0.080s CPU, 0.082s wall-clock]
Done! [1.910s CPU, 1.909s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: 1798.05s
INFO     search memory limit: 4096 MB
INFO     search command line string: /home/dmdoebber/downward-projects/downward/experiments/paper/data/pref-ops-val/code-11d6cc7f374e3fd7216f4422aa97b8db8c68d3c3_e5e41175/builds/release/bin/downward --evaluator 'eval=ff()' --search 'eager_greedy([lsh(patterns=systematic(4), op_order=default, res_order=default, transform=adapt_costs(cost_type=ONE))],  preferred=[eval])' --internal-plan-file sas_plan < output.sas
[t=0s, 46116 KB] reading input...
[t=0.0599557s, 52448 KB] done reading input!
[t=0.0639596s, 54716 KB] Simplifying 41616 unary operators... done! [41616 unary operators]
[t=0.083946s, 58620 KB] time to simplify: 0.0199864s
[t=0.083946s, 58620 KB] Initializing additive heuristic...
[t=0.083946s, 58620 KB] Initializing FF heuristic...
[t=0.083946s, 58620 KB] stop search of patterns: 3355443KB
[t=0.083946s, 58620 KB] Generating patterns using the systematic generator...
[t=0.083946s, 58620 KB] building causal graph...done! [t=0.00400391s]
[t=0.0999426s, 58620 KB] Found 6848 SGA patterns.
[t=0.187425s, 58620 KB] Found 10288 interesting patterns.
[t=0.187425s, 58620 KB] [16, 128, 1408, 8736]
[t=0.187425s, 58620 KB] Systematic generator number of patterns: 432
[t=0.187425s, 58620 KB] Systematic generator total PDB size: 212977204
[t=0.187425s, 58620 KB] Systematic generator computation time: 0.103479s
[t=0.187425s, 58620 KB] Computing PDBs for pattern collection...
[t=109.881s, 928012 KB] Done computing PDBs for pattern collection: 109.693s
[t=110.009s, 928012 KB] Operators: 21136
[t=110.009s, 928012 KB] Restrictions: 432
[t=110.009s, 928012 KB] Mean mentions: 104
[t=110.009s, 928012 KB] Mean operators: 5099
[t=110.009s, 928012 KB] Building successor generator...done!
[t=110.017s, 928012 KB] peak memory difference for successor generator creation: 0 KB
[t=110.017s, 928012 KB] time for successor generation creation: 0.00799063s
[t=110.017s, 928012 KB] Variables: 24
[t=110.017s, 928012 KB] FactPairs: 884
[t=110.017s, 928012 KB] Bytes per state: 20
[t=110.017s, 928012 KB] Conducting best first search without reopening closed nodes, (real) bound = 2147483647
[t=110.017s, 928012 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 32
[t=110.017s, 928012 KB] g=0, 1 evaluated, 0 expanded
[t=110.017s, 928012 KB] Initial heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 32
[t=110.017s, 928012 KB] pruning method: none
[t=110.021s, 928012 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 31
[t=110.021s, 928012 KB] g=21, 53 evaluated, 4 expanded
[t=110.021s, 928012 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 30
[t=110.021s, 928012 KB] g=22, 70 evaluated, 5 expanded
[t=836.829s, 1178472 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 29
[t=836.829s, 1178472 KB] g=99, 4139140 evaluated, 1037214 expanded
[t=836.833s, 1178472 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 28
[t=836.833s, 1178472 KB] g=114, 4139227 evaluated, 1037219 expanded
[t=836.845s, 1178472 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 27
[t=836.845s, 1178472 KB] g=147, 4139505 evaluated, 1037236 expanded
[t=836.845s, 1178472 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 26
[t=836.845s, 1178472 KB] g=163, 4139567 evaluated, 1037239 expanded
[t=836.857s, 1178472 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 25
[t=836.857s, 1178472 KB] g=197, 4139848 evaluated, 1037256 expanded
[t=836.861s, 1178472 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 24
[t=836.861s, 1178472 KB] g=198, 4139869 evaluated, 1037257 expanded
[t=836.929s, 1178608 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 23
[t=836.929s, 1178608 KB] g=250, 4141118 evaluated, 1037358 expanded
[t=836.933s, 1178608 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 22
[t=836.933s, 1178608 KB] g=251, 4141139 evaluated, 1037359 expanded
[t=836.937s, 1178608 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 21
[t=836.937s, 1178608 KB] g=263, 4141236 evaluated, 1037365 expanded
[t=836.937s, 1178608 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 20
[t=836.937s, 1178608 KB] g=264, 4141263 evaluated, 1037366 expanded
[t=837.085s, 1178740 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 19
[t=837.085s, 1178740 KB] g=363, 4144057 evaluated, 1037578 expanded
[t=837.185s, 1178872 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 18
[t=837.185s, 1178872 KB] g=426, 4145530 evaluated, 1037716 expanded
[t=837.205s, 1178872 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 17
[t=837.205s, 1178872 KB] g=458, 4145943 evaluated, 1037744 expanded
[t=837.209s, 1178872 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 16
[t=837.209s, 1178872 KB] g=475, 4146069 evaluated, 1037751 expanded
[t=837.237s, 1178872 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 15
[t=837.237s, 1178872 KB] g=509, 4146603 evaluated, 1037790 expanded
[t=837.245s, 1178872 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 14
[t=837.245s, 1178872 KB] g=558, 4146845 evaluated, 1037805 expanded
[t=837.249s, 1178872 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 13
[t=837.249s, 1178872 KB] g=571, 4146899 evaluated, 1037808 expanded
[t=837.249s, 1178872 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 12
[t=837.249s, 1178872 KB] g=592, 4146918 evaluated, 1037809 expanded
[t=837.249s, 1178872 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 11
[t=837.249s, 1178872 KB] g=593, 4146938 evaluated, 1037810 expanded
[t=837.249s, 1178872 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 10
[t=837.249s, 1178872 KB] g=594, 4146958 evaluated, 1037811 expanded
[t=1117.89s, 1283368 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 9
[t=1117.89s, 1283368 KB] g=751, 6352252 evaluated, 1446912 expanded
[t=1117.89s, 1283368 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 8
[t=1117.89s, 1283368 KB] g=752, 6352275 evaluated, 1446913 expanded
[t=1117.89s, 1283368 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 7
[t=1117.89s, 1283368 KB] g=772, 6352297 evaluated, 1446914 expanded
[t=1117.89s, 1283368 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 6
[t=1117.89s, 1283368 KB] g=773, 6352319 evaluated, 1446915 expanded
[t=1448.25s, 1479360 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 5
[t=1448.25s, 1479360 KB] g=888, 9109388 evaluated, 1918800 expanded
[t=1448.25s, 1479360 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 4
[t=1448.25s, 1479360 KB] g=889, 9109409 evaluated, 1918801 expanded
[t=1448.83s, 1479756 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 3
[t=1448.83s, 1479756 KB] g=1034, 9118661 evaluated, 1919585 expanded
[t=1448.83s, 1479756 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 2
[t=1448.83s, 1479756 KB] g=1035, 9118683 evaluated, 1919586 expanded
[t=1448.86s, 1479888 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 1
[t=1448.86s, 1479888 KB] g=1171, 9119374 evaluated, 1919633 expanded
[t=1448.86s, 1479888 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 0
[t=1448.86s, 1479888 KB] g=1172, 9119393 evaluated, 1919634 expanded
[t=1448.86s, 1479888 KB] Solution found!
[t=1448.86s, 1479888 KB] Actual search time: 1338.85s
pick-up truck-4 city-loc-27 package-5 capacity-1 capacity-2 (1)
drive truck-4 city-loc-27 city-loc-37 (20)
drop truck-4 city-loc-37 package-5 capacity-1 capacity-2 (1)
drive truck-3 city-loc-18 city-loc-28 (16)
drive truck-3 city-loc-28 city-loc-4 (21)
pick-up truck-3 city-loc-4 package-11 capacity-3 capacity-4 (1)
pick-up truck-3 city-loc-4 package-3 capacity-2 capacity-3 (1)
drive truck-3 city-loc-4 city-loc-28 (21)
drive truck-3 city-loc-28 city-loc-18 (16)
pick-up truck-3 city-loc-18 package-12 capacity-1 capacity-2 (1)
drive truck-3 city-loc-18 city-loc-35 (14)
pick-up truck-3 city-loc-35 package-14 capacity-0 capacity-1 (1)
drive truck-3 city-loc-35 city-loc-15 (17)
drive truck-3 city-loc-15 city-loc-6 (15)
drop truck-3 city-loc-6 package-11 capacity-0 capacity-1 (1)
drive truck-3 city-loc-6 city-loc-15 (15)
pick-up truck-3 city-loc-15 package-9 capacity-0 capacity-1 (1)
drive truck-3 city-loc-15 city-loc-20 (15)
drive truck-3 city-loc-20 city-loc-32 (18)
drop truck-3 city-loc-32 package-12 capacity-0 capacity-1 (1)
pick-up truck-3 city-loc-32 package-6 capacity-0 capacity-1 (1)
drive truck-3 city-loc-32 city-loc-20 (18)
drive truck-3 city-loc-20 city-loc-30 (18)
drive truck-3 city-loc-30 city-loc-36 (15)
drop truck-3 city-loc-36 package-14 capacity-0 capacity-1 (1)
drop truck-3 city-loc-36 package-6 capacity-1 capacity-2 (1)
drive truck-3 city-loc-36 city-loc-33 (11)
pick-up truck-3 city-loc-33 package-16 capacity-1 capacity-2 (1)
pick-up truck-3 city-loc-33 package-4 capacity-0 capacity-1 (1)
drive truck-3 city-loc-33 city-loc-30 (18)
drive truck-3 city-loc-30 city-loc-20 (18)
drive truck-3 city-loc-20 city-loc-6 (22)
drive truck-3 city-loc-6 city-loc-19 (21)
drive truck-3 city-loc-19 city-loc-16 (19)
drop truck-3 city-loc-16 package-3 capacity-0 capacity-1 (1)
drive truck-3 city-loc-16 city-loc-19 (19)
drive truck-3 city-loc-19 city-loc-6 (21)
drive truck-3 city-loc-6 city-loc-20 (22)
pick-up truck-3 city-loc-20 package-7 capacity-0 capacity-1 (1)
drive truck-3 city-loc-20 city-loc-30 (18)
drive truck-3 city-loc-30 city-loc-22 (13)
drop truck-3 city-loc-22 package-7 capacity-0 capacity-1 (1)
drive truck-3 city-loc-22 city-loc-38 (16)
pick-up truck-3 city-loc-38 package-13 capacity-0 capacity-1 (1)
drive truck-3 city-loc-38 city-loc-40 (19)
drive truck-3 city-loc-40 city-loc-35 (14)
drop truck-3 city-loc-35 package-13 capacity-0 capacity-1 (1)
drive truck-3 city-loc-35 city-loc-18 (14)
drive truck-3 city-loc-18 city-loc-5 (18)
drive truck-3 city-loc-5 city-loc-3 (17)
drive truck-3 city-loc-3 city-loc-31 (12)
drop truck-3 city-loc-31 package-16 capacity-1 capacity-2 (1)
drive truck-3 city-loc-31 city-loc-4 (21)
drop truck-3 city-loc-4 package-4 capacity-2 capacity-3 (1)
drop truck-3 city-loc-4 package-9 capacity-3 capacity-4 (1)
drive truck-2 city-loc-21 city-loc-26 (19)
drive truck-2 city-loc-26 city-loc-6 (20)
drive truck-2 city-loc-6 city-loc-20 (22)
drive truck-2 city-loc-20 city-loc-30 (18)
drive truck-2 city-loc-30 city-loc-33 (18)
pick-up truck-2 city-loc-33 package-2 capacity-2 capacity-3 (1)
pick-up truck-2 city-loc-33 package-8 capacity-1 capacity-2 (1)
drive truck-2 city-loc-33 city-loc-30 (18)
drive truck-2 city-loc-30 city-loc-20 (18)
drive truck-2 city-loc-20 city-loc-6 (22)
drop truck-2 city-loc-6 package-2 capacity-1 capacity-2 (1)
drive truck-2 city-loc-6 city-loc-26 (20)
drop truck-2 city-loc-26 package-8 capacity-2 capacity-3 (1)
drive truck-2 city-loc-26 city-loc-14 (12)
drive truck-2 city-loc-14 city-loc-19 (13)
drive truck-2 city-loc-19 city-loc-11 (20)
drive truck-2 city-loc-11 city-loc-34 (15)
pick-up truck-2 city-loc-34 package-1 capacity-2 capacity-3 (1)
drive truck-2 city-loc-34 city-loc-32 (15)
drive truck-2 city-loc-32 city-loc-20 (18)
drive truck-2 city-loc-20 city-loc-35 (21)
drop truck-2 city-loc-35 package-1 capacity-2 capacity-3 (1)
drive truck-2 city-loc-35 city-loc-40 (14)
drive truck-2 city-loc-40 city-loc-22 (12)
drive truck-2 city-loc-22 city-loc-33 (19)
drive truck-2 city-loc-33 city-loc-12 (12)
pick-up truck-2 city-loc-12 package-10 capacity-2 capacity-3 (1)
drive truck-2 city-loc-12 city-loc-33 (12)
drive truck-2 city-loc-33 city-loc-22 (19)
drive truck-2 city-loc-22 city-loc-40 (12)
drive truck-2 city-loc-40 city-loc-35 (14)
drive truck-2 city-loc-35 city-loc-18 (14)
drive truck-2 city-loc-18 city-loc-28 (16)
drop truck-2 city-loc-28 package-10 capacity-2 capacity-3 (1)
drive truck-2 city-loc-28 city-loc-3 (12)
drive truck-2 city-loc-3 city-loc-31 (12)
pick-up truck-2 city-loc-31 package-15 capacity-2 capacity-3 (1)
drive truck-2 city-loc-31 city-loc-3 (12)
drive truck-2 city-loc-3 city-loc-28 (12)
drive truck-2 city-loc-28 city-loc-18 (16)
drive truck-2 city-loc-18 city-loc-35 (14)
drive truck-2 city-loc-35 city-loc-40 (14)
drive truck-2 city-loc-40 city-loc-22 (12)
drive truck-2 city-loc-22 city-loc-33 (19)
drive truck-2 city-loc-33 city-loc-12 (12)
drop truck-2 city-loc-12 package-15 capacity-2 capacity-3 (1)
[t=1448.86s, 1479888 KB] Plan length: 101 step(s).
[t=1448.86s, 1479888 KB] Plan cost: 1172
[t=1448.86s, 1479888 KB] Expanded 1919635 state(s).
[t=1448.86s, 1479888 KB] Reopened 0 state(s).
[t=1448.86s, 1479888 KB] Evaluated 9119398 state(s).
[t=1448.86s, 1479888 KB] Evaluations: 11039032
[t=1448.86s, 1479888 KB] Generated 35400078 state(s).
[t=1448.86s, 1479888 KB] Dead ends: 0 state(s).
[t=1448.86s, 1479888 KB] Number of registered states: 9119398
[t=1448.86s, 1479888 KB] Int hash set load factor: 9119398/16777216 = 0.543558
[t=1448.86s, 1479888 KB] Int hash set resizes: 24
[t=1448.86s, 1479888 KB] Search time: 1338.85s
[t=1448.86s, 1479888 KB] Total time: 1448.86s
Solution found.
Peak memory: 1479888 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Running validate.
INFO     validate stdin: None
INFO     validate time limit: None
INFO     validate memory limit: None
INFO     validate command line string: validate domain.pddl problem.pddl sas_plan
Checking plan: sas_plan
Plan executed successfully - checking goal
Plan valid
Final value: 1172 

Successful plans:
Value: 1172
 sas_plan 1172 

validate exit code: 0

