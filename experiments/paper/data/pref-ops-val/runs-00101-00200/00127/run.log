INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: 1799.98s
INFO     translator memory limit: 4096 MB
INFO     translator command line string: /usr/bin/python3 /home/dmdoebber/downward-projects/downward/experiments/paper/data/pref-ops-val/code-11d6cc7f374e3fd7216f4422aa97b8db8c68d3c3_e5e41175/builds/release/bin/translate/translate.py domain.pddl problem.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.002s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.010s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.001s wall-clock]
Generated 32 rules.
Computing model... [0.230s CPU, 0.239s wall-clock]
42827 relevant atoms
4396 auxiliary atoms
47223 final queue length
138834 total queue pushes
Completing instantiation... [1.350s CPU, 1.360s wall-clock]
Instantiating: [1.620s CPU, 1.606s wall-clock]
Computing fact groups...
Finding invariants...
12 initial candidates
Finding invariants: [0.000s CPU, 0.004s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.003s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
66 uncovered facts
Choosing groups: [0.010s CPU, 0.002s wall-clock]
Building translation key... [0.000s CPU, 0.001s wall-clock]
Computing fact groups: [0.010s CPU, 0.014s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.001s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.001s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.060s CPU, 0.056s wall-clock]
Translating task: [1.580s CPU, 1.580s wall-clock]
49010 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
26 propositions removed
Detecting unreachable propositions: [0.830s CPU, 0.822s wall-clock]
Reordering and filtering variables...
92 of 92 variables necessary.
40 of 66 mutex groups necessary.
39546 of 39546 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.230s CPU, 0.238s wall-clock]
Translator variables: 92
Translator derived variables: 0
Translator facts: 1172
Translator goal facts: 26
Translator mutex groups: 40
Translator total mutex groups size: 1080
Translator operators: 39546
Translator axioms: 0
Translator task size: 322456
Translator peak memory: 220696 KB
Writing output... [0.230s CPU, 0.230s wall-clock]
Done! [4.570s CPU, 4.562s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: 1795.37s
INFO     search memory limit: 4096 MB
INFO     search command line string: /home/dmdoebber/downward-projects/downward/experiments/paper/data/pref-ops-val/code-11d6cc7f374e3fd7216f4422aa97b8db8c68d3c3_e5e41175/builds/release/bin/downward --evaluator 'eval=ff()' --search 'eager_greedy([lsh(patterns=systematic(4), op_order=default, res_order=default, transform=adapt_costs(cost_type=ONE))],  preferred=[eval])' --internal-plan-file sas_plan < output.sas
[t=0s, 46116 KB] reading input...
[t=0.139547s, 61168 KB] done reading input!
[t=0.151551s, 68336 KB] Simplifying 137202 unary operators... done! [137202 unary operators]
[t=0.339486s, 81268 KB] time to simplify: 0.191924s
[t=0.347473s, 81268 KB] Initializing additive heuristic...
[t=0.347473s, 81268 KB] Initializing FF heuristic...
[t=0.347473s, 81268 KB] stop search of patterns: 3355443KB
[t=0.347473s, 81268 KB] Generating patterns using the systematic generator...
[t=0.347473s, 81268 KB] building causal graph...done! [t=0.0199895s]
[t=4.71054s, 567592 KB] Found 1972347 SGA patterns.
[t=35.3224s, 679564 KB] Found 2137447 interesting patterns.
[t=35.7701s, 679564 KB] [26, 1716, 77220, 2058485]
[t=37.1413s, 679564 KB] Systematic generator number of patterns: 5226
[t=37.1413s, 679564 KB] Systematic generator total PDB size: 25033040
[t=37.1413s, 679564 KB] Systematic generator computation time: 36.7939s
[t=37.1413s, 679564 KB] Computing PDBs for pattern collection...
[t=114.68s, 679564 KB] Done computing PDBs for pattern collection: 77.5382s
[t=119.925s, 679564 KB] Operators: 39546
[t=119.925s, 679564 KB] Restrictions: 5226
[t=119.925s, 679564 KB] Mean mentions: 572
[t=119.925s, 679564 KB] Mean operators: 4333
[t=119.929s, 679564 KB] Building successor generator...done!
[t=119.941s, 679564 KB] peak memory difference for successor generator creation: 0 KB
[t=119.941s, 679564 KB] time for successor generation creation: 0.0119766s
[t=119.941s, 679564 KB] Variables: 92
[t=119.941s, 679564 KB] FactPairs: 1172
[t=119.941s, 679564 KB] Bytes per state: 28
[t=119.941s, 679564 KB] Conducting best first search without reopening closed nodes, (real) bound = 2147483647
[t=119.941s, 679564 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 53
[t=119.941s, 679564 KB] g=0, 1 evaluated, 0 expanded
[t=119.941s, 679564 KB] Initial heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 53
[t=119.941s, 679564 KB] pruning method: none
[t=119.945s, 679564 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 51
[t=119.945s, 679564 KB] g=1, 2 evaluated, 1 expanded
[t=119.949s, 679564 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 49
[t=119.949s, 679564 KB] g=2, 37 evaluated, 2 expanded
[t=119.989s, 679564 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 47
[t=119.989s, 679564 KB] g=4, 195 evaluated, 9 expanded
[t=119.993s, 679564 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 46
[t=119.993s, 679564 KB] g=5, 216 evaluated, 10 expanded
[t=119.997s, 679564 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 44
[t=119.997s, 679564 KB] g=6, 236 evaluated, 11 expanded
[t=120.005s, 679564 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 42
[t=120.005s, 679564 KB] g=7, 264 evaluated, 12 expanded
[t=120.057s, 679564 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 41
[t=120.057s, 679564 KB] g=9, 499 evaluated, 22 expanded
[t=120.061s, 679564 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 39
[t=120.061s, 679564 KB] g=10, 520 evaluated, 23 expanded
[t=120.097s, 679564 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 37
[t=120.097s, 679564 KB] g=12, 663 evaluated, 29 expanded
[t=120.101s, 679564 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 35
[t=120.101s, 679564 KB] g=13, 682 evaluated, 30 expanded
[t=120.105s, 679564 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 34
[t=120.105s, 679564 KB] g=14, 703 evaluated, 31 expanded
[t=120.121s, 679564 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 33
[t=120.121s, 679564 KB] g=15, 784 evaluated, 34 expanded
[t=120.125s, 679564 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 32
[t=120.125s, 679564 KB] g=16, 803 evaluated, 35 expanded
[t=120.125s, 679564 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 31
[t=120.125s, 679564 KB] g=16, 804 evaluated, 35 expanded
[t=120.129s, 679564 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 29
[t=120.129s, 679564 KB] g=17, 827 evaluated, 36 expanded
[t=120.137s, 679564 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 27
[t=120.137s, 679564 KB] g=18, 853 evaluated, 37 expanded
[t=120.141s, 679564 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 25
[t=120.141s, 679564 KB] g=19, 868 evaluated, 38 expanded
[t=120.145s, 679564 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 23
[t=120.145s, 679564 KB] g=20, 882 evaluated, 39 expanded
[t=120.149s, 679564 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 22
[t=120.149s, 679564 KB] g=21, 915 evaluated, 40 expanded
[t=120.413s, 679564 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 21
[t=120.413s, 679564 KB] g=26, 2212 evaluated, 95 expanded
[t=120.417s, 679564 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 20
[t=120.417s, 679564 KB] g=27, 2229 evaluated, 96 expanded
[t=120.617s, 679564 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 19
[t=120.617s, 679564 KB] g=33, 3178 evaluated, 140 expanded
[t=120.621s, 679564 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 18
[t=120.621s, 679564 KB] g=34, 3193 evaluated, 141 expanded
[t=130.34s, 679564 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 17
[t=130.34s, 679564 KB] g=39, 46107 evaluated, 2352 expanded
[t=130.344s, 679564 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 16
[t=130.344s, 679564 KB] g=40, 46121 evaluated, 2353 expanded
[t=137.536s, 679564 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 15
[t=137.536s, 679564 KB] g=45, 77993 evaluated, 3991 expanded
[t=137.54s, 679564 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 14
[t=137.54s, 679564 KB] g=46, 78013 evaluated, 3992 expanded
[t=142.681s, 679564 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 13
[t=142.681s, 679564 KB] g=51, 101014 evaluated, 5166 expanded
[t=142.685s, 679564 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 12
[t=142.685s, 679564 KB] g=52, 101037 evaluated, 5167 expanded
[t=146s, 679564 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 11
[t=146s, 679564 KB] g=56, 116144 evaluated, 5909 expanded
[t=146.008s, 679564 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 9
[t=146.008s, 679564 KB] g=57, 116186 evaluated, 5911 expanded
[t=146.012s, 679564 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 8
[t=146.012s, 679564 KB] g=58, 116208 evaluated, 5912 expanded
[t=147.579s, 679564 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 7
[t=147.579s, 679564 KB] g=66, 123666 evaluated, 6260 expanded
[t=147.587s, 679564 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 6
[t=147.587s, 679564 KB] g=68, 123705 evaluated, 6262 expanded
[t=148.095s, 679564 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 5
[t=148.095s, 679564 KB] g=72, 126111 evaluated, 6378 expanded
[t=148.103s, 679564 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 4
[t=148.103s, 679564 KB] g=74, 126150 evaluated, 6380 expanded
[t=148.303s, 679564 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 3
[t=148.303s, 679564 KB] g=78, 127135 evaluated, 6427 expanded
[t=148.311s, 679564 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 1
[t=148.311s, 679564 KB] g=79, 127186 evaluated, 6429 expanded
[t=148.315s, 679564 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 0
[t=148.315s, 679564 KB] g=80, 127199 evaluated, 6430 expanded
[t=148.319s, 679564 KB] Solution found!
[t=148.319s, 679564 KB] Actual search time: 28.3775s
move-car-to-curb car_02 car_05 curb_13 (1)
move-car-to-car car_19 car_11 car_05 (1)
move-car-to-car car_10 car_16 car_11 (1)
move-curb-to-car car_16 curb_04 car_02 (1)
move-car-to-curb car_06 car_21 curb_04 (1)
move-car-to-car car_20 car_09 car_06 (1)
move-car-to-car car_23 car_22 car_09 (1)
move-curb-to-car car_21 curb_01 car_22 (1)
move-car-to-curb car_07 car_15 curb_01 (1)
move-car-to-car car_21 car_22 car_07 (1)
move-curb-to-car car_15 curb_03 car_22 (1)
move-car-to-curb car_03 car_13 curb_03 (1)
move-car-to-car car_17 car_18 car_03 (1)
move-car-to-car car_12 car_04 car_13 (1)
move-curb-to-car car_18 curb_07 car_04 (1)
move-car-to-curb car_10 car_11 curb_07 (1)
move-car-to-car car_24 car_25 car_10 (1)
move-curb-to-car car_25 curb_08 car_11 (1)
move-car-to-curb car_08 car_01 curb_08 (1)
move-car-to-car car_15 car_22 car_01 (1)
move-curb-to-car car_22 curb_09 car_08 (1)
move-car-to-curb car_18 car_04 curb_09 (1)
move-curb-to-car car_04 curb_12 car_18 (1)
move-car-to-curb car_12 car_13 curb_12 (1)
move-curb-to-car car_13 curb_00 car_12 (1)
move-car-to-curb car_04 car_18 curb_00 (1)
move-curb-to-car car_18 curb_09 car_04 (1)
move-car-to-curb car_16 car_02 curb_09 (1)
move-curb-to-car car_02 curb_13 car_16 (1)
move-car-to-curb car_13 car_12 curb_13 (1)
move-car-to-car car_02 car_16 car_12 (1)
move-curb-to-car car_16 curb_09 car_13 (1)
move-car-to-curb car_15 car_01 curb_09 (1)
move-curb-to-car car_01 curb_02 car_15 (1)
move-car-to-curb car_02 car_12 curb_02 (1)
move-car-to-car car_16 car_13 car_02 (1)
move-car-to-car car_01 car_15 car_12 (1)
move-curb-to-car car_15 curb_09 car_13 (1)
move-car-to-curb car_21 car_07 curb_09 (1)
move-curb-to-car car_07 curb_01 car_21 (1)
move-car-to-curb car_01 car_12 curb_01 (1)
move-car-to-car car_15 car_13 car_01 (1)
move-car-to-car car_07 car_21 car_12 (1)
move-curb-to-car car_21 curb_09 car_13 (1)
move-car-to-curb car_24 car_10 curb_09 (1)
move-curb-to-car car_10 curb_07 car_24 (1)
move-car-to-curb car_07 car_12 curb_07 (1)
move-car-to-car car_21 car_13 car_07 (1)
move-car-to-car car_10 car_24 car_12 (1)
move-curb-to-car car_24 curb_09 car_13 (1)
move-car-to-curb car_23 car_09 curb_09 (1)
move-curb-to-car car_09 curb_10 car_23 (1)
move-car-to-curb car_10 car_12 curb_10 (1)
move-car-to-car car_24 car_13 car_10 (1)
move-car-to-car car_09 car_23 car_12 (1)
move-curb-to-car car_23 curb_09 car_13 (1)
move-car-to-curb car_09 car_12 curb_09 (1)
move-car-to-car car_23 car_13 car_09 (1)
move-car-to-car car_18 car_04 car_13 (1)
move-curb-to-car car_04 curb_00 car_12 (1)
move-car-to-curb car_20 car_06 curb_00 (1)
move-curb-to-car car_06 curb_04 car_20 (1)
move-car-to-curb car_04 car_12 curb_04 (1)
move-car-to-car car_18 car_13 car_04 (1)
move-car-to-car car_06 car_20 car_13 (1)
move-curb-to-car car_20 curb_00 car_12 (1)
move-car-to-curb car_25 car_11 curb_00 (1)
move-curb-to-car car_11 curb_06 car_25 (1)
move-car-to-curb car_06 car_13 curb_06 (1)
move-car-to-car car_20 car_12 car_06 (1)
move-car-to-car car_11 car_25 car_13 (1)
move-curb-to-car car_25 curb_00 car_12 (1)
move-car-to-curb car_14 car_00 curb_00 (1)
move-curb-to-car car_00 curb_11 car_14 (1)
move-car-to-curb car_11 car_13 curb_11 (1)
move-car-to-car car_25 car_12 car_11 (1)
move-car-to-car car_00 car_14 car_12 (1)
move-curb-to-car car_14 curb_00 car_13 (1)
move-car-to-curb car_00 car_12 curb_00 (1)
move-car-to-car car_14 car_13 car_00 (1)
[t=148.319s, 679564 KB] Plan length: 80 step(s).
[t=148.319s, 679564 KB] Plan cost: 80
[t=148.319s, 679564 KB] Expanded 6431 state(s).
[t=148.319s, 679564 KB] Reopened 0 state(s).
[t=148.319s, 679564 KB] Evaluated 127224 state(s).
[t=148.319s, 679564 KB] Evaluations: 133654
[t=148.319s, 679564 KB] Generated 166435 state(s).
[t=148.319s, 679564 KB] Dead ends: 11046 state(s).
[t=148.319s, 679564 KB] Number of registered states: 127224
[t=148.319s, 679564 KB] Int hash set load factor: 127224/262144 = 0.485321
[t=148.319s, 679564 KB] Int hash set resizes: 18
[t=148.319s, 679564 KB] Search time: 28.3775s
[t=148.319s, 679564 KB] Total time: 148.319s
Solution found.
Peak memory: 679564 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Running validate.
INFO     validate stdin: None
INFO     validate time limit: None
INFO     validate memory limit: None
INFO     validate command line string: validate domain.pddl problem.pddl sas_plan
Checking plan: sas_plan
Plan executed successfully - checking goal
Plan valid
Final value: 80 

Successful plans:
Value: 80
 sas_plan 80 

validate exit code: 0

