INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: 1799.98s
INFO     translator memory limit: 4096 MB
INFO     translator command line string: /usr/bin/python3 /home/dmdoebber/downward-projects/downward/experiments/paper/data/pref-ops-val/code-11d6cc7f374e3fd7216f4422aa97b8db8c68d3c3_e5e41175/builds/release/bin/translate/translate.py domain.pddl problem.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.002s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.002s wall-clock]
Preparing model... [0.000s CPU, 0.001s wall-clock]
Generated 51 rules.
Computing model... [0.070s CPU, 0.071s wall-clock]
11327 relevant atoms
5152 auxiliary atoms
16479 final queue length
39607 total queue pushes
Completing instantiation... [0.240s CPU, 0.243s wall-clock]
Instantiating: [0.310s CPU, 0.318s wall-clock]
Computing fact groups...
Finding invariants...
5 initial candidates
Finding invariants: [0.020s CPU, 0.011s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
14 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.020s CPU, 0.012s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.010s CPU, 0.012s wall-clock]
Translating task: [0.230s CPU, 0.233s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
14 propositions removed
Detecting unreachable propositions: [0.120s CPU, 0.126s wall-clock]
Reordering and filtering variables...
28 of 28 variables necessary.
14 of 28 mutex groups necessary.
10192 of 10192 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.030s CPU, 0.027s wall-clock]
Translator variables: 28
Translator derived variables: 0
Translator facts: 224
Translator goal facts: 28
Translator mutex groups: 14
Translator total mutex groups size: 196
Translator operators: 10192
Translator axioms: 0
Translator task size: 52710
Translator peak memory: 68072 KB
Writing output... [0.040s CPU, 0.034s wall-clock]
Done! [0.760s CPU, 0.768s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: 1799.19s
INFO     search memory limit: 4096 MB
INFO     search command line string: /home/dmdoebber/downward-projects/downward/experiments/paper/data/pref-ops-val/code-11d6cc7f374e3fd7216f4422aa97b8db8c68d3c3_e5e41175/builds/release/bin/downward --evaluator 'eval=ff()' --search 'eager_greedy([lsh(patterns=systematic(4), op_order=default, res_order=default, transform=adapt_costs(cost_type=ONE))],  preferred=[eval])' --internal-plan-file sas_plan < output.sas
[t=0s, 46116 KB] reading input...
[t=0.0239903s, 49176 KB] done reading input!
[t=0.0279875s, 50460 KB] Simplifying 21658 unary operators... done! [19110 unary operators]
[t=0.031989s, 52228 KB] time to simplify: 0.00400151s
[t=0.031989s, 52228 KB] Initializing additive heuristic...
[t=0.031989s, 52228 KB] Initializing FF heuristic...
[t=0.031989s, 52228 KB] stop search of patterns: 3355443KB
[t=0.031989s, 52228 KB] Generating patterns using the systematic generator...
[t=0.031989s, 52228 KB] building causal graph...done! [t=0.00399584s]
[t=0.0519819s, 52464 KB] Found 8050 SGA patterns.
[t=0.259273s, 54840 KB] Found 22701 interesting patterns.
[t=0.259273s, 54840 KB] [28, 287, 2912, 19474]
[t=0.263276s, 55300 KB] Systematic generator number of patterns: 945
[t=0.263276s, 55300 KB] Systematic generator total PDB size: 1201060
[t=0.263276s, 55300 KB] Systematic generator computation time: 0.231287s
[t=0.263276s, 55300 KB] Computing PDBs for pattern collection...
[t=2.50276s, 56844 KB] Done computing PDBs for pattern collection: 2.23948s
[t=2.64274s, 81572 KB] Operators: 10192
[t=2.64274s, 81572 KB] Restrictions: 945
[t=2.64274s, 81572 KB] Mean mentions: 225
[t=2.64274s, 81572 KB] Mean operators: 2426
[t=2.64274s, 81572 KB] Building successor generator...done!
[t=2.64673s, 81972 KB] peak memory difference for successor generator creation: 400 KB
[t=2.64673s, 81972 KB] time for successor generation creation: 0.0039943s
[t=2.64673s, 81972 KB] Variables: 28
[t=2.64673s, 81972 KB] FactPairs: 224
[t=2.64673s, 81972 KB] Bytes per state: 12
[t=2.64673s, 81972 KB] Conducting best first search without reopening closed nodes, (real) bound = 2147483647
[t=2.64673s, 81972 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 37
[t=2.64673s, 81972 KB] g=0, 1 evaluated, 0 expanded
[t=2.64673s, 81972 KB] Initial heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 37
[t=2.64673s, 81972 KB] pruning method: none
[t=2.64673s, 81972 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 36
[t=2.64673s, 81972 KB] g=1, 4 evaluated, 1 expanded
[t=2.64673s, 81972 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 35
[t=2.64673s, 81972 KB] g=3, 26 evaluated, 1 expanded
[t=2.64673s, 81972 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 34
[t=2.64673s, 81972 KB] g=6, 82 evaluated, 2 expanded
[t=2.64673s, 81972 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 33
[t=2.64673s, 81972 KB] g=6, 88 evaluated, 2 expanded
[t=2.65074s, 81972 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 32
[t=2.65074s, 81972 KB] g=7, 116 evaluated, 3 expanded
[t=2.65074s, 81972 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 31
[t=2.65074s, 81972 KB] g=8, 177 evaluated, 4 expanded
[t=2.65074s, 81972 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 30
[t=2.65074s, 81972 KB] g=11, 264 evaluated, 5 expanded
[t=2.65074s, 81972 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 29
[t=2.65074s, 81972 KB] g=14, 300 evaluated, 6 expanded
[t=2.65473s, 81972 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 28
[t=2.65473s, 81972 KB] g=14, 323 evaluated, 6 expanded
[t=2.65473s, 81972 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 27
[t=2.65473s, 81972 KB] g=17, 354 evaluated, 7 expanded
[t=2.65473s, 81972 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 26
[t=2.65473s, 81972 KB] g=20, 407 evaluated, 8 expanded
[t=2.65473s, 81972 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 25
[t=2.65473s, 81972 KB] g=23, 459 evaluated, 9 expanded
[t=2.65873s, 81972 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 24
[t=2.65873s, 81972 KB] g=24, 510 evaluated, 10 expanded
[t=2.65873s, 81972 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 23
[t=2.65873s, 81972 KB] g=27, 560 evaluated, 11 expanded
[t=2.65873s, 81972 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 22
[t=2.65873s, 81972 KB] g=28, 611 evaluated, 12 expanded
[t=2.65873s, 81972 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 21
[t=2.65873s, 81972 KB] g=27, 708 evaluated, 14 expanded
[t=2.66273s, 81972 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 20
[t=2.66273s, 81972 KB] g=28, 810 evaluated, 16 expanded
[t=2.66273s, 81972 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 19
[t=2.66273s, 81972 KB] g=33, 919 evaluated, 18 expanded
[t=2.66673s, 81972 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 18
[t=2.66673s, 81972 KB] g=32, 959 evaluated, 19 expanded
[t=2.66673s, 81972 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 17
[t=2.66673s, 81972 KB] g=33, 1024 evaluated, 20 expanded
[t=2.66673s, 81972 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 16
[t=2.66673s, 81972 KB] g=34, 1071 evaluated, 21 expanded
[t=2.66673s, 81972 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 15
[t=2.66673s, 81972 KB] g=36, 1126 evaluated, 23 expanded
[t=2.66673s, 81972 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 14
[t=2.66673s, 81972 KB] g=36, 1137 evaluated, 23 expanded
[t=2.67073s, 81972 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 13
[t=2.67073s, 81972 KB] g=42, 1294 evaluated, 26 expanded
[t=2.67073s, 81972 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 12
[t=2.67073s, 81972 KB] g=42, 1320 evaluated, 26 expanded
[t=2.67073s, 81972 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 11
[t=2.67073s, 81972 KB] g=45, 1345 evaluated, 27 expanded
[t=2.67073s, 81972 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 10
[t=2.67073s, 81972 KB] g=45, 1371 evaluated, 27 expanded
[t=2.67473s, 81972 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 9
[t=2.67473s, 81972 KB] g=44, 1391 evaluated, 28 expanded
[t=2.67473s, 81972 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 8
[t=2.67473s, 81972 KB] g=45, 1472 evaluated, 29 expanded
[t=2.67473s, 81972 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 7
[t=2.67473s, 81972 KB] g=46, 1483 evaluated, 30 expanded
[t=2.67473s, 81972 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 6
[t=2.67473s, 81972 KB] g=50, 1621 evaluated, 32 expanded
[t=2.67872s, 81972 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 5
[t=2.67872s, 81972 KB] g=53, 1640 evaluated, 33 expanded
[t=2.67872s, 81972 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 4
[t=2.67872s, 81972 KB] g=54, 1685 evaluated, 34 expanded
[t=2.67872s, 81972 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 3
[t=2.67872s, 81972 KB] g=60, 1780 evaluated, 36 expanded
[t=2.67872s, 81972 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 2
[t=2.67872s, 81972 KB] g=60, 1786 evaluated, 36 expanded
[t=2.68273s, 81972 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 0
[t=2.68273s, 81972 KB] g=64, 1945 evaluated, 39 expanded
[t=2.68273s, 81972 KB] Solution found!
[t=2.68273s, 81972 KB] Actual search time: 0.0359905s
analyze-2 seg-in-4 seg-out-1 car-in-4 car-out-1 (3)
analyze-2 seg-in-4 seg-out-1 car-out-1 car-in-4 (3)
rotate-2 seg-in-1 seg-out-2 car-in-1 car-out-2 (1)
rotate-2 seg-in-2 seg-out-3 car-in-2 car-out-3 (1)
analyze-2 seg-in-1 seg-out-1 car-out-2 car-out-1 (3)
analyze-2 seg-in-2 seg-out-1 car-out-3 car-out-2 (3)
analyze-2 seg-in-5 seg-out-1 car-in-5 car-out-3 (3)
analyze-2 seg-in-6 seg-out-1 car-in-6 car-in-5 (3)
rotate-2 seg-in-6 seg-out-1 car-in-5 car-in-6 (1)
analyze-2 seg-in-7 seg-out-1 car-in-7 car-in-5 (3)
rotate-2 seg-in-7 seg-out-1 car-in-5 car-in-7 (1)
rotate-2 seg-in-1 seg-out-1 car-out-1 car-in-5 (1)
rotate-2 seg-in-1 seg-out-4 car-in-5 car-out-4 (1)
analyze-2 seg-in-1 seg-out-1 car-out-4 car-out-1 (3)
rotate-2 seg-in-1 seg-out-1 car-out-1 car-out-4 (1)
rotate-2 seg-in-5 seg-out-4 car-out-3 car-in-5 (1)
rotate-2 seg-in-1 seg-out-4 car-out-4 car-out-3 (1)
rotate-2 seg-in-2 seg-out-5 car-out-2 car-out-5 (1)
rotate-2 seg-in-1 seg-out-3 car-out-3 car-in-2 (1)
rotate-2 seg-in-1 seg-out-6 car-in-2 car-out-6 (1)
analyze-2 seg-in-2 seg-out-1 car-out-5 car-out-1 (3)
analyze-2 seg-in-1 seg-out-1 car-out-6 car-out-5 (3)
rotate-2 seg-in-2 seg-out-1 car-out-1 car-out-6 (1)
rotate-2 seg-in-2 seg-out-6 car-out-6 car-in-2 (1)
rotate-2 seg-in-1 seg-out-5 car-out-5 car-out-2 (1)
rotate-2 seg-in-1 seg-out-2 car-out-2 car-in-1 (1)
rotate-2 seg-in-1 seg-out-7 car-in-1 car-out-7 (1)
analyze-2 seg-in-1 seg-out-1 car-out-7 car-out-1 (3)
analyze-2 seg-in-2 seg-out-1 car-in-2 car-out-7 (3)
rotate-2 seg-in-2 seg-out-7 car-out-7 car-in-1 (1)
analyze-2 seg-in-2 seg-out-1 car-in-1 car-in-2 (3)
rotate-2 seg-in-1 seg-out-1 car-out-1 car-in-1 (1)
analyze-2 seg-in-3 seg-out-1 car-in-3 car-out-1 (3)
rotate-2 seg-in-3 seg-out-1 car-out-1 car-in-3 (1)
[t=2.68273s, 81972 KB] Plan length: 34 step(s).
[t=2.68273s, 81972 KB] Plan cost: 62
[t=2.68273s, 81972 KB] Expanded 40 state(s).
[t=2.68273s, 81972 KB] Reopened 0 state(s).
[t=2.68273s, 81972 KB] Evaluated 1975 state(s).
[t=2.68273s, 81972 KB] Evaluations: 2014
[t=2.68273s, 81972 KB] Generated 2184 state(s).
[t=2.68273s, 81972 KB] Dead ends: 0 state(s).
[t=2.68273s, 81972 KB] Number of registered states: 1975
[t=2.68273s, 81972 KB] Int hash set load factor: 1975/4096 = 0.482178
[t=2.68273s, 81972 KB] Int hash set resizes: 12
[t=2.68273s, 81972 KB] Search time: 0.0359905s
[t=2.68273s, 81972 KB] Total time: 2.68273s
Solution found.
Peak memory: 81972 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Running validate.
INFO     validate stdin: None
INFO     validate time limit: None
INFO     validate memory limit: None
INFO     validate command line string: validate domain.pddl problem.pddl sas_plan
Checking plan: sas_plan
Plan executed successfully - checking goal
Plan valid
Final value: 62 

Successful plans:
Value: 62
 sas_plan 62 

validate exit code: 0

