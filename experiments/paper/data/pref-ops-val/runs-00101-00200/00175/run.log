INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: 1799.98s
INFO     translator memory limit: 4096 MB
INFO     translator command line string: /usr/bin/python3 /home/dmdoebber/downward-projects/downward/experiments/paper/data/pref-ops-val/code-11d6cc7f374e3fd7216f4422aa97b8db8c68d3c3_e5e41175/builds/release/bin/translate/translate.py domain.pddl problem.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.002s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.003s wall-clock]
Preparing model... [0.010s CPU, 0.001s wall-clock]
Generated 51 rules.
Computing model... [0.100s CPU, 0.110s wall-clock]
17074 relevant atoms
6737 auxiliary atoms
23811 final queue length
57091 total queue pushes
Completing instantiation... [0.420s CPU, 0.417s wall-clock]
Instantiating: [0.540s CPU, 0.534s wall-clock]
Computing fact groups...
Finding invariants...
5 initial candidates
Finding invariants: [0.010s CPU, 0.013s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
16 uncovered facts
Choosing groups: [0.000s CPU, 0.001s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.016s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.020s CPU, 0.020s wall-clock]
Translating task: [0.380s CPU, 0.372s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
16 propositions removed
Detecting unreachable propositions: [0.220s CPU, 0.222s wall-clock]
Reordering and filtering variables...
32 of 32 variables necessary.
16 of 32 mutex groups necessary.
15600 of 15600 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.040s CPU, 0.043s wall-clock]
Translator variables: 32
Translator derived variables: 0
Translator facts: 288
Translator goal facts: 32
Translator mutex groups: 16
Translator total mutex groups size: 256
Translator operators: 15600
Translator axioms: 0
Translator task size: 78848
Translator peak memory: 87476 KB
Writing output... [0.050s CPU, 0.054s wall-clock]
Done! [1.260s CPU, 1.267s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: 1798.66s
INFO     search memory limit: 4096 MB
INFO     search command line string: /home/dmdoebber/downward-projects/downward/experiments/paper/data/pref-ops-val/code-11d6cc7f374e3fd7216f4422aa97b8db8c68d3c3_e5e41175/builds/release/bin/downward --evaluator 'eval=ff()' --search 'eager_greedy([lsh(patterns=systematic(4), op_order=default, res_order=default, transform=adapt_costs(cost_type=ONE))],  preferred=[eval])' --internal-plan-file sas_plan < output.sas
[t=0s, 46116 KB] reading input...
[t=0.0359858s, 50608 KB] done reading input!
[t=0.0399813s, 52284 KB] Simplifying 31440 unary operators... done! [30960 unary operators]
[t=0.047984s, 55192 KB] time to simplify: 0.00800265s
[t=0.047984s, 55192 KB] Initializing additive heuristic...
[t=0.047984s, 55192 KB] Initializing FF heuristic...
[t=0.047984s, 55192 KB] stop search of patterns: 3355443KB
[t=0.047984s, 55192 KB] Generating patterns using the systematic generator...
[t=0.047984s, 55192 KB] building causal graph...done! [t=0.00399392s]
[t=0.0799724s, 56036 KB] Found 13668 SGA patterns.
[t=0.458465s, 60096 KB] Found 38948 interesting patterns.
[t=0.46238s, 60096 KB] [32, 376, 4400, 34140]
[t=0.46638s, 60788 KB] Systematic generator number of patterns: 1224
[t=0.46638s, 60788 KB] Systematic generator total PDB size: 3292064
[t=0.46638s, 60788 KB] Systematic generator computation time: 0.418396s
[t=0.46638s, 60788 KB] Computing PDBs for pattern collection...
[t=5.90526s, 67208 KB] Done computing PDBs for pattern collection: 5.43888s
[t=6.18525s, 109196 KB] Operators: 15600
[t=6.18525s, 109196 KB] Restrictions: 1224
[t=6.18525s, 109196 KB] Mean mentions: 252
[t=6.18525s, 109196 KB] Mean operators: 3215
[t=6.18525s, 109196 KB] Building successor generator...done!
[t=6.18925s, 110280 KB] peak memory difference for successor generator creation: 1084 KB
[t=6.18925s, 110280 KB] time for successor generation creation: 0.00399835s
[t=6.18925s, 110280 KB] Variables: 32
[t=6.18925s, 110280 KB] FactPairs: 288
[t=6.18925s, 110280 KB] Bytes per state: 12
[t=6.18925s, 110280 KB] Conducting best first search without reopening closed nodes, (real) bound = 2147483647
[t=6.18925s, 110280 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 53
[t=6.18925s, 110280 KB] g=0, 1 evaluated, 0 expanded
[t=6.18925s, 110280 KB] Initial heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 53
[t=6.18925s, 110280 KB] pruning method: none
[t=6.18925s, 110280 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 52
[t=6.18925s, 110280 KB] g=1, 4 evaluated, 1 expanded
[t=6.19325s, 110280 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 50
[t=6.19325s, 110280 KB] g=4, 123 evaluated, 2 expanded
[t=6.19325s, 110280 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 49
[t=6.19325s, 110280 KB] g=5, 153 evaluated, 3 expanded
[t=6.19325s, 110280 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 48
[t=6.19325s, 110280 KB] g=7, 188 evaluated, 3 expanded
[t=6.19725s, 110280 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 47
[t=6.19725s, 110280 KB] g=8, 203 evaluated, 4 expanded
[t=6.19725s, 110280 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 46
[t=6.19725s, 110280 KB] g=9, 262 evaluated, 5 expanded
[t=6.20125s, 110280 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 45
[t=6.20125s, 110280 KB] g=12, 380 evaluated, 6 expanded
[t=6.20125s, 110280 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 44
[t=6.20125s, 110280 KB] g=13, 411 evaluated, 7 expanded
[t=6.20125s, 110280 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 43
[t=6.20125s, 110280 KB] g=14, 458 evaluated, 8 expanded
[t=6.20525s, 110280 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 42
[t=6.20525s, 110280 KB] g=16, 478 evaluated, 8 expanded
[t=6.20925s, 110280 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 41
[t=6.20925s, 110280 KB] g=16, 667 evaluated, 11 expanded
[t=6.21725s, 110280 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 40
[t=6.21725s, 110280 KB] g=20, 989 evaluated, 16 expanded
[t=6.21725s, 110280 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 39
[t=6.21725s, 110280 KB] g=21, 1024 evaluated, 17 expanded
[t=6.22125s, 110280 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 38
[t=6.22125s, 110280 KB] g=21, 1045 evaluated, 17 expanded
[t=6.22125s, 110280 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 37
[t=6.22125s, 110280 KB] g=23, 1052 evaluated, 17 expanded
[t=6.22125s, 110280 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 35
[t=6.22125s, 110280 KB] g=24, 1093 evaluated, 18 expanded
[t=6.22525s, 110280 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 34
[t=6.22525s, 110280 KB] g=25, 1174 evaluated, 19 expanded
[t=6.22525s, 110280 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 33
[t=6.22525s, 110280 KB] g=26, 1238 evaluated, 20 expanded
[t=6.23325s, 110280 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 32
[t=6.23325s, 110280 KB] g=30, 1506 evaluated, 24 expanded
[t=6.23325s, 110280 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 31
[t=6.23325s, 110280 KB] g=31, 1536 evaluated, 25 expanded
[t=6.23325s, 110280 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 30
[t=6.23325s, 110280 KB] g=31, 1557 evaluated, 25 expanded
[t=6.23325s, 110280 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 29
[t=6.23325s, 110280 KB] g=33, 1571 evaluated, 25 expanded
[t=6.23325s, 110280 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 27
[t=6.23325s, 110280 KB] g=34, 1604 evaluated, 26 expanded
[t=6.23725s, 110280 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 26
[t=6.23725s, 110280 KB] g=35, 1685 evaluated, 27 expanded
[t=6.23725s, 110280 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 25
[t=6.23725s, 110280 KB] g=36, 1750 evaluated, 28 expanded
[t=6.24525s, 110280 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 24
[t=6.24525s, 110280 KB] g=40, 1959 evaluated, 31 expanded
[t=6.24525s, 110280 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 23
[t=6.24525s, 110280 KB] g=41, 1984 evaluated, 32 expanded
[t=6.24525s, 110280 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 22
[t=6.24525s, 110280 KB] g=41, 2005 evaluated, 32 expanded
[t=6.24525s, 110280 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 21
[t=6.24525s, 110280 KB] g=43, 2026 evaluated, 32 expanded
[t=6.24525s, 110280 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 19
[t=6.24525s, 110280 KB] g=44, 2051 evaluated, 33 expanded
[t=6.24925s, 110280 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 18
[t=6.24925s, 110280 KB] g=45, 2132 evaluated, 34 expanded
[t=6.24925s, 110280 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 16
[t=6.24925s, 110280 KB] g=51, 2237 evaluated, 36 expanded
[t=6.25325s, 110280 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 14
[t=6.25325s, 110280 KB] g=52, 2328 evaluated, 37 expanded
[t=6.25725s, 110280 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 13
[t=6.25725s, 110280 KB] g=59, 2552 evaluated, 40 expanded
[t=6.25725s, 110280 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 12
[t=6.25725s, 110280 KB] g=58, 2561 evaluated, 41 expanded
[t=6.26125s, 110280 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 11
[t=6.26125s, 110280 KB] g=62, 2736 evaluated, 43 expanded
[t=6.26525s, 110280 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 10
[t=6.26525s, 110280 KB] g=65, 2807 evaluated, 44 expanded
[t=6.26525s, 110280 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 9
[t=6.26525s, 110280 KB] g=64, 2815 evaluated, 45 expanded
[t=6.28925s, 110280 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 8
[t=6.28925s, 110280 KB] g=70, 3806 evaluated, 61 expanded
[t=6.28925s, 110280 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 7
[t=6.28925s, 110280 KB] g=72, 3812 evaluated, 61 expanded
[t=6.33724s, 110280 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 6
[t=6.33724s, 110280 KB] g=78, 5984 evaluated, 97 expanded
[t=6.33724s, 110280 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 5
[t=6.33724s, 110280 KB] g=79, 6051 evaluated, 98 expanded
[t=6.34124s, 110280 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 4
[t=6.34124s, 110280 KB] g=82, 6150 evaluated, 99 expanded
[t=6.34124s, 110280 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 2
[t=6.34124s, 110280 KB] g=83, 6159 evaluated, 100 expanded
[t=6.34124s, 110280 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 0
[t=6.34124s, 110280 KB] g=86, 6228 evaluated, 101 expanded
[t=6.34124s, 110280 KB] Solution found!
[t=6.34124s, 110280 KB] Actual search time: 0.151996s
rotate-2 seg-in-1 seg-out-2 car-in-1 car-out-2 (1)
analyze-2 seg-in-1 seg-out-1 car-out-2 car-out-1 (3)
analyze-2 seg-in-1 seg-out-1 car-out-1 car-out-2 (3)
rotate-2 seg-in-1 seg-out-2 car-out-2 car-in-1 (1)
rotate-2 seg-in-1 seg-out-3 car-in-1 car-out-3 (1)
analyze-2 seg-in-1 seg-out-1 car-out-3 car-out-1 (3)
rotate-2 seg-in-4 seg-out-1 car-in-4 car-out-3 (1)
rotate-2 seg-in-1 seg-out-3 car-out-1 car-in-1 (1)
rotate-2 seg-in-4 seg-out-3 car-out-3 car-out-1 (1)
rotate-2 seg-in-5 seg-out-1 car-in-5 car-in-4 (1)
rotate-2 seg-in-1 seg-out-4 car-in-1 car-out-4 (1)
analyze-2 seg-in-1 seg-out-1 car-out-4 car-in-5 (3)
analyze-2 seg-in-1 seg-out-1 car-in-5 car-out-4 (3)
rotate-2 seg-in-1 seg-out-4 car-out-4 car-in-1 (1)
rotate-2 seg-in-5 seg-out-1 car-in-4 car-in-5 (1)
rotate-2 seg-in-6 seg-out-1 car-in-6 car-in-4 (1)
rotate-2 seg-in-1 seg-out-5 car-in-1 car-out-5 (1)
analyze-2 seg-in-1 seg-out-1 car-out-5 car-in-6 (3)
analyze-2 seg-in-1 seg-out-1 car-in-6 car-out-5 (3)
rotate-2 seg-in-1 seg-out-5 car-out-5 car-in-1 (1)
rotate-2 seg-in-6 seg-out-1 car-in-4 car-in-6 (1)
rotate-2 seg-in-7 seg-out-1 car-in-7 car-in-4 (1)
rotate-2 seg-in-1 seg-out-6 car-in-1 car-out-6 (1)
analyze-2 seg-in-1 seg-out-1 car-out-6 car-in-7 (3)
analyze-2 seg-in-1 seg-out-1 car-in-7 car-out-6 (3)
rotate-2 seg-in-1 seg-out-6 car-out-6 car-in-1 (1)
rotate-2 seg-in-7 seg-out-1 car-in-4 car-in-7 (1)
analyze-2 seg-in-1 seg-out-1 car-in-1 car-in-4 (3)
analyze-2 seg-in-1 seg-out-1 car-in-4 car-in-1 (3)
rotate-2 seg-in-4 seg-out-1 car-out-1 car-in-4 (1)
rotate-2 seg-in-1 seg-out-7 car-in-1 car-out-7 (1)
analyze-2 seg-in-1 seg-out-1 car-out-7 car-out-1 (3)
rotate-2 seg-in-1 seg-out-1 car-out-1 car-out-7 (1)
rotate-2 seg-in-1 seg-out-7 car-out-7 car-in-1 (1)
rotate-2 seg-in-1 seg-out-8 car-in-1 car-out-8 (1)
analyze-2 seg-in-1 seg-out-1 car-out-8 car-out-1 (3)
rotate-2 seg-in-1 seg-out-1 car-out-1 car-out-8 (1)
rotate-2 seg-in-2 seg-out-8 car-in-2 car-in-1 (1)
rotate-2 seg-in-1 seg-out-8 car-out-8 car-in-2 (1)
analyze-2 seg-in-1 seg-out-1 car-in-2 car-out-1 (3)
rotate-2 seg-in-2 seg-out-1 car-in-1 car-in-2 (1)
rotate-2 seg-in-1 seg-out-1 car-out-1 car-in-1 (1)
rotate-2 seg-in-3 seg-out-8 car-in-3 car-out-8 (1)
rotate-2 seg-in-1 seg-out-8 car-in-1 car-in-3 (1)
rotate-2 seg-in-8 seg-out-8 car-in-8 car-in-1 (1)
analyze-2 seg-in-1 seg-out-1 car-in-3 car-out-1 (3)
rotate-2 seg-in-1 seg-out-1 car-out-1 car-in-3 (1)
rotate-2 seg-in-1 seg-out-8 car-in-3 car-in-8 (1)
rotate-2 seg-in-3 seg-out-8 car-out-8 car-in-3 (1)
analyze-2 seg-in-1 seg-out-1 car-in-8 car-out-1 (3)
rotate-2 seg-in-8 seg-out-1 car-in-1 car-in-8 (1)
rotate-2 seg-in-1 seg-out-1 car-out-1 car-in-1 (1)
[t=6.34124s, 110280 KB] Plan length: 52 step(s).
[t=6.34124s, 110280 KB] Plan cost: 84
[t=6.34124s, 110280 KB] Expanded 102 state(s).
[t=6.34124s, 110280 KB] Reopened 0 state(s).
[t=6.34124s, 110280 KB] Evaluated 6284 state(s).
[t=6.34124s, 110280 KB] Evaluations: 6385
[t=6.34124s, 110280 KB] Generated 6565 state(s).
[t=6.34124s, 110280 KB] Dead ends: 0 state(s).
[t=6.34124s, 110280 KB] Number of registered states: 6284
[t=6.34124s, 110280 KB] Int hash set load factor: 6284/8192 = 0.76709
[t=6.34124s, 110280 KB] Int hash set resizes: 13
[t=6.34124s, 110280 KB] Search time: 0.151996s
[t=6.34124s, 110280 KB] Total time: 6.34124s
Solution found.
Peak memory: 110280 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Running validate.
INFO     validate stdin: None
INFO     validate time limit: None
INFO     validate memory limit: None
INFO     validate command line string: validate domain.pddl problem.pddl sas_plan
Checking plan: sas_plan
Plan executed successfully - checking goal
Plan valid
Final value: 84 

Successful plans:
Value: 84
 sas_plan 84 

validate exit code: 0

