INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: 1799.98s
INFO     translator memory limit: 4096 MB
INFO     translator command line string: /usr/bin/python3 /home/dmdoebber/downward-projects/downward/experiments/paper/data/pref-ops-val/code-11d6cc7f374e3fd7216f4422aa97b8db8c68d3c3_e5e41175/builds/release/bin/translate/translate.py domain.pddl problem.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.002s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.002s wall-clock]
Preparing model... [0.000s CPU, 0.001s wall-clock]
Generated 51 rules.
Computing model... [0.120s CPU, 0.122s wall-clock]
18873 relevant atoms
6856 auxiliary atoms
25729 final queue length
64385 total queue pushes
Completing instantiation... [0.480s CPU, 0.476s wall-clock]
Instantiating: [0.600s CPU, 0.603s wall-clock]
Computing fact groups...
Finding invariants...
5 initial candidates
Finding invariants: [0.020s CPU, 0.012s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
16 uncovered facts
Choosing groups: [0.000s CPU, 0.001s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.020s CPU, 0.015s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.020s CPU, 0.021s wall-clock]
Translating task: [0.470s CPU, 0.474s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
16 propositions removed
Detecting unreachable propositions: [0.240s CPU, 0.237s wall-clock]
Reordering and filtering variables...
32 of 32 variables necessary.
16 of 32 mutex groups necessary.
17280 of 17280 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.050s CPU, 0.049s wall-clock]
Translator variables: 32
Translator derived variables: 0
Translator facts: 288
Translator goal facts: 32
Translator mutex groups: 16
Translator total mutex groups size: 256
Translator operators: 17280
Translator axioms: 0
Translator task size: 88928
Translator peak memory: 94660 KB
Writing output... [0.060s CPU, 0.066s wall-clock]
Done! [1.470s CPU, 1.471s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: 1798.49s
INFO     search memory limit: 4096 MB
INFO     search command line string: /home/dmdoebber/downward-projects/downward/experiments/paper/data/pref-ops-val/code-11d6cc7f374e3fd7216f4422aa97b8db8c68d3c3_e5e41175/builds/release/bin/downward --evaluator 'eval=ff()' --search 'eager_greedy([lsh(patterns=systematic(4), op_order=default, res_order=default, transform=adapt_costs(cost_type=ONE))],  preferred=[eval])' --internal-plan-file sas_plan < output.sas
[t=0s, 46116 KB] reading input...
[t=0.0426128s, 51164 KB] done reading input!
[t=0.0466133s, 53340 KB] Simplifying 36480 unary operators... done! [32640 unary operators]
[t=0.0586127s, 56420 KB] time to simplify: 0.0119993s
[t=0.0586127s, 56420 KB] Initializing additive heuristic...
[t=0.0586127s, 56420 KB] Initializing FF heuristic...
[t=0.0586127s, 56420 KB] stop search of patterns: 3355443KB
[t=0.0586127s, 56420 KB] Generating patterns using the systematic generator...
[t=0.0586127s, 56420 KB] building causal graph...done! [t=0.0040004s]
[t=0.0906117s, 56992 KB] Found 13668 SGA patterns.
[t=0.469479s, 61032 KB] Found 38948 interesting patterns.
[t=0.469479s, 61032 KB] [32, 376, 4400, 34140]
[t=0.477445s, 61724 KB] Systematic generator number of patterns: 1224
[t=0.477445s, 61724 KB] Systematic generator total PDB size: 3292064
[t=0.477445s, 61724 KB] Systematic generator computation time: 0.418832s
[t=0.477445s, 61724 KB] Computing PDBs for pattern collection...
[t=6.85704s, 68092 KB] Done computing PDBs for pattern collection: 6.3796s
[t=7.18502s, 125740 KB] Operators: 17280
[t=7.18502s, 125740 KB] Restrictions: 1224
[t=7.18502s, 125740 KB] Mean mentions: 259
[t=7.18502s, 125740 KB] Mean operators: 3669
[t=7.18502s, 125740 KB] Building successor generator...done!
[t=7.18902s, 126820 KB] peak memory difference for successor generator creation: 1080 KB
[t=7.18902s, 126820 KB] time for successor generation creation: 0.00399938s
[t=7.18902s, 126820 KB] Variables: 32
[t=7.18902s, 126820 KB] FactPairs: 288
[t=7.18902s, 126820 KB] Bytes per state: 12
[t=7.18902s, 126820 KB] Conducting best first search without reopening closed nodes, (real) bound = 2147483647
[t=7.18902s, 126820 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 43
[t=7.18902s, 126820 KB] g=0, 1 evaluated, 0 expanded
[t=7.18902s, 126820 KB] Initial heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 43
[t=7.18902s, 126820 KB] pruning method: none
[t=7.18902s, 126820 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 42
[t=7.18902s, 126820 KB] g=1, 4 evaluated, 1 expanded
[t=7.18902s, 126820 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 41
[t=7.18902s, 126820 KB] g=3, 29 evaluated, 1 expanded
[t=7.19302s, 126820 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 40
[t=7.19302s, 126820 KB] g=6, 101 evaluated, 2 expanded
[t=7.19302s, 126820 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 39
[t=7.19302s, 126820 KB] g=6, 109 evaluated, 2 expanded
[t=7.19302s, 126820 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 38
[t=7.19302s, 126820 KB] g=7, 148 evaluated, 3 expanded
[t=7.19302s, 126820 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 37
[t=7.19302s, 126820 KB] g=8, 226 evaluated, 4 expanded
[t=7.19702s, 126820 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 36
[t=7.19702s, 126820 KB] g=11, 342 evaluated, 5 expanded
[t=7.20102s, 126820 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 35
[t=7.20102s, 126820 KB] g=14, 384 evaluated, 6 expanded
[t=7.20102s, 126820 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 34
[t=7.20102s, 126820 KB] g=14, 418 evaluated, 6 expanded
[t=7.20102s, 126820 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 33
[t=7.20102s, 126820 KB] g=17, 454 evaluated, 7 expanded
[t=7.20502s, 126820 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 32
[t=7.20502s, 126820 KB] g=20, 523 evaluated, 8 expanded
[t=7.20502s, 126820 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 31
[t=7.20502s, 126820 KB] g=23, 591 evaluated, 9 expanded
[t=7.20902s, 126820 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 30
[t=7.20902s, 126820 KB] g=24, 658 evaluated, 10 expanded
[t=7.20902s, 126820 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 29
[t=7.20902s, 126820 KB] g=27, 724 evaluated, 11 expanded
[t=7.20902s, 126820 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 28
[t=7.20902s, 126820 KB] g=28, 791 evaluated, 12 expanded
[t=7.21302s, 126820 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 27
[t=7.21302s, 126820 KB] g=31, 855 evaluated, 13 expanded
[t=7.21302s, 126820 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 26
[t=7.21302s, 126820 KB] g=32, 922 evaluated, 14 expanded
[t=7.21702s, 126820 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 25
[t=7.21702s, 126820 KB] g=31, 1048 evaluated, 16 expanded
[t=7.22102s, 126820 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 24
[t=7.22102s, 126820 KB] g=32, 1181 evaluated, 18 expanded
[t=7.22502s, 126820 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 23
[t=7.22502s, 126820 KB] g=37, 1327 evaluated, 20 expanded
[t=7.22502s, 126820 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 22
[t=7.22502s, 126820 KB] g=36, 1375 evaluated, 21 expanded
[t=7.22902s, 126820 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 21
[t=7.22902s, 126820 KB] g=37, 1464 evaluated, 22 expanded
[t=7.22902s, 126820 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 20
[t=7.22902s, 126820 KB] g=38, 1525 evaluated, 23 expanded
[t=7.23302s, 126820 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 19
[t=7.23302s, 126820 KB] g=40, 1597 evaluated, 25 expanded
[t=7.23302s, 126820 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 18
[t=7.23302s, 126820 KB] g=40, 1609 evaluated, 25 expanded
[t=7.24102s, 126820 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 17
[t=7.24102s, 126820 KB] g=46, 1878 evaluated, 29 expanded
[t=7.24102s, 126820 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 16
[t=7.24102s, 126820 KB] g=46, 1915 evaluated, 29 expanded
[t=7.24102s, 126820 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 15
[t=7.24102s, 126820 KB] g=49, 1944 evaluated, 30 expanded
[t=7.24102s, 126820 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 14
[t=7.24102s, 126820 KB] g=49, 1981 evaluated, 30 expanded
[t=7.24502s, 126820 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 13
[t=7.24502s, 126820 KB] g=48, 2005 evaluated, 31 expanded
[t=7.24502s, 126820 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 12
[t=7.24502s, 126820 KB] g=49, 2113 evaluated, 32 expanded
[t=7.24502s, 126820 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 11
[t=7.24502s, 126820 KB] g=50, 2126 evaluated, 33 expanded
[t=7.24902s, 126820 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 10
[t=7.24902s, 126820 KB] g=51, 2189 evaluated, 34 expanded
[t=7.24902s, 126820 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 9
[t=7.24902s, 126820 KB] g=54, 2307 evaluated, 35 expanded
[t=7.24902s, 126820 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 8
[t=7.24902s, 126820 KB] g=57, 2328 evaluated, 36 expanded
[t=7.25302s, 126820 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 7
[t=7.25302s, 126820 KB] g=56, 2453 evaluated, 38 expanded
[t=7.25702s, 126820 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 6
[t=7.25702s, 126820 KB] g=60, 2635 evaluated, 40 expanded
[t=7.25702s, 126820 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 5
[t=7.25702s, 126820 KB] g=63, 2657 evaluated, 41 expanded
[t=7.26102s, 126820 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 4
[t=7.26102s, 126820 KB] g=64, 2716 evaluated, 42 expanded
[t=7.26102s, 126820 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 3
[t=7.26102s, 126820 KB] g=70, 2840 evaluated, 44 expanded
[t=7.26102s, 126820 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 2
[t=7.26102s, 126820 KB] g=70, 2847 evaluated, 44 expanded
[t=7.26902s, 126820 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 0
[t=7.26902s, 126820 KB] g=74, 3053 evaluated, 47 expanded
[t=7.26902s, 126820 KB] Solution found!
[t=7.26902s, 126820 KB] Actual search time: 0.079997s
analyze-2 seg-in-4 seg-out-1 car-in-4 car-out-1 (3)
analyze-2 seg-in-4 seg-out-1 car-out-1 car-in-4 (3)
rotate-2 seg-in-1 seg-out-2 car-in-1 car-out-2 (1)
rotate-2 seg-in-2 seg-out-3 car-in-2 car-out-3 (1)
analyze-2 seg-in-1 seg-out-1 car-out-2 car-out-1 (3)
analyze-2 seg-in-2 seg-out-1 car-out-3 car-out-2 (3)
analyze-2 seg-in-5 seg-out-1 car-in-5 car-out-3 (3)
analyze-2 seg-in-6 seg-out-1 car-in-6 car-in-5 (3)
rotate-2 seg-in-6 seg-out-1 car-in-5 car-in-6 (1)
analyze-2 seg-in-7 seg-out-1 car-in-7 car-in-5 (3)
rotate-2 seg-in-7 seg-out-1 car-in-5 car-in-7 (1)
analyze-2 seg-in-8 seg-out-1 car-in-8 car-in-5 (3)
rotate-2 seg-in-8 seg-out-1 car-in-5 car-in-8 (1)
rotate-2 seg-in-1 seg-out-1 car-out-1 car-in-5 (1)
rotate-2 seg-in-1 seg-out-4 car-in-5 car-out-4 (1)
analyze-2 seg-in-1 seg-out-1 car-out-4 car-out-1 (3)
rotate-2 seg-in-1 seg-out-1 car-out-1 car-out-4 (1)
rotate-2 seg-in-5 seg-out-4 car-out-3 car-in-5 (1)
rotate-2 seg-in-1 seg-out-4 car-out-4 car-out-3 (1)
rotate-2 seg-in-2 seg-out-5 car-out-2 car-out-5 (1)
rotate-2 seg-in-1 seg-out-3 car-out-3 car-in-2 (1)
rotate-2 seg-in-1 seg-out-6 car-in-2 car-out-6 (1)
analyze-2 seg-in-2 seg-out-1 car-out-5 car-out-1 (3)
analyze-2 seg-in-1 seg-out-1 car-out-6 car-out-5 (3)
rotate-2 seg-in-2 seg-out-1 car-out-1 car-out-6 (1)
rotate-2 seg-in-2 seg-out-6 car-out-6 car-in-2 (1)
rotate-2 seg-in-1 seg-out-5 car-out-5 car-out-2 (1)
rotate-2 seg-in-1 seg-out-2 car-out-2 car-in-1 (1)
rotate-2 seg-in-1 seg-out-7 car-in-1 car-out-7 (1)
analyze-2 seg-in-1 seg-out-1 car-out-7 car-out-1 (3)
rotate-2 seg-in-1 seg-out-1 car-out-1 car-out-7 (1)
rotate-2 seg-in-1 seg-out-7 car-out-7 car-in-1 (1)
rotate-2 seg-in-1 seg-out-8 car-in-1 car-out-8 (1)
analyze-2 seg-in-1 seg-out-1 car-out-8 car-out-1 (3)
analyze-2 seg-in-2 seg-out-1 car-in-2 car-out-8 (3)
rotate-2 seg-in-2 seg-out-8 car-out-8 car-in-1 (1)
analyze-2 seg-in-2 seg-out-1 car-in-1 car-in-2 (3)
rotate-2 seg-in-1 seg-out-1 car-out-1 car-in-1 (1)
analyze-2 seg-in-3 seg-out-1 car-in-3 car-out-1 (3)
rotate-2 seg-in-3 seg-out-1 car-out-1 car-in-3 (1)
[t=7.26902s, 126820 KB] Plan length: 40 step(s).
[t=7.26902s, 126820 KB] Plan cost: 72
[t=7.26902s, 126820 KB] Expanded 48 state(s).
[t=7.26902s, 126820 KB] Reopened 0 state(s).
[t=7.26902s, 126820 KB] Evaluated 3095 state(s).
[t=7.26902s, 126820 KB] Evaluations: 3142
[t=7.26902s, 126820 KB] Generated 3384 state(s).
[t=7.26902s, 126820 KB] Dead ends: 0 state(s).
[t=7.26902s, 126820 KB] Number of registered states: 3095
[t=7.26902s, 126820 KB] Int hash set load factor: 3095/4096 = 0.755615
[t=7.26902s, 126820 KB] Int hash set resizes: 12
[t=7.26902s, 126820 KB] Search time: 0.079997s
[t=7.26902s, 126820 KB] Total time: 7.26902s
Solution found.
Peak memory: 126820 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Running validate.
INFO     validate stdin: None
INFO     validate time limit: None
INFO     validate memory limit: None
INFO     validate command line string: validate domain.pddl problem.pddl sas_plan
Checking plan: sas_plan
Plan executed successfully - checking goal
Plan valid
Final value: 72 

Successful plans:
Value: 72
 sas_plan 72 

validate exit code: 0

