INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: 1799.98s
INFO     translator memory limit: 4096 MB
INFO     translator command line string: /usr/bin/python3 /home/dmdoebber/downward-projects/downward/experiments/paper/data/pref-ops-val/code-11d6cc7f374e3fd7216f4422aa97b8db8c68d3c3_e5e41175/builds/release/bin/translate/translate.py domain.pddl problem.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.002s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.001s wall-clock]
Generated 32 rules.
Computing model... [0.310s CPU, 0.304s wall-clock]
53177 relevant atoms
5070 auxiliary atoms
58247 final queue length
172334 total queue pushes
Completing instantiation... [1.730s CPU, 1.728s wall-clock]
Instantiating: [2.040s CPU, 2.042s wall-clock]
Computing fact groups...
Finding invariants...
12 initial candidates
Finding invariants: [0.010s CPU, 0.005s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.004s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.001s wall-clock]
Choosing groups...
71 uncovered facts
Choosing groups: [0.000s CPU, 0.002s wall-clock]
Building translation key... [0.000s CPU, 0.001s wall-clock]
Computing fact groups: [0.020s CPU, 0.017s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.001s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.001s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.070s CPU, 0.069s wall-clock]
Translating task: [1.980s CPU, 1.984s wall-clock]
61152 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
28 propositions removed
Detecting unreachable propositions: [1.060s CPU, 1.055s wall-clock]
Reordering and filtering variables...
99 of 99 variables necessary.
43 of 71 mutex groups necessary.
49392 of 49392 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.300s CPU, 0.298s wall-clock]
Translator variables: 99
Translator derived variables: 0
Translator facts: 1346
Translator goal facts: 28
Translator mutex groups: 43
Translator total mutex groups size: 1247
Translator operators: 49392
Translator axioms: 0
Translator task size: 402560
Translator peak memory: 267884 KB
Writing output... [0.280s CPU, 0.279s wall-clock]
Done! [5.760s CPU, 5.765s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: 1794.17s
INFO     search memory limit: 4096 MB
INFO     search command line string: /home/dmdoebber/downward-projects/downward/experiments/paper/data/pref-ops-val/code-11d6cc7f374e3fd7216f4422aa97b8db8c68d3c3_e5e41175/builds/release/bin/downward --evaluator 'eval=ff()' --search 'eager_greedy([lsh(patterns=systematic(4), op_order=default, res_order=default, transform=adapt_costs(cost_type=ONE))],  preferred=[eval])' --internal-plan-file sas_plan < output.sas
[t=0.0017878s, 46116 KB] reading input...
[t=0.177735s, 64864 KB] done reading input!
[t=0.193735s, 76076 KB] Simplifying 171276 unary operators... done! [171276 unary operators]
[t=0.405629s, 91344 KB] time to simplify: 0.211894s
[t=0.409635s, 91344 KB] Initializing additive heuristic...
[t=0.409635s, 91344 KB] Initializing FF heuristic...
[t=0.409635s, 91344 KB] stop search of patterns: 3355443KB
[t=0.409635s, 91344 KB] Generating patterns using the systematic generator...
[t=0.409635s, 91344 KB] building causal graph...done! [t=0.0239808s]
[t=6.17077s, 824232 KB] Found 2646294 SGA patterns.
[t=47.1426s, 829652 KB] Found 2870700 interesting patterns.
[t=47.8181s, 829652 KB] [28, 1988, 96418, 2772266]
[t=49.761s, 829652 KB] Systematic generator number of patterns: 6048
[t=49.761s, 829652 KB] Systematic generator total PDB size: 33979546
[t=49.761s, 829652 KB] Systematic generator computation time: 49.3514s
[t=49.761s, 829652 KB] Computing PDBs for pattern collection...
[t=166.447s, 829652 KB] Done computing PDBs for pattern collection: 116.686s
[t=173.939s, 829652 KB] Operators: 49392
[t=173.939s, 829652 KB] Restrictions: 6048
[t=173.939s, 829652 KB] Mean mentions: 615
[t=173.939s, 829652 KB] Mean operators: 5024
[t=173.943s, 829652 KB] Building successor generator...done!
[t=173.959s, 829652 KB] peak memory difference for successor generator creation: 0 KB
[t=173.959s, 829652 KB] time for successor generation creation: 0.0159895s
[t=173.959s, 829652 KB] Variables: 99
[t=173.959s, 829652 KB] FactPairs: 1346
[t=173.959s, 829652 KB] Bytes per state: 32
[t=173.959s, 829652 KB] Conducting best first search without reopening closed nodes, (real) bound = 2147483647
[t=173.959s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 61
[t=173.959s, 829652 KB] g=0, 1 evaluated, 0 expanded
[t=173.959s, 829652 KB] Initial heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 61
[t=173.959s, 829652 KB] pruning method: none
[t=173.967s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 59
[t=173.967s, 829652 KB] g=2, 41 evaluated, 2 expanded
[t=173.971s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 58
[t=173.971s, 829652 KB] g=3, 68 evaluated, 3 expanded
[t=173.979s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 56
[t=173.979s, 829652 KB] g=4, 96 evaluated, 4 expanded
[t=173.983s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 54
[t=173.983s, 829652 KB] g=5, 127 evaluated, 5 expanded
[t=173.987s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 53
[t=173.987s, 829652 KB] g=6, 144 evaluated, 6 expanded
[t=173.991s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 52
[t=173.991s, 829652 KB] g=7, 157 evaluated, 7 expanded
[t=173.991s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 51
[t=173.991s, 829652 KB] g=7, 163 evaluated, 7 expanded
[t=173.995s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 50
[t=173.995s, 829652 KB] g=8, 195 evaluated, 8 expanded
[t=173.999s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 48
[t=173.999s, 829652 KB] g=9, 214 evaluated, 9 expanded
[t=174.003s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 47
[t=174.003s, 829652 KB] g=10, 227 evaluated, 10 expanded
[t=174.047s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 46
[t=174.047s, 829652 KB] g=12, 463 evaluated, 18 expanded
[t=174.051s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 45
[t=174.051s, 829652 KB] g=13, 480 evaluated, 19 expanded
[t=174.051s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 44
[t=174.051s, 829652 KB] g=13, 481 evaluated, 19 expanded
[t=174.055s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 42
[t=174.059s, 829652 KB] g=14, 503 evaluated, 20 expanded
[t=174.063s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 40
[t=174.063s, 829652 KB] g=15, 533 evaluated, 21 expanded
[t=174.067s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 39
[t=174.067s, 829652 KB] g=16, 551 evaluated, 22 expanded
[t=174.067s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 37
[t=174.067s, 829652 KB] g=16, 552 evaluated, 22 expanded
[t=174.071s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 35
[t=174.071s, 829652 KB] g=17, 576 evaluated, 23 expanded
[t=174.135s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 34
[t=174.135s, 829652 KB] g=19, 888 evaluated, 35 expanded
[t=174.147s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 33
[t=174.147s, 829652 KB] g=21, 965 evaluated, 38 expanded
[t=174.151s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 32
[t=174.151s, 829652 KB] g=22, 984 evaluated, 39 expanded
[t=174.155s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 31
[t=174.155s, 829652 KB] g=23, 1001 evaluated, 40 expanded
[t=174.159s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 30
[t=174.159s, 829652 KB] g=23, 1016 evaluated, 40 expanded
[t=174.159s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 29
[t=174.159s, 829652 KB] g=24, 1028 evaluated, 41 expanded
[t=175.046s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 28
[t=175.046s, 829652 KB] g=32, 5190 evaluated, 213 expanded
[t=177.797s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 27
[t=177.797s, 829652 KB] g=31, 18007 evaluated, 748 expanded
[t=178.501s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 26
[t=178.501s, 829652 KB] g=40, 21278 evaluated, 886 expanded
[t=179.968s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 25
[t=179.968s, 829652 KB] g=39, 27935 evaluated, 1186 expanded
[t=187.288s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 24
[t=187.288s, 829652 KB] g=46, 60732 evaluated, 2647 expanded
[t=187.296s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 23
[t=187.296s, 829652 KB] g=47, 60766 evaluated, 2648 expanded
[t=187.308s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 22
[t=187.308s, 829652 KB] g=49, 60835 evaluated, 2651 expanded
[t=203.7s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 21
[t=203.7s, 829652 KB] g=53, 132337 evaluated, 5976 expanded
[t=203.712s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 20
[t=203.712s, 829652 KB] g=55, 132407 evaluated, 5979 expanded
[t=216.394s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 19
[t=216.394s, 829652 KB] g=59, 187384 evaluated, 8585 expanded
[t=216.406s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 18
[t=216.406s, 829652 KB] g=61, 187453 evaluated, 8588 expanded
[t=226.465s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 17
[t=226.465s, 829652 KB] g=65, 230946 evaluated, 10650 expanded
[t=226.481s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 16
[t=226.481s, 829652 KB] g=67, 231016 evaluated, 10653 expanded
[t=234.157s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 15
[t=234.157s, 829652 KB] g=71, 264726 evaluated, 12233 expanded
[t=234.173s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 14
[t=234.173s, 829652 KB] g=73, 264796 evaluated, 12236 expanded
[t=239.562s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 13
[t=239.562s, 829652 KB] g=77, 288519 evaluated, 13337 expanded
[t=239.574s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 11
[t=239.574s, 829652 KB] g=78, 288574 evaluated, 13339 expanded
[t=239.574s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 10
[t=239.574s, 829652 KB] g=79, 288588 evaluated, 13340 expanded
[t=242.516s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 9
[t=242.516s, 829652 KB] g=88, 302156 evaluated, 13930 expanded
[t=242.521s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 8
[t=242.521s, 829652 KB] g=89, 302179 evaluated, 13931 expanded
[t=243.556s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 7
[t=243.556s, 829652 KB] g=93, 307074 evaluated, 14138 expanded
[t=243.56s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 5
[t=243.56s, 829652 KB] g=94, 307091 evaluated, 14139 expanded
[t=243.564s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 4
[t=243.564s, 829652 KB] g=95, 307116 evaluated, 14140 expanded
[t=243.864s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 3
[t=243.864s, 829652 KB] g=103, 308539 evaluated, 14204 expanded
[t=243.868s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 1
[t=243.868s, 829652 KB] g=104, 308557 evaluated, 14205 expanded
[t=243.872s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 0
[t=243.872s, 829652 KB] g=105, 308581 evaluated, 14206 expanded
[t=243.876s, 829652 KB] Solution found!
[t=243.876s, 829652 KB] Actual search time: 69.9169s
move-car-to-car car_00 car_05 car_21 (1)
move-car-to-car car_20 car_02 car_05 (1)
move-car-to-car car_17 car_03 car_02 (1)
move-car-to-car car_18 car_09 car_03 (1)
move-curb-to-car car_24 curb_13 car_09 (1)
move-car-to-curb car_00 car_21 curb_13 (1)
move-car-to-car car_15 car_06 car_00 (1)
move-curb-to-car car_21 curb_14 car_06 (1)
move-car-to-curb car_01 car_25 curb_14 (1)
move-car-to-car car_04 car_26 car_01 (1)
move-car-to-car car_22 car_10 car_26 (1)
move-curb-to-car car_25 curb_06 car_10 (1)
move-car-to-curb car_07 car_11 curb_06 (1)
move-car-to-car car_22 car_26 car_07 (1)
move-curb-to-car car_26 curb_12 car_11 (1)
move-car-to-curb car_12 car_23 curb_12 (1)
move-car-to-car car_27 car_19 car_12 (1)
move-curb-to-car car_19 curb_10 car_23 (1)
move-car-to-curb car_08 car_16 curb_10 (1)
move-car-to-car car_19 car_23 car_16 (1)
move-curb-to-car car_23 curb_11 car_08 (1)
move-car-to-curb car_04 car_01 curb_11 (1)
move-car-to-car car_19 car_16 car_04 (1)
move-curb-to-car car_16 curb_05 car_01 (1)
move-car-to-curb car_15 car_00 curb_05 (1)
move-curb-to-car car_00 curb_13 car_15 (1)
move-car-to-curb car_13 car_14 curb_13 (1)
move-car-to-car car_00 car_15 car_13 (1)
move-curb-to-car car_15 curb_05 car_14 (1)
move-car-to-curb car_00 car_13 curb_05 (1)
move-car-to-car car_15 car_14 car_00 (1)
move-curb-to-car car_14 curb_07 car_13 (1)
move-car-to-curb car_16 car_01 curb_07 (1)
move-curb-to-car car_01 curb_14 car_16 (1)
move-car-to-curb car_14 car_13 curb_14 (1)
move-car-to-car car_01 car_16 car_14 (1)
move-curb-to-car car_16 curb_07 car_13 (1)
move-car-to-curb car_01 car_14 curb_07 (1)
move-car-to-car car_16 car_13 car_01 (1)
move-car-to-car car_17 car_02 car_13 (1)
move-curb-to-car car_02 curb_00 car_14 (1)
move-car-to-curb car_21 car_06 curb_00 (1)
move-curb-to-car car_06 curb_02 car_21 (1)
move-car-to-curb car_02 car_14 curb_02 (1)
move-car-to-car car_17 car_13 car_02 (1)
move-car-to-car car_06 car_21 car_13 (1)
move-curb-to-car car_21 curb_00 car_14 (1)
move-car-to-curb car_22 car_07 curb_00 (1)
move-curb-to-car car_07 curb_06 car_22 (1)
move-car-to-curb car_06 car_13 curb_06 (1)
move-car-to-car car_21 car_14 car_06 (1)
move-car-to-car car_07 car_22 car_13 (1)
move-curb-to-car car_22 curb_00 car_14 (1)
move-car-to-curb car_16 car_01 curb_00 (1)
move-curb-to-car car_01 curb_07 car_16 (1)
move-car-to-curb car_07 car_13 curb_07 (1)
move-car-to-car car_22 car_14 car_07 (1)
move-car-to-car car_01 car_16 car_13 (1)
move-curb-to-car car_16 curb_00 car_14 (1)
move-car-to-curb car_18 car_03 curb_00 (1)
move-curb-to-car car_03 curb_01 car_18 (1)
move-car-to-curb car_01 car_13 curb_01 (1)
move-car-to-car car_16 car_14 car_01 (1)
move-car-to-car car_03 car_18 car_13 (1)
move-curb-to-car car_18 curb_00 car_14 (1)
move-car-to-curb car_20 car_05 curb_00 (1)
move-curb-to-car car_05 curb_03 car_20 (1)
move-car-to-curb car_03 car_13 curb_03 (1)
move-car-to-car car_18 car_14 car_03 (1)
move-car-to-car car_05 car_20 car_13 (1)
move-curb-to-car car_20 curb_00 car_14 (1)
move-car-to-curb car_15 car_00 curb_00 (1)
move-curb-to-car car_00 curb_05 car_15 (1)
move-car-to-curb car_05 car_13 curb_05 (1)
move-car-to-car car_20 car_14 car_05 (1)
move-car-to-car car_00 car_15 car_13 (1)
move-curb-to-car car_15 curb_00 car_14 (1)
move-car-to-curb car_00 car_13 curb_00 (1)
move-car-to-car car_15 car_14 car_00 (1)
move-car-to-car car_19 car_04 car_14 (1)
move-curb-to-car car_04 curb_11 car_13 (1)
move-car-to-curb car_24 car_09 curb_11 (1)
move-curb-to-car car_09 curb_04 car_24 (1)
move-car-to-curb car_04 car_13 curb_04 (1)
move-car-to-car car_19 car_14 car_04 (1)
move-car-to-car car_09 car_24 car_13 (1)
move-curb-to-car car_24 curb_11 car_14 (1)
move-car-to-curb car_26 car_11 curb_11 (1)
move-curb-to-car car_11 curb_09 car_26 (1)
move-car-to-curb car_09 car_13 curb_09 (1)
move-car-to-car car_24 car_14 car_09 (1)
move-car-to-car car_11 car_26 car_14 (1)
move-curb-to-car car_26 curb_11 car_13 (1)
move-car-to-curb car_11 car_14 curb_11 (1)
move-car-to-car car_26 car_13 car_11 (1)
move-car-to-car car_23 car_08 car_14 (1)
move-curb-to-car car_08 curb_10 car_13 (1)
move-car-to-curb car_25 car_10 curb_10 (1)
move-curb-to-car car_10 curb_08 car_25 (1)
move-car-to-curb car_08 car_13 curb_08 (1)
move-car-to-car car_23 car_14 car_08 (1)
move-car-to-car car_10 car_25 car_14 (1)
move-curb-to-car car_25 curb_10 car_13 (1)
move-car-to-curb car_10 car_14 curb_10 (1)
move-car-to-car car_25 car_13 car_10 (1)
[t=243.876s, 829652 KB] Plan length: 105 step(s).
[t=243.876s, 829652 KB] Plan cost: 105
[t=243.876s, 829652 KB] Expanded 14207 state(s).
[t=243.876s, 829652 KB] Reopened 0 state(s).
[t=243.876s, 829652 KB] Evaluated 308598 state(s).
[t=243.876s, 829652 KB] Evaluations: 322804
[t=243.876s, 829652 KB] Generated 398980 state(s).
[t=243.876s, 829652 KB] Dead ends: 25012 state(s).
[t=243.876s, 829652 KB] Number of registered states: 308598
[t=243.876s, 829652 KB] Int hash set load factor: 308598/524288 = 0.588604
[t=243.876s, 829652 KB] Int hash set resizes: 19
[t=243.876s, 829652 KB] Search time: 69.9169s
[t=243.876s, 829652 KB] Total time: 243.876s
Solution found.
Peak memory: 829652 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Running validate.
INFO     validate stdin: None
INFO     validate time limit: None
INFO     validate memory limit: None
INFO     validate command line string: validate domain.pddl problem.pddl sas_plan
Checking plan: sas_plan
Plan executed successfully - checking goal
Plan valid
Final value: 105 

Successful plans:
Value: 105
 sas_plan 105 

validate exit code: 0

