INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: 1799.98s
INFO     translator memory limit: 4096 MB
INFO     translator command line string: /usr/bin/python3 /home/dmdoebber/downward-projects/downward/experiments/paper/data/pref-ops-val/code-11d6cc7f374e3fd7216f4422aa97b8db8c68d3c3_e5e41175/builds/release/bin/translate/translate.py domain.pddl problem.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.002s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.010s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.001s wall-clock]
Generated 32 rules.
Computing model... [0.190s CPU, 0.190s wall-clock]
33917 relevant atoms
3770 auxiliary atoms
37687 final queue length
109987 total queue pushes
Completing instantiation... [1.060s CPU, 1.057s wall-clock]
Instantiating: [1.260s CPU, 1.254s wall-clock]
Computing fact groups...
Finding invariants...
12 initial candidates
Finding invariants: [0.010s CPU, 0.004s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.003s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
61 uncovered facts
Choosing groups: [0.000s CPU, 0.002s wall-clock]
Building translation key... [0.010s CPU, 0.001s wall-clock]
Computing fact groups: [0.020s CPU, 0.012s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.001s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.001s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.040s CPU, 0.044s wall-clock]
Translating task: [1.260s CPU, 1.263s wall-clock]
38592 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
24 propositions removed
Detecting unreachable propositions: [0.640s CPU, 0.651s wall-clock]
Reordering and filtering variables...
85 of 85 variables necessary.
37 of 61 mutex groups necessary.
31104 of 31104 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.190s CPU, 0.192s wall-clock]
Translator variables: 85
Translator derived variables: 0
Translator facts: 1010
Translator goal facts: 24
Translator mutex groups: 37
Translator total mutex groups size: 925
Translator operators: 31104
Translator axioms: 0
Translator task size: 253756
Translator peak memory: 180688 KB
Writing output... [0.170s CPU, 0.175s wall-clock]
Done! [3.600s CPU, 3.602s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: 1796.34s
INFO     search memory limit: 4096 MB
INFO     search command line string: /home/dmdoebber/downward-projects/downward/experiments/paper/data/pref-ops-val/code-11d6cc7f374e3fd7216f4422aa97b8db8c68d3c3_e5e41175/builds/release/bin/downward --evaluator 'eval=ff()' --search 'eager_greedy([lsh(patterns=systematic(4), op_order=default, res_order=default, transform=adapt_costs(cost_type=ONE))],  preferred=[eval])' --internal-plan-file sas_plan < output.sas
[t=0s, 46116 KB] reading input...
[t=0.111715s, 57872 KB] done reading input!
[t=0.123715s, 64348 KB] Simplifying 107976 unary operators... done! [107976 unary operators]
[t=0.207713s, 74264 KB] time to simplify: 0.0839981s
[t=0.211713s, 74264 KB] Initializing additive heuristic...
[t=0.211713s, 74264 KB] Initializing FF heuristic...
[t=0.211713s, 74264 KB] stop search of patterns: 3355443KB
[t=0.211713s, 74264 KB] Generating patterns using the systematic generator...
[t=0.211713s, 74264 KB] building causal graph...done! [t=0.0119991s]
[t=3.0428s, 443728 KB] Found 1436144 SGA patterns.
[t=24.4652s, 461456 KB] Found 1554548 interesting patterns.
[t=24.8252s, 461456 KB] [24, 1464, 60756, 1492304]
[t=25.7331s, 461456 KB] Systematic generator number of patterns: 4464
[t=25.7331s, 461456 KB] Systematic generator total PDB size: 16239966
[t=25.7331s, 461456 KB] Systematic generator computation time: 25.5214s
[t=25.7331s, 461456 KB] Computing PDBs for pattern collection...
[t=71.92s, 461456 KB] Done computing PDBs for pattern collection: 46.1869s
[t=74.6799s, 461456 KB] Operators: 31104
[t=74.6799s, 461456 KB] Restrictions: 4464
[t=74.6799s, 461456 KB] Mean mentions: 527
[t=74.6799s, 461456 KB] Mean operators: 3674
[t=74.6839s, 461456 KB] Building successor generator...done!
[t=74.6919s, 461456 KB] peak memory difference for successor generator creation: 0 KB
[t=74.6919s, 461456 KB] time for successor generation creation: 0.00799755s
[t=74.6919s, 461456 KB] Variables: 85
[t=74.6919s, 461456 KB] FactPairs: 1010
[t=74.6919s, 461456 KB] Bytes per state: 28
[t=74.6919s, 461456 KB] Conducting best first search without reopening closed nodes, (real) bound = 2147483647
[t=74.6919s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 50
[t=74.6919s, 461456 KB] g=0, 1 evaluated, 0 expanded
[t=74.6919s, 461456 KB] Initial heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 50
[t=74.6919s, 461456 KB] pruning method: none
[t=74.6959s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 48
[t=74.6959s, 461456 KB] g=1, 2 evaluated, 1 expanded
[t=74.6959s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 47
[t=74.6959s, 461456 KB] g=2, 16 evaluated, 2 expanded
[t=74.6959s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 46
[t=74.6959s, 461456 KB] g=2, 19 evaluated, 2 expanded
[t=74.6999s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 45
[t=74.6999s, 461456 KB] g=3, 45 evaluated, 3 expanded
[t=74.7039s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 44
[t=74.7039s, 461456 KB] g=4, 65 evaluated, 4 expanded
[t=74.7039s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 43
[t=74.7039s, 461456 KB] g=4, 67 evaluated, 4 expanded
[t=74.7039s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 42
[t=74.7039s, 461456 KB] g=5, 93 evaluated, 5 expanded
[t=74.7079s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 41
[t=74.7079s, 461456 KB] g=6, 120 evaluated, 6 expanded
[t=74.7199s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 39
[t=74.7199s, 461456 KB] g=8, 208 evaluated, 10 expanded
[t=74.7279s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 38
[t=74.7279s, 461456 KB] g=10, 260 evaluated, 12 expanded
[t=74.7279s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 37
[t=74.7279s, 461456 KB] g=11, 274 evaluated, 13 expanded
[t=74.7279s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 36
[t=74.7279s, 461456 KB] g=11, 275 evaluated, 13 expanded
[t=74.7319s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 34
[t=74.7319s, 461456 KB] g=12, 295 evaluated, 14 expanded
[t=74.7359s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 32
[t=74.7359s, 461456 KB] g=14, 329 evaluated, 16 expanded
[t=74.7399s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 30
[t=74.7399s, 461456 KB] g=15, 352 evaluated, 17 expanded
[t=74.7399s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 29
[t=74.7399s, 461456 KB] g=16, 370 evaluated, 18 expanded
[t=74.7439s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 27
[t=74.7439s, 461456 KB] g=17, 402 evaluated, 19 expanded
[t=83.9077s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 25
[t=83.9077s, 461456 KB] g=23, 63294 evaluated, 3148 expanded
[t=83.9117s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 24
[t=83.9117s, 461456 KB] g=24, 63306 evaluated, 3149 expanded
[t=84.5437s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 23
[t=84.5437s, 461456 KB] g=33, 67718 evaluated, 3366 expanded
[t=85.5756s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 22
[t=85.5756s, 461456 KB] g=32, 74898 evaluated, 3723 expanded
[t=88.9396s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 21
[t=88.9396s, 461456 KB] g=32, 97683 evaluated, 4915 expanded
[t=88.9396s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 20
[t=88.9396s, 461456 KB] g=33, 97706 evaluated, 4916 expanded
[t=93.1315s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 19
[t=93.1315s, 461456 KB] g=37, 126497 evaluated, 6392 expanded
[t=93.1435s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 18
[t=93.1435s, 461456 KB] g=39, 126590 evaluated, 6396 expanded
[t=93.1475s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 17
[t=93.1475s, 461456 KB] g=40, 126604 evaluated, 6397 expanded
[t=95.2474s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 16
[t=95.2474s, 461456 KB] g=47, 141029 evaluated, 7141 expanded
[t=95.2594s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 15
[t=95.2594s, 461456 KB] g=49, 141122 evaluated, 7145 expanded
[t=95.2634s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 14
[t=95.2634s, 461456 KB] g=50, 141140 evaluated, 7146 expanded
[t=98.3993s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 13
[t=98.3993s, 461456 KB] g=55, 162006 evaluated, 8302 expanded
[t=98.4033s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 12
[t=98.4033s, 461456 KB] g=56, 162021 evaluated, 8303 expanded
[t=100.591s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 11
[t=100.591s, 461456 KB] g=61, 176674 evaluated, 9110 expanded
[t=100.595s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 10
[t=100.595s, 461456 KB] g=62, 176690 evaluated, 9111 expanded
[t=101.891s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 9
[t=101.891s, 461456 KB] g=67, 185710 evaluated, 9575 expanded
[t=101.891s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 8
[t=101.891s, 461456 KB] g=68, 185724 evaluated, 9576 expanded
[t=102.519s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 7
[t=102.519s, 461456 KB] g=73, 190181 evaluated, 9800 expanded
[t=102.523s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 6
[t=102.523s, 461456 KB] g=74, 190202 evaluated, 9801 expanded
[t=102.799s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 5
[t=102.799s, 461456 KB] g=79, 192211 evaluated, 9900 expanded
[t=102.799s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 4
[t=102.799s, 461456 KB] g=80, 192231 evaluated, 9901 expanded
[t=102.907s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 3
[t=102.907s, 461456 KB] g=84, 193038 evaluated, 9942 expanded
[t=102.911s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 1
[t=102.911s, 461456 KB] g=85, 193078 evaluated, 9944 expanded
[t=102.915s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 0
[t=102.915s, 461456 KB] g=86, 193097 evaluated, 9945 expanded
[t=102.915s, 461456 KB] Solution found!
[t=102.915s, 461456 KB] Actual search time: 28.2233s
move-car-to-curb car_01 car_03 curb_12 (1)
move-car-to-car car_14 car_05 car_01 (1)
move-car-to-car car_16 car_00 car_03 (1)
move-car-to-car car_13 car_22 car_00 (1)
move-car-to-car car_18 car_10 car_05 (1)
move-car-to-car car_23 car_08 car_10 (1)
move-car-to-car car_11 car_02 car_08 (1)
move-car-to-car car_15 car_20 car_02 (1)
move-car-to-car car_09 car_07 car_22 (1)
move-curb-to-car car_20 curb_02 car_07 (1)
move-car-to-curb car_09 car_22 curb_02 (1)
move-curb-to-car car_22 curb_10 car_09 (1)
move-car-to-curb car_06 car_12 curb_10 (1)
move-car-to-car car_19 car_04 car_06 (1)
move-car-to-car car_17 car_21 car_04 (1)
move-car-to-car car_11 car_08 car_12 (1)
move-curb-to-car car_21 curb_00 car_08 (1)
move-car-to-curb car_13 car_00 curb_00 (1)
move-curb-to-car car_00 curb_11 car_13 (1)
move-car-to-curb car_11 car_12 curb_11 (1)
move-car-to-car car_00 car_13 car_11 (1)
move-curb-to-car car_13 curb_00 car_12 (1)
move-car-to-curb car_00 car_11 curb_00 (1)
move-car-to-car car_13 car_12 car_00 (1)
move-curb-to-car car_12 curb_04 car_11 (1)
move-car-to-curb car_14 car_01 curb_04 (1)
move-curb-to-car car_01 curb_12 car_14 (1)
move-car-to-curb car_12 car_11 curb_12 (1)
move-car-to-car car_18 car_05 car_12 (1)
move-curb-to-car car_05 curb_01 car_11 (1)
move-car-to-curb car_01 car_14 curb_01 (1)
move-curb-to-car car_14 curb_04 car_01 (1)
move-car-to-curb car_15 car_02 curb_04 (1)
move-curb-to-car car_02 curb_05 car_15 (1)
move-car-to-curb car_05 car_11 curb_05 (1)
move-car-to-car car_18 car_12 car_05 (1)
move-car-to-car car_02 car_15 car_11 (1)
move-curb-to-car car_15 curb_04 car_12 (1)
move-car-to-curb car_02 car_11 curb_04 (1)
move-car-to-car car_15 car_12 car_02 (1)
move-car-to-car car_23 car_10 car_11 (1)
move-curb-to-car car_10 curb_07 car_12 (1)
move-car-to-curb car_19 car_06 curb_07 (1)
move-curb-to-car car_06 curb_10 car_19 (1)
move-car-to-curb car_10 car_12 curb_10 (1)
move-car-to-car car_23 car_11 car_10 (1)
move-car-to-car car_06 car_19 car_11 (1)
move-curb-to-car car_19 curb_07 car_12 (1)
move-car-to-curb car_16 car_03 curb_07 (1)
move-curb-to-car car_03 curb_06 car_16 (1)
move-car-to-curb car_06 car_11 curb_06 (1)
move-car-to-car car_19 car_12 car_06 (1)
move-car-to-car car_03 car_16 car_11 (1)
move-curb-to-car car_16 curb_07 car_12 (1)
move-car-to-curb car_17 car_04 curb_07 (1)
move-curb-to-car car_04 curb_03 car_17 (1)
move-car-to-curb car_03 car_11 curb_03 (1)
move-car-to-car car_16 car_12 car_03 (1)
move-car-to-car car_04 car_17 car_11 (1)
move-curb-to-car car_17 curb_07 car_12 (1)
move-car-to-curb car_15 car_02 curb_07 (1)
move-curb-to-car car_02 curb_04 car_15 (1)
move-car-to-curb car_04 car_11 curb_04 (1)
move-car-to-car car_17 car_12 car_04 (1)
move-car-to-car car_02 car_15 car_11 (1)
move-curb-to-car car_15 curb_07 car_12 (1)
move-car-to-curb car_22 car_09 curb_07 (1)
move-curb-to-car car_09 curb_02 car_22 (1)
move-car-to-curb car_02 car_11 curb_02 (1)
move-car-to-car car_15 car_12 car_02 (1)
move-car-to-car car_09 car_22 car_12 (1)
move-curb-to-car car_22 curb_07 car_11 (1)
move-car-to-curb car_21 car_08 curb_07 (1)
move-curb-to-car car_08 curb_09 car_21 (1)
move-car-to-curb car_09 car_12 curb_09 (1)
move-car-to-car car_22 car_11 car_09 (1)
move-car-to-car car_08 car_21 car_12 (1)
move-curb-to-car car_21 curb_07 car_11 (1)
move-car-to-curb car_20 car_07 curb_07 (1)
move-curb-to-car car_07 curb_08 car_20 (1)
move-car-to-curb car_08 car_12 curb_08 (1)
move-car-to-car car_21 car_11 car_08 (1)
move-car-to-car car_07 car_20 car_11 (1)
move-curb-to-car car_20 curb_07 car_12 (1)
move-car-to-curb car_07 car_11 curb_07 (1)
move-car-to-car car_20 car_12 car_07 (1)
[t=102.915s, 461456 KB] Plan length: 86 step(s).
[t=102.915s, 461456 KB] Plan cost: 86
[t=102.915s, 461456 KB] Expanded 9946 state(s).
[t=102.915s, 461456 KB] Reopened 0 state(s).
[t=102.915s, 461456 KB] Evaluated 193113 state(s).
[t=102.915s, 461456 KB] Evaluations: 203058
[t=102.915s, 461456 KB] Generated 237668 state(s).
[t=102.915s, 461456 KB] Dead ends: 16904 state(s).
[t=102.915s, 461456 KB] Number of registered states: 193113
[t=102.915s, 461456 KB] Int hash set load factor: 193113/262144 = 0.736668
[t=102.915s, 461456 KB] Int hash set resizes: 18
[t=102.915s, 461456 KB] Search time: 28.2233s
[t=102.915s, 461456 KB] Total time: 102.915s
Solution found.
Peak memory: 461456 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Running validate.
INFO     validate stdin: None
INFO     validate time limit: None
INFO     validate memory limit: None
INFO     validate command line string: validate domain.pddl problem.pddl sas_plan
Checking plan: sas_plan
Plan executed successfully - checking goal
Plan valid
Final value: 86 

Successful plans:
Value: 86
 sas_plan 86 

validate exit code: 0

