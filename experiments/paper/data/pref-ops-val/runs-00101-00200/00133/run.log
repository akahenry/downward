INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: 1799.99s
INFO     translator memory limit: 4096 MB
INFO     translator command line string: /usr/bin/python3 /home/dmdoebber/downward-projects/downward/experiments/paper/data/pref-ops-val/code-11d6cc7f374e3fd7216f4422aa97b8db8c68d3c3_e5e41175/builds/release/bin/translate/translate.py domain.pddl problem.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.002s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.001s wall-clock]
Generated 32 rules.
Computing model... [0.300s CPU, 0.301s wall-clock]
53177 relevant atoms
5070 auxiliary atoms
58247 final queue length
172334 total queue pushes
Completing instantiation... [1.730s CPU, 1.725s wall-clock]
Instantiating: [2.040s CPU, 2.036s wall-clock]
Computing fact groups...
Finding invariants...
12 initial candidates
Finding invariants: [0.000s CPU, 0.005s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.010s CPU, 0.004s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.001s wall-clock]
Choosing groups...
71 uncovered facts
Choosing groups: [0.000s CPU, 0.002s wall-clock]
Building translation key... [0.000s CPU, 0.001s wall-clock]
Computing fact groups: [0.010s CPU, 0.017s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.010s CPU, 0.001s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.001s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.060s CPU, 0.069s wall-clock]
Translating task: [1.930s CPU, 1.940s wall-clock]
61152 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
28 propositions removed
Detecting unreachable propositions: [1.010s CPU, 1.007s wall-clock]
Reordering and filtering variables...
99 of 99 variables necessary.
43 of 71 mutex groups necessary.
49392 of 49392 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.290s CPU, 0.288s wall-clock]
Translator variables: 99
Translator derived variables: 0
Translator facts: 1346
Translator goal facts: 28
Translator mutex groups: 43
Translator total mutex groups size: 1247
Translator operators: 49392
Translator axioms: 0
Translator task size: 402560
Translator peak memory: 267880 KB
Writing output... [0.270s CPU, 0.271s wall-clock]
Done! [5.640s CPU, 5.642s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: 1794.3s
INFO     search memory limit: 4096 MB
INFO     search command line string: /home/dmdoebber/downward-projects/downward/experiments/paper/data/pref-ops-val/code-11d6cc7f374e3fd7216f4422aa97b8db8c68d3c3_e5e41175/builds/release/bin/downward --evaluator 'eval=ff()' --search 'eager_greedy([lsh(patterns=systematic(4), op_order=default, res_order=default, transform=adapt_costs(cost_type=ONE))],  preferred=[eval])' --internal-plan-file sas_plan < output.sas
[t=0s, 46116 KB] reading input...
[t=0.174901s, 64864 KB] done reading input!
[t=0.186902s, 76076 KB] Simplifying 171276 unary operators... done! [171276 unary operators]
[t=0.422898s, 91344 KB] time to simplify: 0.235996s
[t=0.426897s, 91344 KB] Initializing additive heuristic...
[t=0.426897s, 91344 KB] Initializing FF heuristic...
[t=0.426897s, 91344 KB] stop search of patterns: 3355443KB
[t=0.426897s, 91344 KB] Generating patterns using the systematic generator...
[t=0.426897s, 91344 KB] building causal graph...done! [t=0.0239981s]
[t=6.01052s, 824232 KB] Found 2646294 SGA patterns.
[t=46.7559s, 829652 KB] Found 2870700 interesting patterns.
[t=47.3676s, 829652 KB] [28, 1988, 96418, 2772266]
[t=49.1307s, 829652 KB] Systematic generator number of patterns: 6048
[t=49.1307s, 829652 KB] Systematic generator total PDB size: 33979546
[t=49.1307s, 829652 KB] Systematic generator computation time: 48.7038s
[t=49.1307s, 829652 KB] Computing PDBs for pattern collection...
[t=161.898s, 829652 KB] Done computing PDBs for pattern collection: 112.767s
[t=168.323s, 829652 KB] Operators: 49392
[t=168.323s, 829652 KB] Restrictions: 6048
[t=168.323s, 829652 KB] Mean mentions: 615
[t=168.323s, 829652 KB] Mean operators: 5024
[t=168.327s, 829652 KB] Building successor generator...done!
[t=168.339s, 829652 KB] peak memory difference for successor generator creation: 0 KB
[t=168.339s, 829652 KB] time for successor generation creation: 0.0119899s
[t=168.339s, 829652 KB] Variables: 99
[t=168.339s, 829652 KB] FactPairs: 1346
[t=168.339s, 829652 KB] Bytes per state: 32
[t=168.339s, 829652 KB] Conducting best first search without reopening closed nodes, (real) bound = 2147483647
[t=168.339s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 58
[t=168.339s, 829652 KB] g=0, 1 evaluated, 0 expanded
[t=168.339s, 829652 KB] Initial heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 58
[t=168.339s, 829652 KB] pruning method: none
[t=168.343s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 56
[t=168.343s, 829652 KB] g=1, 10 evaluated, 1 expanded
[t=168.347s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 55
[t=168.347s, 829652 KB] g=2, 32 evaluated, 2 expanded
[t=168.347s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 54
[t=168.347s, 829652 KB] g=2, 37 evaluated, 2 expanded
[t=168.351s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 53
[t=168.351s, 829652 KB] g=3, 59 evaluated, 3 expanded
[t=168.379s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 51
[t=168.379s, 829652 KB] g=4, 222 evaluated, 9 expanded
[t=168.419s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 49
[t=168.419s, 829652 KB] g=6, 460 evaluated, 18 expanded
[t=168.423s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 48
[t=168.423s, 829652 KB] g=7, 478 evaluated, 19 expanded
[t=168.431s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 46
[t=168.431s, 829652 KB] g=8, 529 evaluated, 21 expanded
[t=168.439s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 44
[t=168.439s, 829652 KB] g=9, 572 evaluated, 22 expanded
[t=168.447s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 42
[t=168.447s, 829652 KB] g=11, 613 evaluated, 24 expanded
[t=168.451s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 39
[t=168.451s, 829652 KB] g=12, 633 evaluated, 25 expanded
[t=168.455s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 38
[t=168.455s, 829652 KB] g=13, 651 evaluated, 26 expanded
[t=168.459s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 37
[t=168.459s, 829652 KB] g=14, 675 evaluated, 27 expanded
[t=168.475s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 35
[t=168.475s, 829652 KB] g=16, 790 evaluated, 31 expanded
[t=168.479s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 33
[t=168.479s, 829652 KB] g=17, 813 evaluated, 32 expanded
[t=168.483s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 32
[t=168.483s, 829652 KB] g=18, 842 evaluated, 33 expanded
[t=168.495s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 31
[t=168.495s, 829652 KB] g=19, 920 evaluated, 36 expanded
[t=168.499s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 30
[t=168.499s, 829652 KB] g=20, 939 evaluated, 37 expanded
[t=168.503s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 29
[t=168.503s, 829652 KB] g=21, 952 evaluated, 38 expanded
[t=168.503s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 28
[t=168.503s, 829652 KB] g=21, 953 evaluated, 38 expanded
[t=168.507s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 27
[t=168.507s, 829652 KB] g=22, 992 evaluated, 39 expanded
[t=168.511s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 26
[t=168.511s, 829652 KB] g=23, 1009 evaluated, 40 expanded
[t=168.519s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 25
[t=168.519s, 829652 KB] g=25, 1065 evaluated, 42 expanded
[t=169.063s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 24
[t=169.063s, 829652 KB] g=30, 3742 evaluated, 154 expanded
[t=169.071s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 22
[t=169.071s, 829652 KB] g=31, 3795 evaluated, 156 expanded
[t=169.075s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 21
[t=169.075s, 829652 KB] g=32, 3812 evaluated, 157 expanded
[t=175.032s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 20
[t=175.032s, 829652 KB] g=39, 31900 evaluated, 1452 expanded
[t=175.052s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 19
[t=175.052s, 829652 KB] g=41, 32009 evaluated, 1456 expanded
[t=175.052s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 18
[t=175.052s, 829652 KB] g=42, 32024 evaluated, 1457 expanded
[t=185.217s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 17
[t=185.217s, 829652 KB] g=47, 79137 evaluated, 3691 expanded
[t=185.221s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 16
[t=185.221s, 829652 KB] g=48, 79158 evaluated, 3692 expanded
[t=192.91s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 15
[t=192.91s, 829652 KB] g=53, 115029 evaluated, 5381 expanded
[t=192.914s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 14
[t=192.914s, 829652 KB] g=54, 115053 evaluated, 5382 expanded
[t=198.092s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 13
[t=198.092s, 829652 KB] g=59, 139515 evaluated, 6520 expanded
[t=198.096s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 12
[t=198.096s, 829652 KB] g=60, 139533 evaluated, 6521 expanded
[t=201.547s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 11
[t=201.547s, 829652 KB] g=64, 156139 evaluated, 7268 expanded
[t=201.555s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 9
[t=201.555s, 829652 KB] g=65, 156190 evaluated, 7270 expanded
[t=201.559s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 8
[t=201.559s, 829652 KB] g=66, 156209 evaluated, 7271 expanded
[t=203.059s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 7
[t=203.059s, 829652 KB] g=74, 163652 evaluated, 7592 expanded
[t=203.067s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 6
[t=203.067s, 829652 KB] g=76, 163694 evaluated, 7594 expanded
[t=203.602s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 5
[t=203.602s, 829652 KB] g=80, 166352 evaluated, 7712 expanded
[t=203.61s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 4
[t=203.61s, 829652 KB] g=82, 166394 evaluated, 7714 expanded
[t=203.818s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 3
[t=203.818s, 829652 KB] g=86, 167467 evaluated, 7761 expanded
[t=203.826s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 1
[t=203.826s, 829652 KB] g=87, 167522 evaluated, 7763 expanded
[t=203.826s, 829652 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 0
[t=203.826s, 829652 KB] g=88, 167536 evaluated, 7764 expanded
[t=203.83s, 829652 KB] Solution found!
[t=203.83s, 829652 KB] Actual search time: 35.4914s
move-curb-to-car car_18 curb_14 car_03 (1)
move-car-to-curb car_14 car_12 curb_14 (1)
move-car-to-car car_17 car_05 car_14 (1)
move-car-to-car car_20 car_10 car_05 (1)
move-car-to-car car_13 car_25 car_12 (1)
move-curb-to-car car_25 curb_09 car_10 (1)
move-car-to-curb car_06 car_07 curb_09 (1)
move-car-to-car car_21 car_09 car_06 (1)
move-car-to-car car_24 car_15 car_09 (1)
move-car-to-car car_02 car_22 car_15 (1)
move-curb-to-car car_22 curb_02 car_07 (1)
move-car-to-curb car_02 car_15 curb_02 (1)
move-car-to-car car_17 car_14 car_02 (1)
move-car-to-car car_08 car_04 car_14 (1)
move-car-to-car car_16 car_19 car_15 (1)
move-curb-to-car car_19 curb_08 car_04 (1)
move-car-to-curb car_08 car_14 curb_08 (1)
move-car-to-car car_26 car_23 car_14 (1)
move-curb-to-car car_23 curb_06 car_08 (1)
move-car-to-curb car_11 car_01 curb_06 (1)
move-car-to-car car_16 car_15 car_01 (1)
move-car-to-car car_26 car_14 car_11 (1)
move-car-to-car car_13 car_12 car_14 (1)
move-car-to-car car_27 car_00 car_12 (1)
move-curb-to-car car_15 curb_03 car_00 (1)
move-car-to-curb car_18 car_03 curb_03 (1)
move-curb-to-car car_03 curb_13 car_18 (1)
move-car-to-curb car_13 car_14 curb_13 (1)
move-car-to-car car_03 car_18 car_13 (1)
move-curb-to-car car_18 curb_03 car_14 (1)
move-car-to-curb car_03 car_13 curb_03 (1)
move-car-to-car car_18 car_14 car_03 (1)
move-car-to-car car_27 car_12 car_13 (1)
move-curb-to-car car_12 curb_05 car_14 (1)
move-car-to-curb car_16 car_01 curb_05 (1)
move-curb-to-car car_01 curb_12 car_16 (1)
move-car-to-curb car_12 car_14 curb_12 (1)
move-car-to-car car_27 car_13 car_12 (1)
move-car-to-car car_01 car_16 car_13 (1)
move-curb-to-car car_16 curb_05 car_14 (1)
move-car-to-curb car_22 car_07 curb_05 (1)
move-curb-to-car car_07 curb_01 car_22 (1)
move-car-to-curb car_01 car_13 curb_01 (1)
move-car-to-car car_16 car_14 car_01 (1)
move-car-to-car car_07 car_22 car_13 (1)
move-curb-to-car car_22 curb_05 car_14 (1)
move-car-to-curb car_25 car_10 curb_05 (1)
move-curb-to-car car_10 curb_07 car_25 (1)
move-car-to-curb car_07 car_13 curb_07 (1)
move-car-to-car car_22 car_14 car_07 (1)
move-car-to-car car_10 car_25 car_13 (1)
move-curb-to-car car_25 curb_05 car_14 (1)
move-car-to-curb car_19 car_04 curb_05 (1)
move-curb-to-car car_04 curb_10 car_19 (1)
move-car-to-curb car_10 car_13 curb_10 (1)
move-car-to-car car_25 car_14 car_10 (1)
move-car-to-car car_04 car_19 car_13 (1)
move-curb-to-car car_19 curb_05 car_14 (1)
move-car-to-curb car_20 car_05 curb_05 (1)
move-curb-to-car car_05 curb_04 car_20 (1)
move-car-to-curb car_04 car_13 curb_04 (1)
move-car-to-car car_19 car_14 car_04 (1)
move-car-to-car car_05 car_20 car_13 (1)
move-curb-to-car car_20 curb_05 car_14 (1)
move-car-to-curb car_05 car_13 curb_05 (1)
move-car-to-car car_20 car_14 car_05 (1)
move-car-to-car car_24 car_09 car_14 (1)
move-curb-to-car car_09 curb_00 car_13 (1)
move-car-to-curb car_21 car_06 curb_00 (1)
move-curb-to-car car_06 curb_09 car_21 (1)
move-car-to-curb car_09 car_13 curb_09 (1)
move-car-to-car car_24 car_14 car_09 (1)
move-car-to-car car_06 car_21 car_14 (1)
move-curb-to-car car_21 curb_00 car_13 (1)
move-car-to-curb car_26 car_11 curb_00 (1)
move-curb-to-car car_11 curb_06 car_26 (1)
move-car-to-curb car_06 car_14 curb_06 (1)
move-car-to-car car_21 car_13 car_06 (1)
move-car-to-car car_11 car_26 car_14 (1)
move-curb-to-car car_26 curb_00 car_13 (1)
move-car-to-curb car_15 car_00 curb_00 (1)
move-curb-to-car car_00 curb_11 car_15 (1)
move-car-to-curb car_11 car_14 curb_11 (1)
move-car-to-car car_26 car_13 car_11 (1)
move-car-to-car car_00 car_15 car_13 (1)
move-curb-to-car car_15 curb_00 car_14 (1)
move-car-to-curb car_00 car_13 curb_00 (1)
move-car-to-car car_15 car_14 car_00 (1)
[t=203.83s, 829652 KB] Plan length: 88 step(s).
[t=203.83s, 829652 KB] Plan cost: 88
[t=203.83s, 829652 KB] Expanded 7765 state(s).
[t=203.83s, 829652 KB] Reopened 0 state(s).
[t=203.83s, 829652 KB] Evaluated 167563 state(s).
[t=203.83s, 829652 KB] Evaluations: 175327
[t=203.83s, 829652 KB] Generated 216904 state(s).
[t=203.83s, 829652 KB] Dead ends: 13526 state(s).
[t=203.83s, 829652 KB] Number of registered states: 167563
[t=203.83s, 829652 KB] Int hash set load factor: 167563/262144 = 0.639202
[t=203.83s, 829652 KB] Int hash set resizes: 18
[t=203.83s, 829652 KB] Search time: 35.4914s
[t=203.83s, 829652 KB] Total time: 203.83s
Solution found.
Peak memory: 829652 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Running validate.
INFO     validate stdin: None
INFO     validate time limit: None
INFO     validate memory limit: None
INFO     validate command line string: validate domain.pddl problem.pddl sas_plan
Checking plan: sas_plan
Plan executed successfully - checking goal
Plan valid
Final value: 88 

Successful plans:
Value: 88
 sas_plan 88 

validate exit code: 0

