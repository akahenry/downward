INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: 1799.98s
INFO     translator memory limit: 4096 MB
INFO     translator command line string: /usr/bin/python3 /home/dmdoebber/downward-projects/downward/experiments/paper/data/pref-ops-val/code-11d6cc7f374e3fd7216f4422aa97b8db8c68d3c3_e5e41175/builds/release/bin/translate/translate.py domain.pddl problem.pddl --sas-file output.sas
Parsing...
Parsing: [0.010s CPU, 0.002s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.002s wall-clock]
Preparing model... [0.000s CPU, 0.001s wall-clock]
Generated 51 rules.
Computing model... [0.020s CPU, 0.025s wall-clock]
2797 relevant atoms
2486 auxiliary atoms
5283 final queue length
10483 total queue pushes
Completing instantiation... [0.060s CPU, 0.058s wall-clock]
Instantiating: [0.080s CPU, 0.086s wall-clock]
Computing fact groups...
Finding invariants...
5 initial candidates
Finding invariants: [0.010s CPU, 0.010s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
10 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.011s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.003s wall-clock]
Translating task: [0.050s CPU, 0.050s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
10 propositions removed
Detecting unreachable propositions: [0.030s CPU, 0.022s wall-clock]
Reordering and filtering variables...
20 of 20 variables necessary.
10 of 20 mutex groups necessary.
2340 of 2340 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.010s CPU, 0.007s wall-clock]
Translator variables: 20
Translator derived variables: 0
Translator facts: 120
Translator goal facts: 20
Translator mutex groups: 10
Translator total mutex groups size: 100
Translator operators: 2340
Translator axioms: 0
Translator task size: 12050
Translator peak memory: 38516 KB
Writing output... [0.010s CPU, 0.008s wall-clock]
Done! [0.200s CPU, 0.189s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: 1799.77s
INFO     search memory limit: 4096 MB
INFO     search command line string: /home/dmdoebber/downward-projects/downward/experiments/paper/data/pref-ops-val/code-11d6cc7f374e3fd7216f4422aa97b8db8c68d3c3_e5e41175/builds/release/bin/downward --evaluator 'eval=ff()' --search 'eager_greedy([lsh(patterns=systematic(4), op_order=default, res_order=default, transform=adapt_costs(cost_type=ONE))],  preferred=[eval])' --internal-plan-file sas_plan < output.sas
[t=0s, 46116 KB] reading input...
[t=0.00735797s, 46724 KB] done reading input!
[t=0.00735797s, 47400 KB] Simplifying 4770 unary operators... done! [4590 unary operators]
[t=0.00735797s, 47796 KB] time to simplify: 0s
[t=0.00735797s, 47796 KB] Initializing additive heuristic...
[t=0.00735797s, 47796 KB] Initializing FF heuristic...
[t=0.00735797s, 47796 KB] stop search of patterns: 3355443KB
[t=0.00735797s, 47796 KB] Generating patterns using the systematic generator...
[t=0.00735797s, 47796 KB] building causal graph...done! [t=0s]
[t=0.0153579s, 48080 KB] Found 2145 SGA patterns.
[t=0.0672538s, 48564 KB] Found 5820 interesting patterns.
[t=0.0672538s, 48564 KB] [20, 145, 1020, 4635]
[t=0.0672538s, 48712 KB] Systematic generator number of patterns: 495
[t=0.0672538s, 48712 KB] Systematic generator total PDB size: 224180
[t=0.0672538s, 48712 KB] Systematic generator computation time: 0.0598959s
[t=0.0672538s, 48712 KB] Computing PDBs for pattern collection...
[t=0.33498s, 48712 KB] Done computing PDBs for pattern collection: 0.267726s
[t=0.354979s, 53020 KB] Operators: 2340
[t=0.354979s, 53020 KB] Restrictions: 495
[t=0.354979s, 53020 KB] Mean mentions: 155
[t=0.354979s, 53020 KB] Mean operators: 736
[t=0.354979s, 53020 KB] Building successor generator...done!
[t=0.354979s, 53020 KB] peak memory difference for successor generator creation: 0 KB
[t=0.354979s, 53020 KB] time for successor generation creation: 0s
[t=0.354979s, 53020 KB] Variables: 20
[t=0.354979s, 53020 KB] FactPairs: 120
[t=0.354979s, 53020 KB] Bytes per state: 8
[t=0.354979s, 53020 KB] Conducting best first search without reopening closed nodes, (real) bound = 2147483647
[t=0.354979s, 53020 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 29
[t=0.354979s, 53020 KB] g=0, 1 evaluated, 0 expanded
[t=0.354979s, 53020 KB] Initial heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 29
[t=0.354979s, 53020 KB] pruning method: none
[t=0.354979s, 53020 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 28
[t=0.354979s, 53020 KB] g=1, 4 evaluated, 1 expanded
[t=0.354979s, 53020 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 26
[t=0.354979s, 53020 KB] g=4, 48 evaluated, 2 expanded
[t=0.354979s, 53020 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 25
[t=0.354979s, 53020 KB] g=5, 66 evaluated, 3 expanded
[t=0.354979s, 53020 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 24
[t=0.354979s, 53020 KB] g=7, 74 evaluated, 3 expanded
[t=0.354979s, 53020 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 23
[t=0.354979s, 53020 KB] g=8, 83 evaluated, 4 expanded
[t=0.354979s, 53020 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 22
[t=0.354979s, 53020 KB] g=9, 106 evaluated, 5 expanded
[t=0.354979s, 53020 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 21
[t=0.354979s, 53020 KB] g=12, 149 evaluated, 6 expanded
[t=0.354979s, 53020 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 20
[t=0.354979s, 53020 KB] g=13, 168 evaluated, 7 expanded
[t=0.354979s, 53020 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 19
[t=0.354979s, 53020 KB] g=14, 182 evaluated, 8 expanded
[t=0.354979s, 53020 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 18
[t=0.354979s, 53020 KB] g=16, 193 evaluated, 8 expanded
[t=0.358979s, 53020 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 17
[t=0.358979s, 53020 KB] g=18, 350 evaluated, 15 expanded
[t=0.358979s, 53020 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 16
[t=0.358979s, 53020 KB] g=19, 392 evaluated, 16 expanded
[t=0.358979s, 53020 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 15
[t=0.358979s, 53020 KB] g=20, 413 evaluated, 17 expanded
[t=0.358979s, 53020 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 14
[t=0.358979s, 53020 KB] g=24, 465 evaluated, 19 expanded
[t=0.358979s, 53020 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 13
[t=0.358979s, 53020 KB] g=27, 493 evaluated, 20 expanded
[t=0.358979s, 53020 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 12
[t=0.358979s, 53020 KB] g=26, 499 evaluated, 21 expanded
[t=0.358979s, 53020 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 11
[t=0.358979s, 53020 KB] g=30, 564 evaluated, 23 expanded
[t=0.358979s, 53020 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 10
[t=0.358979s, 53020 KB] g=33, 593 evaluated, 24 expanded
[t=0.358979s, 53020 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 9
[t=0.358979s, 53020 KB] g=32, 598 evaluated, 25 expanded
[t=0.362979s, 53020 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 8
[t=0.362979s, 53020 KB] g=38, 1003 evaluated, 42 expanded
[t=0.362979s, 53020 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 7
[t=0.362979s, 53020 KB] g=39, 1061 evaluated, 44 expanded
[t=0.366978s, 53020 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 6
[t=0.366978s, 53020 KB] g=43, 1332 evaluated, 56 expanded
[t=0.366978s, 53020 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 5
[t=0.366978s, 53020 KB] g=46, 1360 evaluated, 57 expanded
[t=0.366978s, 53020 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 4
[t=0.366978s, 53020 KB] g=45, 1401 evaluated, 58 expanded
[t=0.366978s, 53020 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 3
[t=0.366978s, 53020 KB] g=51, 1574 evaluated, 65 expanded
[t=0.366978s, 53020 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 2
[t=0.366978s, 53020 KB] g=52, 1599 evaluated, 66 expanded
[t=0.366978s, 53020 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 0
[t=0.366978s, 53020 KB] g=58, 1632 evaluated, 68 expanded
[t=0.366978s, 53020 KB] Solution found!
[t=0.366978s, 53020 KB] Actual search time: 0.0119989s
rotate-2 seg-in-1 seg-out-2 car-in-1 car-out-2 (1)
analyze-2 seg-in-1 seg-out-1 car-out-2 car-out-1 (3)
analyze-2 seg-in-1 seg-out-1 car-out-1 car-out-2 (3)
rotate-2 seg-in-1 seg-out-2 car-out-2 car-in-1 (1)
rotate-2 seg-in-1 seg-out-3 car-in-1 car-out-3 (1)
analyze-2 seg-in-1 seg-out-1 car-out-3 car-out-1 (3)
rotate-2 seg-in-4 seg-out-1 car-in-4 car-out-3 (1)
rotate-2 seg-in-1 seg-out-1 car-out-1 car-in-4 (1)
analyze-2 seg-in-1 seg-out-1 car-in-4 car-out-1 (3)
rotate-2 seg-in-1 seg-out-3 car-out-1 car-in-1 (1)
rotate-2 seg-in-4 seg-out-3 car-out-3 car-out-1 (1)
rotate-2 seg-in-4 seg-out-1 car-out-1 car-in-4 (1)
rotate-2 seg-in-1 seg-out-4 car-in-1 car-out-4 (1)
analyze-2 seg-in-1 seg-out-1 car-out-4 car-out-1 (3)
rotate-2 seg-in-1 seg-out-1 car-out-1 car-out-4 (1)
rotate-2 seg-in-1 seg-out-4 car-out-4 car-in-1 (1)
rotate-2 seg-in-1 seg-out-5 car-in-1 car-out-5 (1)
analyze-2 seg-in-1 seg-out-1 car-out-5 car-out-1 (3)
rotate-2 seg-in-1 seg-out-1 car-out-1 car-out-5 (1)
rotate-2 seg-in-2 seg-out-5 car-in-2 car-in-1 (1)
rotate-2 seg-in-1 seg-out-5 car-out-5 car-in-2 (1)
analyze-2 seg-in-1 seg-out-1 car-in-2 car-out-1 (3)
rotate-2 seg-in-2 seg-out-1 car-in-1 car-in-2 (1)
rotate-2 seg-in-3 seg-out-1 car-in-3 car-in-1 (1)
rotate-2 seg-in-1 seg-out-1 car-out-1 car-in-3 (1)
analyze-2 seg-in-1 seg-out-1 car-in-3 car-out-1 (3)
rotate-2 seg-in-3 seg-out-1 car-in-1 car-in-3 (1)
rotate-2 seg-in-1 seg-out-1 car-out-1 car-in-1 (1)
rotate-2 seg-in-5 seg-out-5 car-in-5 car-out-5 (1)
rotate-2 seg-in-1 seg-out-5 car-in-1 car-in-5 (1)
analyze-2 seg-in-1 seg-out-1 car-in-5 car-out-1 (3)
rotate-2 seg-in-1 seg-out-5 car-out-1 car-in-1 (1)
rotate-2 seg-in-5 seg-out-5 car-out-5 car-out-1 (1)
rotate-2 seg-in-5 seg-out-1 car-out-1 car-in-5 (1)
analyze-2 seg-in-1 seg-out-1 car-in-1 car-out-1 (3)
rotate-2 seg-in-1 seg-out-1 car-out-1 car-in-1 (1)
[t=0.366978s, 53020 KB] Plan length: 36 step(s).
[t=0.366978s, 53020 KB] Plan cost: 56
[t=0.366978s, 53020 KB] Expanded 69 state(s).
[t=0.366978s, 53020 KB] Reopened 0 state(s).
[t=0.366978s, 53020 KB] Evaluated 1652 state(s).
[t=0.366978s, 53020 KB] Evaluations: 1720
[t=0.366978s, 53020 KB] Generated 1768 state(s).
[t=0.366978s, 53020 KB] Dead ends: 0 state(s).
[t=0.366978s, 53020 KB] Number of registered states: 1652
[t=0.366978s, 53020 KB] Int hash set load factor: 1652/2048 = 0.806641
[t=0.366978s, 53020 KB] Int hash set resizes: 11
[t=0.366978s, 53020 KB] Search time: 0.0119989s
[t=0.366978s, 53020 KB] Total time: 0.366978s
Solution found.
Peak memory: 53020 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Running validate.
INFO     validate stdin: None
INFO     validate time limit: None
INFO     validate memory limit: None
INFO     validate command line string: validate domain.pddl problem.pddl sas_plan
Checking plan: sas_plan
Plan executed successfully - checking goal
Plan valid
Final value: 56 

Successful plans:
Value: 56
 sas_plan 56 

validate exit code: 0

