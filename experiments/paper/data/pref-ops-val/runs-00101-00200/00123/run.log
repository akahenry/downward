INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: 1799.99s
INFO     translator memory limit: 4096 MB
INFO     translator command line string: /usr/bin/python3 /home/dmdoebber/downward-projects/downward/experiments/paper/data/pref-ops-val/code-11d6cc7f374e3fd7216f4422aa97b8db8c68d3c3_e5e41175/builds/release/bin/translate/translate.py domain.pddl problem.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.002s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.001s wall-clock]
Generated 32 rules.
Computing model... [0.200s CPU, 0.194s wall-clock]
33917 relevant atoms
3770 auxiliary atoms
37687 final queue length
109988 total queue pushes
Completing instantiation... [1.110s CPU, 1.115s wall-clock]
Instantiating: [1.320s CPU, 1.316s wall-clock]
Computing fact groups...
Finding invariants...
12 initial candidates
Finding invariants: [0.000s CPU, 0.004s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.003s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
61 uncovered facts
Choosing groups: [0.010s CPU, 0.002s wall-clock]
Building translation key... [0.000s CPU, 0.001s wall-clock]
Computing fact groups: [0.010s CPU, 0.012s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.001s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.001s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.050s CPU, 0.044s wall-clock]
Translating task: [1.290s CPU, 1.283s wall-clock]
38592 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
24 propositions removed
Detecting unreachable propositions: [0.640s CPU, 0.645s wall-clock]
Reordering and filtering variables...
85 of 85 variables necessary.
37 of 61 mutex groups necessary.
31104 of 31104 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.180s CPU, 0.186s wall-clock]
Translator variables: 85
Translator derived variables: 0
Translator facts: 1010
Translator goal facts: 24
Translator mutex groups: 37
Translator total mutex groups size: 925
Translator operators: 31104
Translator axioms: 0
Translator task size: 253756
Translator peak memory: 180712 KB
Writing output... [0.170s CPU, 0.174s wall-clock]
Done! [3.660s CPU, 3.673s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: 1796.27s
INFO     search memory limit: 4096 MB
INFO     search command line string: /home/dmdoebber/downward-projects/downward/experiments/paper/data/pref-ops-val/code-11d6cc7f374e3fd7216f4422aa97b8db8c68d3c3_e5e41175/builds/release/bin/downward --evaluator 'eval=ff()' --search 'eager_greedy([lsh(patterns=systematic(4), op_order=default, res_order=default, transform=adapt_costs(cost_type=ONE))],  preferred=[eval])' --internal-plan-file sas_plan < output.sas
[t=0s, 46116 KB] reading input...
[t=0.107969s, 57872 KB] done reading input!
[t=0.115966s, 64348 KB] Simplifying 107976 unary operators... done! [107976 unary operators]
[t=0.207946s, 74264 KB] time to simplify: 0.0919798s
[t=0.207946s, 74264 KB] Initializing additive heuristic...
[t=0.207946s, 74264 KB] Initializing FF heuristic...
[t=0.207946s, 74264 KB] stop search of patterns: 3355443KB
[t=0.207946s, 74264 KB] Generating patterns using the systematic generator...
[t=0.207946s, 74264 KB] building causal graph...done! [t=0.0159913s]
[t=3.08589s, 443728 KB] Found 1436144 SGA patterns.
[t=24.3253s, 461456 KB] Found 1554548 interesting patterns.
[t=24.6931s, 461456 KB] [24, 1464, 60756, 1492304]
[t=25.5966s, 461456 KB] Systematic generator number of patterns: 4464
[t=25.5966s, 461456 KB] Systematic generator total PDB size: 16239966
[t=25.5966s, 461456 KB] Systematic generator computation time: 25.3886s
[t=25.5966s, 461456 KB] Computing PDBs for pattern collection...
[t=71.5212s, 461456 KB] Done computing PDBs for pattern collection: 45.9246s
[t=74.3002s, 461456 KB] Operators: 31104
[t=74.3002s, 461456 KB] Restrictions: 4464
[t=74.3002s, 461456 KB] Mean mentions: 527
[t=74.3002s, 461456 KB] Mean operators: 3674
[t=74.3042s, 461456 KB] Building successor generator...done!
[t=74.3122s, 461456 KB] peak memory difference for successor generator creation: 0 KB
[t=74.3122s, 461456 KB] time for successor generation creation: 0.00798069s
[t=74.3122s, 461456 KB] Variables: 85
[t=74.3122s, 461456 KB] FactPairs: 1010
[t=74.3122s, 461456 KB] Bytes per state: 28
[t=74.3122s, 461456 KB] Conducting best first search without reopening closed nodes, (real) bound = 2147483647
[t=74.3122s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 45
[t=74.3122s, 461456 KB] g=0, 1 evaluated, 0 expanded
[t=74.3122s, 461456 KB] Initial heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 45
[t=74.3122s, 461456 KB] pruning method: none
[t=74.3202s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 43
[t=74.3202s, 461456 KB] g=2, 59 evaluated, 3 expanded
[t=74.3202s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 42
[t=74.3202s, 461456 KB] g=3, 77 evaluated, 4 expanded
[t=74.3282s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 40
[t=74.3282s, 461456 KB] g=4, 121 evaluated, 6 expanded
[t=74.3282s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 39
[t=74.3282s, 461456 KB] g=5, 142 evaluated, 7 expanded
[t=74.3322s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 38
[t=74.3322s, 461456 KB] g=6, 162 evaluated, 8 expanded
[t=74.3322s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 37
[t=74.3322s, 461456 KB] g=6, 165 evaluated, 8 expanded
[t=74.3362s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 36
[t=74.3362s, 461456 KB] g=7, 193 evaluated, 9 expanded
[t=74.3362s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 35
[t=74.3362s, 461456 KB] g=8, 210 evaluated, 10 expanded
[t=74.3362s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 34
[t=74.3362s, 461456 KB] g=8, 212 evaluated, 10 expanded
[t=74.3442s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 33
[t=74.3442s, 461456 KB] g=10, 281 evaluated, 13 expanded
[t=74.3522s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 32
[t=74.3522s, 461456 KB] g=12, 333 evaluated, 15 expanded
[t=74.3522s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 30
[t=74.3522s, 461456 KB] g=13, 356 evaluated, 16 expanded
[t=74.3602s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 28
[t=74.3602s, 461456 KB] g=15, 422 evaluated, 19 expanded
[t=74.3641s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 27
[t=74.3641s, 461456 KB] g=16, 453 evaluated, 20 expanded
[t=74.3641s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 26
[t=74.3641s, 461456 KB] g=17, 462 evaluated, 21 expanded
[t=74.3681s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 25
[t=74.3681s, 461456 KB] g=18, 482 evaluated, 22 expanded
[t=74.3722s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 24
[t=74.3722s, 461456 KB] g=19, 501 evaluated, 23 expanded
[t=74.3722s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 23
[t=74.3722s, 461456 KB] g=20, 530 evaluated, 24 expanded
[t=82.618s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 22
[t=82.618s, 461456 KB] g=27, 60624 evaluated, 3005 expanded
[t=83.2339s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 21
[t=83.2339s, 461456 KB] g=36, 65202 evaluated, 3232 expanded
[t=84.0256s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 20
[t=84.0256s, 461456 KB] g=35, 70994 evaluated, 3517 expanded
[t=90.1041s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 19
[t=90.1041s, 461456 KB] g=42, 113962 evaluated, 5799 expanded
[t=90.1081s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 18
[t=90.1081s, 461456 KB] g=43, 113995 evaluated, 5800 expanded
[t=90.1161s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 17
[t=90.1161s, 461456 KB] g=45, 114054 evaluated, 5803 expanded
[t=92.1835s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 16
[t=92.1835s, 461456 KB] g=52, 128645 evaluated, 6569 expanded
[t=92.1955s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 15
[t=92.1955s, 461456 KB] g=54, 128738 evaluated, 6573 expanded
[t=92.1995s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 14
[t=92.1995s, 461456 KB] g=55, 128751 evaluated, 6574 expanded
[t=95.0308s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 13
[t=95.0308s, 461456 KB] g=60, 148168 evaluated, 7655 expanded
[t=95.0308s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 12
[t=95.0308s, 461456 KB] g=61, 148186 evaluated, 7656 expanded
[t=96.9703s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 11
[t=96.9703s, 461456 KB] g=66, 161622 evaluated, 8392 expanded
[t=96.9703s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 10
[t=96.9703s, 461456 KB] g=67, 161636 evaluated, 8393 expanded
[t=98.2139s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 9
[t=98.2139s, 461456 KB] g=72, 170531 evaluated, 8854 expanded
[t=98.2179s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 8
[t=98.2179s, 461456 KB] g=73, 170550 evaluated, 8855 expanded
[t=98.8458s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 7
[t=98.8458s, 461456 KB] g=77, 175068 evaluated, 9090 expanded
[t=98.8498s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 5
[t=98.8498s, 461456 KB] g=78, 175088 evaluated, 9091 expanded
[t=98.8498s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 4
[t=98.8498s, 461456 KB] g=79, 175104 evaluated, 9092 expanded
[t=99.0017s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 3
[t=99.0017s, 461456 KB] g=87, 176231 evaluated, 9151 expanded
[t=99.0017s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 1
[t=99.0017s, 461456 KB] g=88, 176255 evaluated, 9152 expanded
[t=99.0017s, 461456 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 0
[t=99.0017s, 461456 KB] g=89, 176267 evaluated, 9153 expanded
[t=99.0057s, 461456 KB] Solution found!
[t=99.0057s, 461456 KB] Actual search time: 24.6936s
move-car-to-car car_07 car_19 car_16 (1)
move-curb-to-car car_19 curb_04 car_06 (1)
move-car-to-curb car_10 car_09 curb_04 (1)
move-car-to-car car_22 car_02 car_09 (1)
move-car-to-car car_15 car_01 car_02 (1)
move-car-to-car car_14 car_08 car_01 (1)
move-car-to-car car_21 car_00 car_08 (1)
move-car-to-car car_13 car_20 car_00 (1)
move-car-to-car car_23 car_11 car_10 (1)
move-car-to-car car_07 car_16 car_11 (1)
move-car-to-car car_17 car_05 car_20 (1)
move-car-to-car car_18 car_04 car_05 (1)
move-car-to-car car_17 car_20 car_04 (1)
move-curb-to-car car_20 curb_03 car_16 (1)
move-car-to-curb car_03 car_12 curb_03 (1)
move-car-to-car car_20 car_16 car_12 (1)
move-curb-to-car car_16 curb_12 car_03 (1)
move-car-to-curb car_07 car_11 curb_12 (1)
move-car-to-car car_20 car_12 car_07 (1)
move-curb-to-car car_11 curb_01 car_12 (1)
move-car-to-curb car_19 car_06 curb_01 (1)
move-curb-to-car car_06 curb_11 car_19 (1)
move-car-to-curb car_11 car_12 curb_11 (1)
move-car-to-car car_06 car_19 car_11 (1)
move-curb-to-car car_19 curb_01 car_12 (1)
move-car-to-curb car_06 car_11 curb_01 (1)
move-car-to-car car_19 car_12 car_06 (1)
move-curb-to-car car_12 curb_02 car_11 (1)
move-car-to-curb car_20 car_07 curb_02 (1)
move-curb-to-car car_07 curb_12 car_20 (1)
move-car-to-curb car_12 car_11 curb_12 (1)
move-car-to-car car_07 car_20 car_11 (1)
move-curb-to-car car_20 curb_02 car_12 (1)
move-car-to-curb car_07 car_11 curb_02 (1)
move-car-to-car car_20 car_12 car_07 (1)
move-car-to-car car_18 car_05 car_11 (1)
move-curb-to-car car_05 curb_00 car_12 (1)
move-car-to-curb car_22 car_09 curb_00 (1)
move-curb-to-car car_09 curb_05 car_22 (1)
move-car-to-curb car_05 car_12 curb_05 (1)
move-car-to-car car_18 car_11 car_05 (1)
move-car-to-car car_09 car_22 car_11 (1)
move-curb-to-car car_22 curb_00 car_12 (1)
move-car-to-curb car_09 car_11 curb_00 (1)
move-car-to-car car_22 car_12 car_09 (1)
move-car-to-car car_23 car_10 car_11 (1)
move-curb-to-car car_10 curb_04 car_12 (1)
move-car-to-curb car_14 car_01 curb_04 (1)
move-curb-to-car car_01 curb_10 car_14 (1)
move-car-to-curb car_10 car_12 curb_10 (1)
move-car-to-car car_23 car_11 car_10 (1)
move-car-to-car car_01 car_14 car_11 (1)
move-curb-to-car car_14 curb_04 car_12 (1)
move-car-to-curb car_19 car_06 curb_04 (1)
move-curb-to-car car_06 curb_01 car_19 (1)
move-car-to-curb car_01 car_11 curb_01 (1)
move-car-to-car car_14 car_12 car_01 (1)
move-car-to-car car_06 car_19 car_11 (1)
move-curb-to-car car_19 curb_04 car_12 (1)
move-car-to-curb car_15 car_02 curb_04 (1)
move-curb-to-car car_02 curb_06 car_15 (1)
move-car-to-curb car_06 car_11 curb_06 (1)
move-car-to-car car_19 car_12 car_06 (1)
move-car-to-car car_02 car_15 car_11 (1)
move-curb-to-car car_15 curb_04 car_12 (1)
move-car-to-curb car_20 car_07 curb_04 (1)
move-curb-to-car car_07 curb_02 car_20 (1)
move-car-to-curb car_02 car_11 curb_02 (1)
move-car-to-car car_15 car_12 car_02 (1)
move-car-to-car car_07 car_20 car_11 (1)
move-curb-to-car car_20 curb_04 car_12 (1)
move-car-to-curb car_17 car_04 curb_04 (1)
move-curb-to-car car_04 curb_07 car_17 (1)
move-car-to-curb car_07 car_11 curb_07 (1)
move-car-to-car car_20 car_12 car_07 (1)
move-car-to-car car_04 car_17 car_12 (1)
move-curb-to-car car_17 curb_04 car_11 (1)
move-car-to-curb car_04 car_12 curb_04 (1)
move-car-to-car car_17 car_11 car_04 (1)
move-car-to-car car_22 car_09 car_12 (1)
move-curb-to-car car_09 curb_00 car_11 (1)
move-car-to-curb car_13 car_00 curb_00 (1)
move-curb-to-car car_00 curb_09 car_13 (1)
move-car-to-curb car_09 car_11 curb_09 (1)
move-car-to-car car_22 car_12 car_09 (1)
move-car-to-car car_00 car_13 car_12 (1)
move-curb-to-car car_13 curb_00 car_11 (1)
move-car-to-curb car_00 car_12 curb_00 (1)
move-car-to-car car_13 car_11 car_00 (1)
[t=99.0057s, 461456 KB] Plan length: 89 step(s).
[t=99.0057s, 461456 KB] Plan cost: 89
[t=99.0057s, 461456 KB] Expanded 9154 state(s).
[t=99.0057s, 461456 KB] Reopened 0 state(s).
[t=99.0057s, 461456 KB] Evaluated 176290 state(s).
[t=99.0057s, 461456 KB] Evaluations: 185443
[t=99.0057s, 461456 KB] Generated 216950 state(s).
[t=99.0057s, 461456 KB] Dead ends: 15302 state(s).
[t=99.0057s, 461456 KB] Number of registered states: 176290
[t=99.0057s, 461456 KB] Int hash set load factor: 176290/262144 = 0.672493
[t=99.0057s, 461456 KB] Int hash set resizes: 18
[t=99.0057s, 461456 KB] Search time: 24.6936s
[t=99.0057s, 461456 KB] Total time: 99.0057s
Solution found.
Peak memory: 461456 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Running validate.
INFO     validate stdin: None
INFO     validate time limit: None
INFO     validate memory limit: None
INFO     validate command line string: validate domain.pddl problem.pddl sas_plan
Checking plan: sas_plan
Plan executed successfully - checking goal
Plan valid
Final value: 89 

Successful plans:
Value: 89
 sas_plan 89 

validate exit code: 0

