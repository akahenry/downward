INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: 1799.99s
INFO     translator memory limit: 4096 MB
INFO     translator command line string: /usr/bin/python3 /home/dmdoebber/downward-projects/downward/experiments/paper/data/pref-ops-val/code-11d6cc7f374e3fd7216f4422aa97b8db8c68d3c3_e5e41175/builds/release/bin/translate/translate.py domain.pddl problem.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.002s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.002s wall-clock]
Preparing model... [0.000s CPU, 0.001s wall-clock]
Generated 51 rules.
Computing model... [0.010s CPU, 0.014s wall-clock]
1226 relevant atoms
1561 auxiliary atoms
2787 final queue length
4963 total queue pushes
Completing instantiation... [0.030s CPU, 0.023s wall-clock]
Instantiating: [0.040s CPU, 0.039s wall-clock]
Computing fact groups...
Finding invariants...
5 initial candidates
Finding invariants: [0.010s CPU, 0.009s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
8 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.010s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.001s wall-clock]
Translating task: [0.020s CPU, 0.020s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
8 propositions removed
Detecting unreachable propositions: [0.010s CPU, 0.009s wall-clock]
Reordering and filtering variables...
16 of 16 variables necessary.
8 of 16 mutex groups necessary.
952 of 952 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.003s wall-clock]
Translator variables: 16
Translator derived variables: 0
Translator facts: 80
Translator goal facts: 16
Translator mutex groups: 8
Translator total mutex groups size: 64
Translator operators: 952
Translator axioms: 0
Translator task size: 4992
Translator peak memory: 33384 KB
Writing output... [0.000s CPU, 0.004s wall-clock]
Done! [0.080s CPU, 0.088s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: 1799.87s
INFO     search memory limit: 4096 MB
INFO     search command line string: /home/dmdoebber/downward-projects/downward/experiments/paper/data/pref-ops-val/code-11d6cc7f374e3fd7216f4422aa97b8db8c68d3c3_e5e41175/builds/release/bin/downward --evaluator 'eval=ff()' --search 'eager_greedy([lsh(patterns=systematic(4), op_order=default, res_order=default, transform=adapt_costs(cost_type=ONE))],  preferred=[eval])' --internal-plan-file sas_plan < output.sas
[t=0s, 46116 KB] reading input...
[t=0.00365329s, 46372 KB] done reading input!
[t=0.00365329s, 46772 KB] Simplifying 1960 unary operators... done! [1848 unary operators]
[t=0.00365329s, 46904 KB] time to simplify: 0s
[t=0.00365329s, 46904 KB] Initializing additive heuristic...
[t=0.00365329s, 46904 KB] Initializing FF heuristic...
[t=0.00365329s, 46904 KB] stop search of patterns: 3355443KB
[t=0.00365329s, 46904 KB] Generating patterns using the systematic generator...
[t=0.00365329s, 46904 KB] building causal graph...done! [t=0s]
[t=0.00765702s, 47056 KB] Found 906 SGA patterns.
[t=0.0276463s, 47312 KB] Found 2362 interesting patterns.
[t=0.0276463s, 47312 KB] [16, 92, 504, 1750]
[t=0.0276463s, 47312 KB] Systematic generator number of patterns: 324
[t=0.0276463s, 47312 KB] Systematic generator total PDB size: 72784
[t=0.0276463s, 47312 KB] Systematic generator computation time: 0.023993s
[t=0.0276463s, 47312 KB] Computing PDBs for pattern collection...
[t=0.103503s, 47312 KB] Done computing PDBs for pattern collection: 0.0758564s
[t=0.111508s, 48500 KB] Operators: 952
[t=0.111508s, 48500 KB] Restrictions: 324
[t=0.111508s, 48500 KB] Mean mentions: 125
[t=0.111508s, 48500 KB] Mean operators: 367
[t=0.111508s, 48500 KB] Building successor generator...done!
[t=0.111508s, 48500 KB] peak memory difference for successor generator creation: 0 KB
[t=0.111508s, 48500 KB] time for successor generation creation: 0s
[t=0.111508s, 48500 KB] Variables: 16
[t=0.111508s, 48500 KB] FactPairs: 80
[t=0.111508s, 48500 KB] Bytes per state: 4
[t=0.111508s, 48500 KB] Conducting best first search without reopening closed nodes, (real) bound = 2147483647
[t=0.111508s, 48500 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 21
[t=0.111508s, 48500 KB] g=0, 1 evaluated, 0 expanded
[t=0.111508s, 48500 KB] Initial heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 21
[t=0.111508s, 48500 KB] pruning method: none
[t=0.111508s, 48500 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 20
[t=0.111508s, 48500 KB] g=1, 4 evaluated, 1 expanded
[t=0.111508s, 48500 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 18
[t=0.111508s, 48500 KB] g=4, 31 evaluated, 2 expanded
[t=0.111508s, 48500 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 16
[t=0.111508s, 48500 KB] g=7, 48 evaluated, 3 expanded
[t=0.111508s, 48500 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 15
[t=0.111508s, 48500 KB] g=8, 55 evaluated, 4 expanded
[t=0.111508s, 48500 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 14
[t=0.111508s, 48500 KB] g=12, 96 evaluated, 6 expanded
[t=0.111508s, 48500 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 13
[t=0.111508s, 48500 KB] g=15, 114 evaluated, 7 expanded
[t=0.111508s, 48500 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 12
[t=0.111508s, 48500 KB] g=14, 119 evaluated, 8 expanded
[t=0.111508s, 48500 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 11
[t=0.111508s, 48500 KB] g=18, 159 evaluated, 10 expanded
[t=0.111508s, 48500 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 10
[t=0.111508s, 48500 KB] g=21, 178 evaluated, 11 expanded
[t=0.111508s, 48500 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 9
[t=0.111508s, 48500 KB] g=20, 182 evaluated, 12 expanded
[t=0.111508s, 48500 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 8
[t=0.111508s, 48500 KB] g=26, 420 evaluated, 28 expanded
[t=0.111508s, 48500 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 7
[t=0.111508s, 48500 KB] g=27, 458 evaluated, 30 expanded
[t=0.115498s, 48500 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 6
[t=0.115498s, 48500 KB] g=31, 596 evaluated, 40 expanded
[t=0.115498s, 48500 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 5
[t=0.115498s, 48500 KB] g=34, 614 evaluated, 41 expanded
[t=0.115498s, 48500 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 4
[t=0.115498s, 48500 KB] g=33, 639 evaluated, 42 expanded
[t=0.115498s, 48500 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 3
[t=0.115498s, 48500 KB] g=39, 749 evaluated, 49 expanded
[t=0.115498s, 48500 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 2
[t=0.115498s, 48500 KB] g=40, 765 evaluated, 50 expanded
[t=0.115498s, 48500 KB] New best heuristic value for lsh(patterns = systematic(4), op_order = default, res_order = default, transform = adapt_costs(cost_type = one)): 0
[t=0.115498s, 48500 KB] g=46, 787 evaluated, 52 expanded
[t=0.115498s, 48500 KB] Solution found!
[t=0.115498s, 48500 KB] Actual search time: 0.00398992s
rotate-2 seg-in-1 seg-out-2 car-in-1 car-out-2 (1)
analyze-2 seg-in-1 seg-out-1 car-out-2 car-out-1 (3)
analyze-2 seg-in-1 seg-out-1 car-out-1 car-out-2 (3)
rotate-2 seg-in-1 seg-out-2 car-out-2 car-in-1 (1)
rotate-2 seg-in-1 seg-out-3 car-in-1 car-out-3 (1)
analyze-2 seg-in-1 seg-out-1 car-out-3 car-out-1 (3)
rotate-2 seg-in-1 seg-out-1 car-out-1 car-out-3 (1)
rotate-2 seg-in-1 seg-out-3 car-out-3 car-in-1 (1)
rotate-2 seg-in-1 seg-out-4 car-in-1 car-out-4 (1)
analyze-2 seg-in-1 seg-out-1 car-out-4 car-out-1 (3)
rotate-2 seg-in-1 seg-out-1 car-out-1 car-out-4 (1)
rotate-2 seg-in-2 seg-out-4 car-in-2 car-in-1 (1)
rotate-2 seg-in-1 seg-out-4 car-out-4 car-in-2 (1)
analyze-2 seg-in-1 seg-out-1 car-in-2 car-out-1 (3)
rotate-2 seg-in-2 seg-out-1 car-in-1 car-in-2 (1)
rotate-2 seg-in-3 seg-out-1 car-in-3 car-in-1 (1)
rotate-2 seg-in-1 seg-out-1 car-out-1 car-in-3 (1)
analyze-2 seg-in-1 seg-out-1 car-in-3 car-out-1 (3)
rotate-2 seg-in-3 seg-out-1 car-in-1 car-in-3 (1)
rotate-2 seg-in-1 seg-out-1 car-out-1 car-in-1 (1)
rotate-2 seg-in-4 seg-out-4 car-in-4 car-out-4 (1)
rotate-2 seg-in-1 seg-out-4 car-in-1 car-in-4 (1)
analyze-2 seg-in-1 seg-out-1 car-in-4 car-out-1 (3)
rotate-2 seg-in-1 seg-out-4 car-out-1 car-in-1 (1)
rotate-2 seg-in-4 seg-out-4 car-out-4 car-out-1 (1)
rotate-2 seg-in-4 seg-out-1 car-out-1 car-in-4 (1)
analyze-2 seg-in-1 seg-out-1 car-in-1 car-out-1 (3)
rotate-2 seg-in-1 seg-out-1 car-out-1 car-in-1 (1)
[t=0.115498s, 48500 KB] Plan length: 28 step(s).
[t=0.115498s, 48500 KB] Plan cost: 44
[t=0.115498s, 48500 KB] Expanded 53 state(s).
[t=0.115498s, 48500 KB] Reopened 0 state(s).
[t=0.115498s, 48500 KB] Evaluated 799 state(s).
[t=0.115498s, 48500 KB] Evaluations: 851
[t=0.115498s, 48500 KB] Generated 884 state(s).
[t=0.115498s, 48500 KB] Dead ends: 0 state(s).
[t=0.115498s, 48500 KB] Number of registered states: 799
[t=0.115498s, 48500 KB] Int hash set load factor: 799/1024 = 0.780273
[t=0.115498s, 48500 KB] Int hash set resizes: 10
[t=0.115498s, 48500 KB] Search time: 0.00398992s
[t=0.115498s, 48500 KB] Total time: 0.115498s
Solution found.
Peak memory: 48500 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Running validate.
INFO     validate stdin: None
INFO     validate time limit: None
INFO     validate memory limit: None
INFO     validate command line string: validate domain.pddl problem.pddl sas_plan
Checking plan: sas_plan
Plan executed successfully - checking goal
Plan valid
Final value: 44 

Successful plans:
Value: 44
 sas_plan 44 

validate exit code: 0

